{"version":3,"sources":["webpack:///you-paint-i-guess-by-socketio.js","webpack:///./source/_articles/you-paint-i-guess-by-socketio.md"],"names":["webpackJsonp","1252","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,8jYACAC,OACAC,oBACAC","file":"you-paint-i-guess-by-socketio.js","sourcesContent":["webpackJsonp([14,113],{\n\n/***/ 1252:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=前言><a href=#%E5%89%8D%E8%A8%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>前言</h1><p>一直都想好好的学习运用<code>node</code>，一直都不知道要做什么东西，最近Java Web老师要求做个前端的应用，既然是前端应用，那肯定得是单页应用了， 而且node很适用于高并发的实时应用，所以便选择<code>node</code>以及基于<code>node</code>的<code>socket.io</code></p><!--more--><h1 id=演示地址><a href=#%E6%BC%94%E7%A4%BA%E5%9C%B0%E5%9D%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>演示地址</h1><ul><li>实时画板+聊天室 <a href=http://paint.moyuyc.xyz/>Demo</a> <a href=https://github.com/moyuyc/paint_online>GitHub</a></li><li>你画我猜+聊天室 <a href=http://paintgame.moyuyc.xyz/>Demo</a> <a href=https://github.com/moyuyc/paint_game>GitHub</a></li></ul><h1 id=解释><a href=#%E8%A7%A3%E9%87%8A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>解释</h1><h2 id=关于socketio><a href=#%E5%85%B3%E4%BA%8Esocketio aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于<code>Socket.IO</code></h2><blockquote><p><code>Socket.IO</code> 是基于node实现的套接字前端后端数据交互的库，通过它的封装，使用者可以很方便的开发，而且支持<code>websocket</code>/<code>ajax 长轮询</code>等方法，兼容低版本浏览器。</p></blockquote><p>基本使用如下： <em>服务器端</em></p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> httpd = <span class=hljs-built_in>require</span>(<span class=hljs-string>'http'</span>).createServer(handler);\\n<span class=hljs-keyword>var</span> io = <span class=hljs-built_in>require</span>(<span class=hljs-string>'socket.io'</span>).listen(httpd);\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>handler</span>(<span class=hljs-params>req,res</span>) </span>{\\n    \\n}\\nio.sockets.on(<span class=hljs-string>'connection'</span>,<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>socket</span>)</span>{\\n    <span class=hljs-comment>//新的客户端连接</span>\\n    socket.on(<span class=hljs-string>'login'</span>,(name,age)=>{\\n        socket.emit(<span class=hljs-string>'message'</span>,name+<span class=hljs-string>','</span>+age);<span class=hljs-comment>//触发客户端message事件</span>\\n    })\\n});</code></pre><p><em>客户端</em> 引入<code>js</code>文件</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>script</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\\\"socket.io/socket.io.js'>&lt;/script></span></span></code></pre><p>进行交互</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> socket = io.connect();      <span class=hljs-comment>//触发服务器端connection事件</span>\\nsocket.emit(<span class=hljs-string>'login'</span>,<span class=hljs-string>'moyu'</span>,<span class=hljs-number>20</span>); <span class=hljs-comment>//触发服务器端login事件</span>\\nsocket.on(<span class=hljs-string>'message'</span>,<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>msg</span>)</span>{\\n    alert(msg);\\n})</code></pre><h2 id=关于排行榜><a href=#%E5%85%B3%E4%BA%8E%E6%8E%92%E8%A1%8C%E6%A6%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于排行榜</h2><p>利用了js的匿名立即执行函数进行模块化包装</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> tops = (<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>/*\\n     * _tops : 存放所有id,按照回答正确数倒序排列\\n     * idmap : 一个hash map结构，key为id，value为名字与回答正确数\\n     * n : 前n个，在toJSON调用\\n     */</span>\\n    <span class=hljs-keyword>var</span> _tops = [],idmap={},n=<span class=hljs-number>10</span>;\\n    <span class=hljs-keyword>return</span> {\\n        <span class=hljs-attr>set</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id,name,v</span>) </span>{\\n            <span class=hljs-keyword>if</span>(<span class=hljs-keyword>this</span>.isExists(id))<span class=hljs-comment>//如果id已经存在则删除，防止出现重复id</span>\\n                <span class=hljs-keyword>this</span>.remove(id);\\n            <span class=hljs-comment>// 找到按照v从大到小所对应的位置</span>\\n            <span class=hljs-keyword>var</span> i = _tops.findIndex(<span class=hljs-function><span class=hljs-params>x</span>=></span>{<span class=hljs-keyword>return</span> idmap[x].v&lt;v;});\\n            i= i===<span class=hljs-number>-1</span> ? _tops.length : i;\\n            <span class=hljs-comment>// id在i+1位置插入至_tops</span>\\n            _tops.splice(i,<span class=hljs-number>0</span>,id);\\n            idmap[id] = {<span class=hljs-attr>name</span>:name,<span class=hljs-attr>v</span>:v};\\n        },\\n        <span class=hljs-attr>isExists</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>return</span> idmap[id]!=<span class=hljs-literal>null</span>;\\n        },\\n        <span class=hljs-attr>remove</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>var</span> i = _tops.indexOf(id);\\n            <span class=hljs-keyword>if</span>(i!==<span class=hljs-number>-1</span>) {\\n                _tops.splice(i, <span class=hljs-number>1</span>);\\n                <span class=hljs-keyword>delete</span> idmap[id];\\n                <span class=hljs-keyword>return</span> <span class=hljs-literal>true</span>;\\n            }\\n            <span class=hljs-keyword>return</span> <span class=hljs-literal>false</span>;\\n        },\\n        <span class=hljs-attr>get</span>:<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>return</span> idmap[id];\\n        },\\n        <span class=hljs-attr>toJSON</span>:<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\\n            <span class=hljs-comment>// JSON.stringify方法会隐式调用该方法        </span>\\n            <span class=hljs-keyword>var</span> arr = [];\\n            _tops.every(<span class=hljs-function>(<span class=hljs-params>x,i</span>)=></span>{\\n                <span class=hljs-keyword>if</span>(i>=n) <span class=hljs-keyword>return</span> <span class=hljs-literal>false</span>;\\n                arr.push({<span class=hljs-attr>id</span>:x,<span class=hljs-attr>v</span>:idmap[x].v,<span class=hljs-attr>name</span>:idmap[x].name});\\n                <span class=hljs-keyword>return</span> <span class=hljs-literal>true</span>;\\n            });\\n            <span class=hljs-keyword>return</span> arr;\\n        }\\n    }\\n}());</code></pre><h2 id=关于bootstrap栅格><a href=#%E5%85%B3%E4%BA%8Ebootstrap%E6%A0%85%E6%A0%BC aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于<code>Bootstrap</code>栅格</h2><pre><code class=\\\"hljs language-css\\\"data-query={} data-lang=css><span class=hljs-selector-class>.container</span>{\\n    <span class=hljs-attribute>margin-right</span>: auto;\\n    <span class=hljs-attribute>margin-left</span>: auto;\\n    //防止最外层的.row元素左右扩展15px\\n    <span class=hljs-attribute>padding-left</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>padding-right</span>: <span class=hljs-number>15px</span>;\\n}\\n\\n<span class=hljs-selector-class>.col-3</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>30%</span>;\\n}\\n<span class=hljs-selector-class>.col-4</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>40%</span>;\\n}\\n<span class=hljs-selector-class>.col-9</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>90%</span>;\\n}\\n\\n/.../\\n\\n<span class=hljs-selector-class>.row</span>{\\n    <span class=hljs-comment>/* 向外左右延伸15px */</span>\\n    <span class=hljs-attribute>margin-right</span>: -<span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>margin-left</span>: -<span class=hljs-number>15px</span>;\\n}\\n<span class=hljs-comment>/* 防止子元素为float,父元素的高度为0 */</span>\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:before</span>,\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:after</span> {\\n    <span class=hljs-attribute>content</span>: <span class=hljs-string>\\\" \\\"</span>;\\n    <span class=hljs-attribute>display</span>: table;\\n}\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:after</span> {\\n    <span class=hljs-attribute>clear</span>: both;\\n}\\n\\n<span class=hljs-selector-class>.col-1</span>, <span class=hljs-selector-class>.col-2</span>, <span class=hljs-selector-class>.col-3</span>, <span class=hljs-selector-class>.col-4</span>, <span class=hljs-selector-class>.col-5</span>, <span class=hljs-selector-class>.col-6</span>, <span class=hljs-selector-class>.col-7</span>, <span class=hljs-selector-class>.col-8</span>, <span class=hljs-selector-class>.col-9</span>{\\n    <span class=hljs-attribute>padding-left</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>padding-right</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>float</span>:left;\\n}</code></pre><p>HTML结构</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>main</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'container'</span>></span>\\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'row'</span>></span>\\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-8'</span>></span>\\n            <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'row'</span>></span>\\n                <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-6'</span>></span>\\n                    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>></span>col-6<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>></span>\\n                <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n                <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-4'</span>></span>\\n                    <span class=hljs-tag>&lt;<span class=hljs-name>div</span>></span>col-4<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n                <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n            <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-2'</span>></span>\\n            <span class=hljs-tag>&lt;<span class=hljs-name>div</span>></span>col-2<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n<span class=hljs-tag>&lt;/<span class=hljs-name>main</span>></span></code></pre><h2 id=关于一栏（多栏）宽度固定，一栏自适应><a href=#%E5%85%B3%E4%BA%8E%E4%B8%80%E6%A0%8F%EF%BC%88%E5%A4%9A%E6%A0%8F%EF%BC%89%E5%AE%BD%E5%BA%A6%E5%9B%BA%E5%AE%9A%EF%BC%8C%E4%B8%80%E6%A0%8F%E8%87%AA%E9%80%82%E5%BA%94 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于一栏（多栏）宽度固定，一栏自适应</h2><ul><li><a href=/htm/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.html>圣杯布局</a></li><li><a href=/htm/%E5%8F%8C%E9%A3%9E%E7%BF%BC.html>双飞翼</a></li></ul><h1 id=感受><a href=#%E6%84%9F%E5%8F%97 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>感受</h1><p>...做单页应用真的需要挺大的心脏，而且需要较好的整体的架构，好在<code>socket.io</code>对websocket封装的不错，变成了面向消息的方式，代码结构相对更加清晰了些。 ...不敢想象用Java做这种实时单页应用后端会有多么的「拗口」 最后推荐一个实时的更加优秀的游戏，<a href=http://slither.io/>slithe</a></p>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// you-paint-i-guess-by-socketio.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=前言><a href=#%E5%89%8D%E8%A8%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>前言</h1><p>一直都想好好的学习运用<code>node</code>，一直都不知道要做什么东西，最近Java Web老师要求做个前端的应用，既然是前端应用，那肯定得是单页应用了， 而且node很适用于高并发的实时应用，所以便选择<code>node</code>以及基于<code>node</code>的<code>socket.io</code></p><!--more--><h1 id=演示地址><a href=#%E6%BC%94%E7%A4%BA%E5%9C%B0%E5%9D%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>演示地址</h1><ul><li>实时画板+聊天室 <a href=http://paint.moyuyc.xyz/>Demo</a> <a href=https://github.com/moyuyc/paint_online>GitHub</a></li><li>你画我猜+聊天室 <a href=http://paintgame.moyuyc.xyz/>Demo</a> <a href=https://github.com/moyuyc/paint_game>GitHub</a></li></ul><h1 id=解释><a href=#%E8%A7%A3%E9%87%8A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>解释</h1><h2 id=关于socketio><a href=#%E5%85%B3%E4%BA%8Esocketio aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于<code>Socket.IO</code></h2><blockquote><p><code>Socket.IO</code> 是基于node实现的套接字前端后端数据交互的库，通过它的封装，使用者可以很方便的开发，而且支持<code>websocket</code>/<code>ajax 长轮询</code>等方法，兼容低版本浏览器。</p></blockquote><p>基本使用如下： <em>服务器端</em></p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> httpd = <span class=hljs-built_in>require</span>(<span class=hljs-string>'http'</span>).createServer(handler);\\n<span class=hljs-keyword>var</span> io = <span class=hljs-built_in>require</span>(<span class=hljs-string>'socket.io'</span>).listen(httpd);\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>handler</span>(<span class=hljs-params>req,res</span>) </span>{\\n    \\n}\\nio.sockets.on(<span class=hljs-string>'connection'</span>,<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>socket</span>)</span>{\\n    <span class=hljs-comment>//新的客户端连接</span>\\n    socket.on(<span class=hljs-string>'login'</span>,(name,age)=>{\\n        socket.emit(<span class=hljs-string>'message'</span>,name+<span class=hljs-string>','</span>+age);<span class=hljs-comment>//触发客户端message事件</span>\\n    })\\n});</code></pre><p><em>客户端</em> 引入<code>js</code>文件</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>script</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\\\"socket.io/socket.io.js'>&lt;/script></span></span></code></pre><p>进行交互</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> socket = io.connect();      <span class=hljs-comment>//触发服务器端connection事件</span>\\nsocket.emit(<span class=hljs-string>'login'</span>,<span class=hljs-string>'moyu'</span>,<span class=hljs-number>20</span>); <span class=hljs-comment>//触发服务器端login事件</span>\\nsocket.on(<span class=hljs-string>'message'</span>,<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>msg</span>)</span>{\\n    alert(msg);\\n})</code></pre><h2 id=关于排行榜><a href=#%E5%85%B3%E4%BA%8E%E6%8E%92%E8%A1%8C%E6%A6%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于排行榜</h2><p>利用了js的匿名立即执行函数进行模块化包装</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> tops = (<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>/*\\n     * _tops : 存放所有id,按照回答正确数倒序排列\\n     * idmap : 一个hash map结构，key为id，value为名字与回答正确数\\n     * n : 前n个，在toJSON调用\\n     */</span>\\n    <span class=hljs-keyword>var</span> _tops = [],idmap={},n=<span class=hljs-number>10</span>;\\n    <span class=hljs-keyword>return</span> {\\n        <span class=hljs-attr>set</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id,name,v</span>) </span>{\\n            <span class=hljs-keyword>if</span>(<span class=hljs-keyword>this</span>.isExists(id))<span class=hljs-comment>//如果id已经存在则删除，防止出现重复id</span>\\n                <span class=hljs-keyword>this</span>.remove(id);\\n            <span class=hljs-comment>// 找到按照v从大到小所对应的位置</span>\\n            <span class=hljs-keyword>var</span> i = _tops.findIndex(<span class=hljs-function><span class=hljs-params>x</span>=></span>{<span class=hljs-keyword>return</span> idmap[x].v&lt;v;});\\n            i= i===<span class=hljs-number>-1</span> ? _tops.length : i;\\n            <span class=hljs-comment>// id在i+1位置插入至_tops</span>\\n            _tops.splice(i,<span class=hljs-number>0</span>,id);\\n            idmap[id] = {<span class=hljs-attr>name</span>:name,<span class=hljs-attr>v</span>:v};\\n        },\\n        <span class=hljs-attr>isExists</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>return</span> idmap[id]!=<span class=hljs-literal>null</span>;\\n        },\\n        <span class=hljs-attr>remove</span> : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>var</span> i = _tops.indexOf(id);\\n            <span class=hljs-keyword>if</span>(i!==<span class=hljs-number>-1</span>) {\\n                _tops.splice(i, <span class=hljs-number>1</span>);\\n                <span class=hljs-keyword>delete</span> idmap[id];\\n                <span class=hljs-keyword>return</span> <span class=hljs-literal>true</span>;\\n            }\\n            <span class=hljs-keyword>return</span> <span class=hljs-literal>false</span>;\\n        },\\n        <span class=hljs-attr>get</span>:<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\\n            <span class=hljs-keyword>return</span> idmap[id];\\n        },\\n        <span class=hljs-attr>toJSON</span>:<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\\n            <span class=hljs-comment>// JSON.stringify方法会隐式调用该方法        </span>\\n            <span class=hljs-keyword>var</span> arr = [];\\n            _tops.every(<span class=hljs-function>(<span class=hljs-params>x,i</span>)=></span>{\\n                <span class=hljs-keyword>if</span>(i>=n) <span class=hljs-keyword>return</span> <span class=hljs-literal>false</span>;\\n                arr.push({<span class=hljs-attr>id</span>:x,<span class=hljs-attr>v</span>:idmap[x].v,<span class=hljs-attr>name</span>:idmap[x].name});\\n                <span class=hljs-keyword>return</span> <span class=hljs-literal>true</span>;\\n            });\\n            <span class=hljs-keyword>return</span> arr;\\n        }\\n    }\\n}());</code></pre><h2 id=关于bootstrap栅格><a href=#%E5%85%B3%E4%BA%8Ebootstrap%E6%A0%85%E6%A0%BC aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于<code>Bootstrap</code>栅格</h2><pre><code class=\\\"hljs language-css\\\"data-query={} data-lang=css><span class=hljs-selector-class>.container</span>{\\n    <span class=hljs-attribute>margin-right</span>: auto;\\n    <span class=hljs-attribute>margin-left</span>: auto;\\n    //防止最外层的.row元素左右扩展15px\\n    <span class=hljs-attribute>padding-left</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>padding-right</span>: <span class=hljs-number>15px</span>;\\n}\\n\\n<span class=hljs-selector-class>.col-3</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>30%</span>;\\n}\\n<span class=hljs-selector-class>.col-4</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>40%</span>;\\n}\\n<span class=hljs-selector-class>.col-9</span>{\\n    <span class=hljs-attribute>width</span>: <span class=hljs-number>90%</span>;\\n}\\n\\n/.../\\n\\n<span class=hljs-selector-class>.row</span>{\\n    <span class=hljs-comment>/* 向外左右延伸15px */</span>\\n    <span class=hljs-attribute>margin-right</span>: -<span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>margin-left</span>: -<span class=hljs-number>15px</span>;\\n}\\n<span class=hljs-comment>/* 防止子元素为float,父元素的高度为0 */</span>\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:before</span>,\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:after</span> {\\n    <span class=hljs-attribute>content</span>: <span class=hljs-string>\\\" \\\"</span>;\\n    <span class=hljs-attribute>display</span>: table;\\n}\\n<span class=hljs-selector-class>.row</span><span class=hljs-selector-pseudo>:after</span> {\\n    <span class=hljs-attribute>clear</span>: both;\\n}\\n\\n<span class=hljs-selector-class>.col-1</span>, <span class=hljs-selector-class>.col-2</span>, <span class=hljs-selector-class>.col-3</span>, <span class=hljs-selector-class>.col-4</span>, <span class=hljs-selector-class>.col-5</span>, <span class=hljs-selector-class>.col-6</span>, <span class=hljs-selector-class>.col-7</span>, <span class=hljs-selector-class>.col-8</span>, <span class=hljs-selector-class>.col-9</span>{\\n    <span class=hljs-attribute>padding-left</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>padding-right</span>: <span class=hljs-number>15px</span>;\\n    <span class=hljs-attribute>float</span>:left;\\n}</code></pre><p>HTML结构</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>main</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'container'</span>></span>\\n    <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'row'</span>></span>\\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-8'</span>></span>\\n            <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'row'</span>></span>\\n                <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-6'</span>></span>\\n                    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>></span>col-6<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>></span>\\n                <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n                <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-4'</span>></span>\\n                    <span class=hljs-tag>&lt;<span class=hljs-name>div</span>></span>col-4<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n                <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n            <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>'col-2'</span>></span>\\n            <span class=hljs-tag>&lt;<span class=hljs-name>div</span>></span>col-2<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n        <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span>\\n<span class=hljs-tag>&lt;/<span class=hljs-name>main</span>></span></code></pre><h2 id=关于一栏（多栏）宽度固定，一栏自适应><a href=#%E5%85%B3%E4%BA%8E%E4%B8%80%E6%A0%8F%EF%BC%88%E5%A4%9A%E6%A0%8F%EF%BC%89%E5%AE%BD%E5%BA%A6%E5%9B%BA%E5%AE%9A%EF%BC%8C%E4%B8%80%E6%A0%8F%E8%87%AA%E9%80%82%E5%BA%94 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>关于一栏（多栏）宽度固定，一栏自适应</h2><ul><li><a href=/htm/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.html>圣杯布局</a></li><li><a href=/htm/%E5%8F%8C%E9%A3%9E%E7%BF%BC.html>双飞翼</a></li></ul><h1 id=感受><a href=#%E6%84%9F%E5%8F%97 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>感受</h1><p>...做单页应用真的需要挺大的心脏，而且需要较好的整体的架构，好在<code>socket.io</code>对websocket封装的不错，变成了面向消息的方式，代码结构相对更加清晰了些。 ...不敢想象用Java做这种实时单页应用后端会有多么的「拗口」 最后推荐一个实时的更加优秀的游戏，<a href=http://slither.io/>slithe</a></p>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/you-paint-i-guess-by-socketio.md\n// module id = 1252\n// module chunks = 14"],"sourceRoot":""}