webpackJsonp([62,113],{1202:function(e,s){e.exports={content:'<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><iframe frameborder=no border=0 marginwidth=0 marginheight=0 width=330 height=86 src="//music.163.com/outchain/player?type=2&#x26id=202373&amp;auto=1&#x26height=66"></iframe><p>就在昨天，有位可爱的学妹说想订阅我的Blog，于是我放弃一天复习tcp的时间，捣鼓出文章更新，发送邮件通知的解决方案。</p><p>借用了部分Git Hook(钩子)的约定，如：采用脚本文件的形式(用户可以选择自己的脚本语言，<code>python/nodejs/ruby/bash...</code>)，<code>pre-action/post-action</code>的命名方式</p><p><code>moka</code> ≧1.2.3 支持hook，<code>moka init</code>后产生的文件夹目录如下</p><pre><code class="hljs language-sh"data-query={} data-lang=sh>moka-blog/\n├── moka.config.json <span class=hljs-comment># moka配置，包括全局配置，如deploy，bak信息，主题选择</span>\n├── package.json     <span class=hljs-comment># 可以无视</span>\n├── <span class=hljs-built_in>source</span>/          <span class=hljs-comment># moka g 会将该目录下非`_articles`文件夹放入static</span>\n│   ├── _articles/   <span class=hljs-comment># moka g 将`_articles`下的markdown文件解析到static中</span>\n│   └── ...\n├── static/          <span class=hljs-comment># moka g 产生的最终发布的目录，deploy便是发布该目录</span>\n│   └── ...   \n├── template/\n│   └── article.md   <span class=hljs-comment># moka n 命令产生新文章的模板</span>\n├── hooks/           <span class=hljs-comment># 钩子, 注意各个钩子的cwd还是`moka-blog`, 如果pre钩子exit code!=0，将会终止process</span>\n│   ├── pre-generate.sample\n│   ├── post-generate.sample\n│   ├── pre-bak.sample\n│   ├── post-bak.sample\n│   ├── pre-deploy.sample   <span class=hljs-comment># deploy之前调用，必须executable，去除`.sample`后缀</span>\n│   └── post-deploy.sample  <span class=hljs-comment># deploy之后调用</span>\n└── themes/          <span class=hljs-comment># moka g 将配置中选中对应的主题 `themeBuild`目录 拷贝到static</span>\n     └── moka/       <span class=hljs-comment># 主题文件夹，其中包含theme.config.json, 根据主题要求自行配置</span></code></pre><p><strong>注意！ 必须去掉样例脚本的.smaple，并且保证脚本是可执行的文件，才能生效。</strong></p><p><strong>所有的pre Hook必须保证进程结束的<code>exit code==0</code>，也就是正常退出，不然后续的操作将会因此终断。</strong></p><h2 id=文章更新，发送邮件的实现><a href=#%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0 aria-hidden=true><span class="icon icon-link"></span></a>文章更新，发送邮件的实现</h2><p>文章更新，发送邮件一共涉及到3个hook，分别是<code>pre-generate->post-generate->post-deploy</code></p><p>顾名思义，<code>pre-generate</code>是在产生<code>static/</code>文件夹，静态资源之前被调用；<code>post-generate</code>则是在产生完成之后被调用；<code>post-deploy</code> 在部署到远程服务器（一般为github）之后触发。</p><p>那么，分别在这三个时刻做什么工作才能完成文章更新发送邮件的功能呢？</p><ol><li><code>pre-generate</code>: 将这时所有文章目录保存在一个临时文件<code>tmp_pre_generate</code>中</li><li><code>generate</code>: <code>static/</code>文件夹更新</li><li><code>post-generate</code>: 将这时所有文章目录读取，与文件<code>tmp_pre_generate</code>对比，得到新添加的文章，并保存在临时文件<code>tmp_post_generate</code>中</li><li><code>deploy</code>: 部署<code>static/</code>文件夹内容至远端服务器</li><li><code>post-deploy</code>: 判断是否存在<code>tmp_post_generate</code>，读取<code>tmp_post_generate</code>，并利用<a href=https://github.com/moyuyc/ftp-smtp/><code>smtp</code></a>协议发送邮件（利用递归，同步发送邮件操作）, 并且将最新的文章时间与title保存至<code>tmp_post_deploy</code>，下次读取<code>tmp_post_deploy</code>，确保时间晚于上次最新的文章。</li></ol><pre><code class="hljs language-javascript"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>sync</span>(<span class=hljs-params>callables</span>) </span>{\n    <span class=hljs-keyword>if</span>(callables.length==<span class=hljs-number>0</span>) {\n        <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.resolve();\n    }\n    <span class=hljs-keyword>return</span> callables.shift()()\n        .then(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>x</span>) </span>{\n            <span class=hljs-keyword>return</span> sync(callables);\n        })\n}</code></pre><h2 id=小结><a href=#%E5%B0%8F%E7%BB%93 aria-hidden=true><span class="icon icon-link"></span></a>小结</h2><ol><li>在<code>osx shell</code>环境中，<code>#!/usr/bin/env node</code>该脚本头可以正常运行，但在<code>osx moka-desktop</code>中不能生效，改成<code>#!/usr/local/bin/node</code>即可</li><li>配合hooks，同学们还可以完成更多有趣的功能。</li></ol>',extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=moka-hooks.js.map