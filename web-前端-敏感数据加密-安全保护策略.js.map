{"version":3,"sources":["webpack:///web-前端-敏感数据加密-安全保护策略.js","webpack:///./source/_articles/web-前端-敏感数据加密-安全保护策略.md"],"names":["webpackJsonp","1247","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,uhFACAC,OACAC,oBACAC","file":"web-前端-敏感数据加密-安全保护策略.js","sourcesContent":["webpackJsonp([18,113],{\n\n/***/ 1247:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p>最近在公司搭建的对外的服务上，被安全部门检测出安全漏洞。主要分为两个方面的漏洞：</p><ol><li>用户的邮箱等信息在接口中直接明文展示出来，甚至有些 密码 摘要也暴露出来了</li><li>附件上传 没有限制，同时对于 HTML 文件运行直接同域 <code>text/html</code> 访问</li></ol><p>下面介绍我是如何解决上面漏洞的</p><h2 id=解决手段><a href=#%E8%A7%A3%E5%86%B3%E6%89%8B%E6%AE%B5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>解决手段</h2><h3 id=数据明文暴露><a href=#%E6%95%B0%E6%8D%AE%E6%98%8E%E6%96%87%E6%9A%B4%E9%9C%B2 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>数据明文暴露</h3><p>对于数据明文暴露漏洞，现象如：对于 <code>/user?id=1</code> 接口，返回数据</p><pre><code class=\\\"hljs language-js\\\"data-query={} data-lang=js>{\\n  <span class=hljs-attr>status</span>: <span class=hljs-string>'ok'</span>,\\n  <span class=hljs-attr>data</span>: {\\n    <span class=hljs-attr>user</span>: {\\n      <span class=hljs-attr>name</span>: <span class=hljs-string>'xxx'</span>,\\n      <span class=hljs-comment>// 邮箱属于个人敏感数据</span>\\n      email: <span class=hljs-string>'xxxx@xxx.com'</span>,\\n    }\\n  }\\n}</code></pre><p>对于 邮箱 等用户个人数据，需要隐藏，所以处理方式有： 1. 将邮箱脱敏处理，如 <code>imcuttle@abc.com</code> 脱敏为 <code>im***@abc.com</code><br>但这种方式，可能对于有些需要明文展示用户信息的地方不友好 2. 对请求参数或者响应数据 做加密处理<br>如对于某请求响应数据如图 <img src=https://i.loli.net/2020/06/26/3CT9fLDYgJka4Xc.png alt=image.png> 而真真数据就藏在这串数据中，经过解密可以看到真正的数据，在这里我不深入介绍我是如何实现的，防止破解</p><p>除此之外，我们看看<a href=https://github.com/darknessomi/musicbox/wiki/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%96%B0%E7%99%BB%E5%BD%95API%E5%88%86%E6%9E%90>网易云音乐的 API</a> 是如何处理的： <img src=https://i.loli.net/2020/06/26/3uUlrFn5zYRJQSy.png alt=image.png> 网易云的请求参数进行了加密处理，大概思路如下： <img src=https://i.loli.net/2020/06/26/6bUC1hmyVYp9R24.png alt=image.png></p><p>由于 对称加密算法对加密内容有最大字节限制，所以只能用于加密固定大小的密钥；而 非对称加密算法则没有该限制，所以用于加密正文内容。</p><p>通过 网易云音乐的例子，我们可以知道 <strong>前端是不可能杜绝黑客获取明文内容的</strong>，破解对于黑客来说只不过对 ROI 的均衡考量。</p><p>同时，我们还是可以通过如下手段加大破解难度：</p><ul><li>debugger 拦截，打开控制台的时候进行 debugger 拦截</li><li>console 覆盖，不能正常输出</li><li>代码混淆（deadcode 添加，常量编码...）</li></ul><p>详见：<a href=https://github.com/javascript-obfuscator/javascript-obfuscator>javascript-obfuscator</a></p><h3 id=任意文件上传漏洞><a href=#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>任意文件上传漏洞</h3><p>这个问题，我们可以简单的设置服务端的运行上传文件白名单，如只允许上传图片；但这样可能导致体验降级。</p><p>所以我的处理方式是，对于 HTML 资源，（同域）服务端不进行 Server，而是纯文本展示。</p>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// web-前端-敏感数据加密-安全保护策略.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p>最近在公司搭建的对外的服务上，被安全部门检测出安全漏洞。主要分为两个方面的漏洞：</p><ol><li>用户的邮箱等信息在接口中直接明文展示出来，甚至有些 密码 摘要也暴露出来了</li><li>附件上传 没有限制，同时对于 HTML 文件运行直接同域 <code>text/html</code> 访问</li></ol><p>下面介绍我是如何解决上面漏洞的</p><h2 id=解决手段><a href=#%E8%A7%A3%E5%86%B3%E6%89%8B%E6%AE%B5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>解决手段</h2><h3 id=数据明文暴露><a href=#%E6%95%B0%E6%8D%AE%E6%98%8E%E6%96%87%E6%9A%B4%E9%9C%B2 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>数据明文暴露</h3><p>对于数据明文暴露漏洞，现象如：对于 <code>/user?id=1</code> 接口，返回数据</p><pre><code class=\\\"hljs language-js\\\"data-query={} data-lang=js>{\\n  <span class=hljs-attr>status</span>: <span class=hljs-string>'ok'</span>,\\n  <span class=hljs-attr>data</span>: {\\n    <span class=hljs-attr>user</span>: {\\n      <span class=hljs-attr>name</span>: <span class=hljs-string>'xxx'</span>,\\n      <span class=hljs-comment>// 邮箱属于个人敏感数据</span>\\n      email: <span class=hljs-string>'xxxx@xxx.com'</span>,\\n    }\\n  }\\n}</code></pre><p>对于 邮箱 等用户个人数据，需要隐藏，所以处理方式有： 1. 将邮箱脱敏处理，如 <code>imcuttle@abc.com</code> 脱敏为 <code>im***@abc.com</code><br>但这种方式，可能对于有些需要明文展示用户信息的地方不友好 2. 对请求参数或者响应数据 做加密处理<br>如对于某请求响应数据如图 <img src=https://i.loli.net/2020/06/26/3CT9fLDYgJka4Xc.png alt=image.png> 而真真数据就藏在这串数据中，经过解密可以看到真正的数据，在这里我不深入介绍我是如何实现的，防止破解</p><p>除此之外，我们看看<a href=https://github.com/darknessomi/musicbox/wiki/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%96%B0%E7%99%BB%E5%BD%95API%E5%88%86%E6%9E%90>网易云音乐的 API</a> 是如何处理的： <img src=https://i.loli.net/2020/06/26/3uUlrFn5zYRJQSy.png alt=image.png> 网易云的请求参数进行了加密处理，大概思路如下： <img src=https://i.loli.net/2020/06/26/6bUC1hmyVYp9R24.png alt=image.png></p><p>由于 对称加密算法对加密内容有最大字节限制，所以只能用于加密固定大小的密钥；而 非对称加密算法则没有该限制，所以用于加密正文内容。</p><p>通过 网易云音乐的例子，我们可以知道 <strong>前端是不可能杜绝黑客获取明文内容的</strong>，破解对于黑客来说只不过对 ROI 的均衡考量。</p><p>同时，我们还是可以通过如下手段加大破解难度：</p><ul><li>debugger 拦截，打开控制台的时候进行 debugger 拦截</li><li>console 覆盖，不能正常输出</li><li>代码混淆（deadcode 添加，常量编码...）</li></ul><p>详见：<a href=https://github.com/javascript-obfuscator/javascript-obfuscator>javascript-obfuscator</a></p><h3 id=任意文件上传漏洞><a href=#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>任意文件上传漏洞</h3><p>这个问题，我们可以简单的设置服务端的运行上传文件白名单，如只允许上传图片；但这样可能导致体验降级。</p><p>所以我的处理方式是，对于 HTML 资源，（同域）服务端不进行 Server，而是纯文本展示。</p>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/web-前端-敏感数据加密-安全保护策略.md\n// module id = 1247\n// module chunks = 18"],"sourceRoot":""}