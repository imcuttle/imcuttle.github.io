webpackJsonp([33,113],{1232:function(a,e){a.exports={content:'<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=引子><a href=#%E5%BC%95%E5%AD%90 aria-hidden=true><span class="icon icon-link"></span></a>引子</h1><p>基本上 GitHub 上优秀的javascript项目上面有很多零零碎碎的文件。如图，以koa为例 <img src=false alt width=992 height=685 data-src=https://i.loli.net/2018/01/06/5a5063addc5f0.jpg></p><p>下文将一一说明这些个“奇怪”的文件是干什么的...</p><h1 id=持续集成篇><a href=#%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%AF%87 aria-hidden=true><span class="icon icon-link"></span></a>持续集成篇</h1><p>持续集成（CI, Continuous integration），是将我们的代码规范化流程化。<br>相比于系统集成，CI希望每一次微小的代码修改，都会进行一次集成（可能包括构建，测试，发布等阶段），这样极大地加强了项目工程的可控性。</p><p>从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中<sup>[1]</sup>。那么 GitHub 中对于CI的支持如何呢？GitHub 可以采用任意第三方的 CI 服务，下面主要介绍其中的一种：travis-ci</p><h2 id=travis-ci-travisyml><a href=#travis-ci-travisyml aria-hidden=true><span class="icon icon-link"></span></a>travis-ci (<code>.travis.yml</code>)</h2><p>官网：<a href=https://travis-ci.org/>https://travis-ci.org/</a><br>该平台也是本人经常使用的 CI 平台，需要在项目跟目录下添加文件 <code>.travis.yml</code>，如：</p><pre><code class="hljs language-yaml"data-query={} data-lang=yaml><span class=hljs-attr>language:</span> <span class=hljs-string>node_js</span>\n<span class=hljs-attr>node_js:</span> <span class=hljs-string>stable</span>\n\n<span class=hljs-attr>install:</span>\n<span class=hljs-bullet>  -</span> <span class=hljs-string>npm</span> <span class=hljs-string>install</span>\n<span class=hljs-attr>script:</span>\n<span class=hljs-bullet>  -</span> <span class=hljs-string>npm</span> <span class=hljs-string>test</span></code></pre><p>便是一个简单的配置文件参考，travis-ci 有下面几个生命周期，顺序如下：<sup>[2]</sup> 1. <code>before_install</code> 2. <code>install</code> 3. <code>before_script</code> 4. <code>script</code> 5. <code>after_success</code> 或者 <code>after_failure</code> 6. <code>before_deploy</code> 7. <code>deploy</code> 8. <code>after_deploy</code> 9. <code>after_script</code></p><p>同时 travis-ci 还提供了一大批的 Provider，以方便我们来书写一些常用的部署动作<sup>[3]</sup></p><p>配置好了之后，同时在travis-ci认证提供之后，并且给对应的repo赋予权限，那么我们的每次commit都会触发按照上面的执行过程，在travis-ci提供的集群上执行。</p><h2 id=其他-ci-平台><a href=#%E5%85%B6%E4%BB%96-ci-%E5%B9%B3%E5%8F%B0 aria-hidden=true><span class="icon icon-link"></span></a>其他 CI 平台</h2><p>除了 travis-ci，市面上还有其他很多 CI 平台，如：react 项目中使用的 <a href=https://www.appveyor.com/>appveyor</a> 和 <a href=https://circleci.com/>CircleCi</a> 等等。至于这些平台的对比则不是该文章的讨论范畴了。</p><h1 id=代码规范篇><a href=#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%AF%87 aria-hidden=true><span class="icon icon-link"></span></a>代码规范篇</h1><p>代码规范又是另一个话题了，但是目的都是为了提高代码的可控性，减少 bug 率。</p><h2 id=eslint-eslintrc-eslintignore><a href=#eslint-eslintrc-eslintignore aria-hidden=true><span class="icon icon-link"></span></a>ESLint (<code>.eslintrc.*</code>, <code>.eslintignore</code>)</h2><p>利用 ESLint 提供的若干规则，造出一份适合于自己或团队的代码规范配置，同时 .eslintignore 用 glob file 规则去忽略文件</p><h2 id=prettier-prettierrc-prettierignore><a href=#prettier-prettierrc-prettierignore aria-hidden=true><span class="icon icon-link"></span></a>Prettier (<code>.prettierrc</code>, <code>.prettierignore</code>)</h2><p><a href=https://github.com/prettier/prettier>Prettier</a> 只是用来纯粹美化代码。</p><h1 id=工具篇><a href=#%E5%B7%A5%E5%85%B7%E7%AF%87 aria-hidden=true><span class="icon icon-link"></span></a>工具篇</h1><h2 id=codecov-codecovyml><a href=#codecov-codecovyml aria-hidden=true><span class="icon icon-link"></span></a>CodeCov (<code>.codecov.yml</code>)</h2><p>一个好的工程，离不开一系列的测试，CodeCov 则是用来报告测试中代码覆盖率的工具</p><h2 id=babel-babelrc-babelignore><a href=#babel-babelrc-babelignore aria-hidden=true><span class="icon icon-link"></span></a>Babel (<code>.babelrc</code>, <code>.babelignore</code>)</h2><h2 id=npm-npmrc><a href=#npm-npmrc aria-hidden=true><span class="icon icon-link"></span></a>NPM (<code>.npmrc</code>)</h2><p>这俩兄弟不多做解释了，前端都知道~</p><h1 id=其他><a href=#%E5%85%B6%E4%BB%96 aria-hidden=true><span class="icon icon-link"></span></a>其他</h1><h2 id=editorconfig><a href=#editorconfig aria-hidden=true><span class="icon icon-link"></span></a><code>.editorconfig</code></h2><p><a href=http://editorconfig.org/>http://editorconfig.org/</a><br>我们在不同编辑器，不同系统平台编写同一项目代码时，常常会遇到代码格式不统一的问题，该文件则是用来抹去这种差异！</p><h1 id=结><a href=#%E7%BB%93 aria-hidden=true><span class="icon icon-link"></span></a>结</h1><p>以上便是比较常用的一些javascript项目的配置文件说明，后续还会不断添加，欢迎大家伙指正添加。</p><h1 id=参考><a href=#%E5%8F%82%E8%80%83 aria-hidden=true><span class="icon icon-link"></span></a>参考</h1><ul><li>[1] <a href=https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/>用 GitLab CI 进行持续集成</a></li><li>[2] <a href=https://docs.travis-ci.com/user/customizing-the-build/>travis-ci: Customizing the Build</a></li><li>[3] <a href=https://docs.travis-ci.com/user/deployment/>travis-ci: Deployment</a></li></ul>',extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=some-configuration-files-of-nodejs-project.js.map