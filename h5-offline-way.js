webpackJsonp([61,90],{1002:function(s,n){s.exports={content:'<p>「离线存储」：顾名思义，在有线的环境下先缓存数据（包括静态资源，动态资源），从而在离线环境下，依旧可以正常使用应用（单页应用）</p>\n<!--more-->\n<h2 id="静态资源存储applicationcache"><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%AD%98%E5%82%A8applicationcache" aria-hidden="true"><span class="icon icon-link"></span></a>静态资源存储(ApplicationCache)</h2>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache">applicationCache</a> 是一套h5静态资源缓存方案.\n利用该技术可以实现配置静态资源/转发请求，加快应用加载速度，降低服务器负载.</p>\n<h3 id="基本用法"><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>基本用法</h3>\n<ol>\n<li>引入manifest配置文件</li>\n</ol>\n<pre><code class="hljs language-html" data-query="{}" data-lang="html"><span class="hljs-meta">&#x3C;!doctype html></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">"cache.manifest"</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">head</span>></span>\n        ...\n    <span class="hljs-tag">&#x3C;/<span class="hljs-name">head</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">body</span>></span>\n        ...\n    <span class="hljs-tag">&#x3C;/<span class="hljs-name">body</span>></span>\n<span class="hljs-tag">&#x3C;/<span class="hljs-name">html</span>></span></code></pre>\n<ol start="2">\n<li>配置manifest文件</li>\n</ol>\n<pre><code class="hljs language-sh" data-query="{}" data-lang="sh">CACHE MANIFEST\n<span class="hljs-comment"># 修改配置后，附加上下面一段js代码，才能更新缓存</span>\n<span class="hljs-comment"># 2016972143</span>\n<span class="hljs-comment"># 注释：需要缓存的文件，无论在线与否，均从缓存里读取</span>\nCACHE:\n/dist/0.eda078350ef514670764.bundle.js\n/dist/common.bundle.js?v=2016972143\n/dist/df9f379beae2559b27044dcfdc0653ab.png?v=2016972143\n/dist/home.bundle.js?v=2016972143\n/dist/home.css?v=2016972143\nuncached.js?v=2016972143\n\n<span class="hljs-comment">#cached.css</span>\n\n<span class="hljs-comment"># 注释：不缓存的文件，无论缓存中存在与否，均从新获取</span>\nNETWORK:\n*\n<span class="hljs-comment">#uncached.js</span>\n<span class="hljs-comment">#uncached.css</span>\n\n<span class="hljs-comment"># 注释：获取不到资源时的备选路径，如index.html访问失败，则返回404页面</span>\nFALLBACK:\n<span class="hljs-comment">#/v1/team/dirlists mock/team_dirlists.json</span>\n<span class="hljs-comment">#/v1/team/app_filelist?isAdd=0&#x26;source=team&#x26;page=1&#x26;pageSize=10&#x26;sort=ftime&#x26;from=hiwebapp&#x26;fid=t293 mock/team_app_filelist.json</span>\n<span class="hljs-comment">#index.html 404.html</span></code></pre>\n<ol start="3">\n<li>书写更新缓冲js</li>\n</ol>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-comment">// 每次打开页面执行该代码段，更新缓存</span>\n<span class="hljs-comment">// !!! 注意：更新缓存后不会立即生效，需要重新加载页面</span>\n(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">var</span> cache = <span class="hljs-built_in">window</span>.applicationCache;\n\n    cache.addEventListener(<span class="hljs-string">\'updateready\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>{\n        <span class="hljs-keyword">if</span> (cache.status == cache.UPDATEREADY) {\n            <span class="hljs-comment">// Browser downloaded a new app cache.</span>\n            <span class="hljs-comment">// if (confirm(\'A new version of this site is available. Load it?\')) {</span>\n                cache.swapCache();\n                <span class="hljs-built_in">window</span>.location.reload();\n            <span class="hljs-comment">// }</span>\n        } <span class="hljs-keyword">else</span> {\n            <span class="hljs-comment">// Manifest didn\'t changed. Nothing new to server.</span>\n        }\n    }, <span class="hljs-literal">false</span>);\n\n    cache.update()\n\n}())</code></pre>\n<ol start="4">\n<li>\n<p>服务器配置</p>\n<ol>\n<li>\n<p>配置manifest文件，响应 <code>Content-Type: text/cache-manifest</code> <code>Cache-Control: max-age=0</code></p>\n</li>\n<li>\n<p>部署线上代码时更新manifest版本号与配置</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>按照以上配置，这样就能实现静态资源缓存\n<img src="http://obu9je6ng.bkt.clouddn.com/FvEkGfGFiqRIPaoqrCm-dvTET2Xp?imageslim" alt="ClipboardImage" width="674" height="325" />\n如上图，<code>from cache</code>的加载时间相比其他网络请求快得多！<br>\n其中的<code>fetch/ajax</code>请求不能够通过静态资源存储，因为响应结果是可能会变的.</p>\n<p>那么对于异步ajax请求（动态资源）要通过什么方法才能存储起来呢？实现真正意义的离线存储.</p>\n<h2 id="动态资源存储websqlindexeddb"><a href="#%E5%8A%A8%E6%80%81%E8%B5%84%E6%BA%90%E5%AD%98%E5%82%A8websqlindexeddb" aria-hidden="true"><span class="icon icon-link"></span></a>动态资源存储(WebSQL/IndexedDB)</h2>\n<p>使用前端数据库可以较为灵活的控制动态资源存储，在这里我使用了indexedDB, 为什么不用WebSQL？\n1. 之前做在线聊天应用时，使用过WebSQL存储聊天记录\n2. WebSQL已经被弃用\n3. WebSQL是传统的关系数据库，indexedDB是主流的NoSQL DB</p>\n<h3 id="基本用法-1"><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-1" aria-hidden="true"><span class="icon icon-link"></span></a>基本用法</h3>\n<ol>\n<li>创建一个通用的数据库访问接口</li>\n</ol>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-keyword">var</span> indexedDB = <span class="hljs-built_in">window</span>.indexedDB || <span class="hljs-built_in">window</span>.msIndexedDB || <span class="hljs-built_in">window</span>.mozIndexedDB || <span class="hljs-built_in">window</span>.webkitIndexedDB;\n\n<span class="hljs-comment">// memCache 内存缓冲，避免频繁的读写数据库</span>\n<span class="hljs-keyword">var</span> req, db, memCache = {};\n<span class="hljs-keyword">if</span>(indexedDB) {\n    <span class="hljs-comment">// version：2</span>\n    req = indexedDB.open(<span class="hljs-string">\'ajax_cache\'</span>, <span class="hljs-number">2</span>);\n    <span class="hljs-comment">// 保证caches成功创建</span>\n    req.onsuccess = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{\n        db = e.target.result;\n        <span class="hljs-keyword">if</span>(!db.objectStoreNames.contains(<span class="hljs-string">\'caches\'</span>)){\n            db.createObjectStore(<span class="hljs-string">\'caches\'</span>, {<span class="hljs-attr">keyPath</span>: <span class="hljs-string">"id"</span>});\n        }\n    }\n    <span class="hljs-comment">// 数据库版本改变触发</span>\n    req.onupgradeneeded=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{\n        <span class="hljs-keyword">var</span> db=e.target.result;\n        <span class="hljs-keyword">if</span>(!db.objectStoreNames.contains(<span class="hljs-string">\'caches\'</span>)){\n            db.createObjectStore(<span class="hljs-string">\'caches\'</span>, {<span class="hljs-attr">keyPath</span>: <span class="hljs-string">"id"</span>});\n        }\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'DB version changed to \'</span> + db.version);\n    };\n    req.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{\n        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">\'indexedDB open failed. \'</span>, err)\n    }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">isSupported</span>: !!indexedDB,\n    <span class="hljs-attr">set</span>: <span class="hljs-function">(<span class="hljs-params">id, data</span>) =></span> {\n        <span class="hljs-keyword">var</span> entity = {\n            <span class="hljs-attr">id</span>: id,\n            <span class="hljs-attr">data</span>: data\n        }\n        <span class="hljs-keyword">var</span> transaction = db.transaction(<span class="hljs-string">\'caches\'</span>, <span class="hljs-string">\'readwrite\'</span>);\n        <span class="hljs-keyword">var</span> store = transaction.objectStore(<span class="hljs-string">\'caches\'</span>);\n        <span class="hljs-keyword">var</span> req = store.put(entity);\n        req.onerror = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {\n            <span class="hljs-built_in">console</span>.error(<span class="hljs-string">\'put data failed. \'</span>, entity)\n        }\n        req.onsuccess = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {\n            memCache[id] = data\n            <span class="hljs-built_in">console</span>.info(<span class="hljs-string">\'put data successed. \'</span>, entity)\n        }\n    },\n    <span class="hljs-attr">get</span>: <span class="hljs-function">(<span class="hljs-params">id</span>) =></span> {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =></span> {\n            <span class="hljs-keyword">if</span>(memCache[id]) {\n                resolve(memCache[id]);\n                <span class="hljs-keyword">return</span>;\n            }\n\n            <span class="hljs-keyword">var</span> transaction = db.transaction(<span class="hljs-string">\'caches\'</span>, <span class="hljs-string">\'readwrite\'</span>);\n            <span class="hljs-keyword">var</span> store = transaction.objectStore(<span class="hljs-string">\'caches\'</span>);\n            <span class="hljs-keyword">var</span> req = store.get(id);\n            req.onerror = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {\n                <span class="hljs-built_in">console</span>.error(<span class="hljs-string">\'get data failed. \'</span>, id)\n                resolve()\n            }\n            req.onsuccess = <span class="hljs-function">(<span class="hljs-params">e</span>) =></span> {\n                <span class="hljs-keyword">var</span> rlt = e.target.result;\n                <span class="hljs-built_in">console</span>.info(<span class="hljs-string">\'get data successed. \'</span>, id, rlt)\n                resolve(rlt &#x26;&#x26; rlt.data)\n            }\n        })\n    }\n}</code></pre>\n<ol start="2">\n<li>重写fetch/ajax方法</li>\n</ol>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-comment">/* reset fetch function for offline be compatible*/</span>\n<span class="hljs-keyword">var</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'isomorphic-fetch\'</span>)\n<span class="hljs-keyword">import</span> {parse} <span class="hljs-keyword">from</span> <span class="hljs-string">\'url\'</span>\n\n<span class="hljs-keyword">var</span> __fetch = fetch;\nfetch = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">url</span>) </span>{\n    <span class="hljs-keyword">var</span> rlt = parse(url, <span class="hljs-literal">true</span>);\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateJson</span>(<span class="hljs-params">json</span>) </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-attr">json</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n                <span class="hljs-keyword">return</span> json\n            }\n        }\n    }\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateErrorJson</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> generateJson({\n            <span class="hljs-attr">errno</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">errmsg</span>: <span class="hljs-string">\'你正处于离线状态\'</span>,\n            <span class="hljs-attr">result</span>: {\n                <span class="hljs-attr">files</span>: []\n            }\n        })\n    }\n    <span class="hljs-keyword">var</span> query = rlt.query;\n    <span class="hljs-comment">// 去掉时间戳与重复的from参数</span>\n    <span class="hljs-keyword">delete</span> query.t;\n    <span class="hljs-keyword">delete</span> query.from;\n    <span class="hljs-keyword">var</span> id = rlt.pathname\n    <span class="hljs-keyword">var</span> key = MyUtils.jsonToUrl(query)\n    <span class="hljs-keyword">if</span>(MyUtils.isOffline()) { <span class="hljs-comment">// 离线</span>\n        <span class="hljs-keyword">if</span>(!id) {\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =></span> {\n                resolve(generateErrorJson())\n            })\n        } <span class="hljs-keyword">else</span> {\n            <span class="hljs-keyword">if</span>(DB.isSupported) {\n                <span class="hljs-keyword">return</span> DB.get(id).then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> {\n                    <span class="hljs-keyword">return</span> (!json || !json[key])\n                        ? generateErrorJson()\n                        : generateJson(json[key])\n                })\n            } <span class="hljs-keyword">else</span> {\n                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =></span> {\n                    resolve(generateErrorJson())\n                })\n            }\n        }\n    } <span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">return</span> __fetch.apply(<span class="hljs-literal">null</span>, [].slice.call(<span class="hljs-built_in">arguments</span>))\n            .then(<span class="hljs-function"><span class="hljs-params">res</span> =></span> res.json())\n            .then( <span class="hljs-function">(<span class="hljs-params">resJson</span>) =></span> {\n                <span class="hljs-keyword">if</span>(DB.isSupported) {\n                    <span class="hljs-keyword">var</span> tmp = {};\n                    tmp[key] = resJson;\n                    DB.get(id).then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> {\n                        DB.set(id, <span class="hljs-built_in">Object</span>.assign({}, json, tmp))\n                    })\n                }\n                <span class="hljs-keyword">return</span> generateJson(resJson)\n            }\n        )\n    }\n\n}</code></pre>\n<p>可以在chrome的web tool中看到indexedDB<br>\n<img src="http://obu9je6ng.bkt.clouddn.com/FmF0kN7KEA15rnXMaMMC-32EeTqg?imageslim" alt="ClipboardImage" width="473" height="431" />\n每次请求都缓存下来了</p>\n<p>在脱离网络后！依旧可以模拟异步请求！</p>\n',extra:{}}}});