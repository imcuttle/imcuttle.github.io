{"version":3,"sources":["webpack:///requestanimationframe-vs-setinterval.js","webpack:///./source/_articles/requestanimationframe-vs-setinterval.md"],"names":["webpackJsonp","1224","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,woGACAC,OACAC,oBACAC","file":"requestanimationframe-vs-setinterval.js","sourcesContent":["webpackJsonp([41,113],{\n\n/***/ 1224:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=介绍><a href=#%E4%BB%8B%E7%BB%8D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>介绍</h1><p>大家对setInterval一定不陌生，但可能不太了解requestAnimationFrame requestAnimationFrame是HTML5新添的api，两者都能产生动画效果。</p><h1 id=区别><a href=#%E5%8C%BA%E5%88%AB aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>区别</h1><p>requestAnimationFrame 参数只有一个参数，是用来循环调用的方法， setInterval 有两个参数，第一个是方法，第二个是循环调用的时间。 <strong>但是，JavaScript是单线程的，也就是同一时间只能有一句JavaScript语句执行所以，setInterval的实现是通过事件驱动完成的，当时间到了之后，setInterval加入事件队列，等待JavaScript的青睐，所以这种计时是不准确的。</strong></p><!--more--><h2 id=demo><a href=#demo aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Demo</h2><script>function progress(t){t.style.width=\\\"0%\\\",t.innerText=\\\"0%\\\",setTimeout(function(){var e=parseInt(t.style.width);t.innerText=e+\\\"%\\\",100!=e&&(t.style.width=e+1+\\\"%\\\",setTimeout(arguments.callee,15))},15)}</script><p id=progress style=width:0%;background-color:#00f;color:#fff>0</p><button onclick=progress(document.querySelector(\\\"#progress\\\"))>RUN</button><script>progress(document.querySelector(\\\"#progress\\\"));</script><pre><code data-query={} data-lang>function progress(p){\\n    p.style.width='0%';\\n    p.innerText='0%';\\n    function run(){\\n        var w = parseInt(p.style.width);\\n        p.innerText = w +'%';\\n        if(w==100) return;\\n        p.style.width = w+1+'%';\\n        requestAnimationFrame(arguments.callee)\\n    }\\n    requestAnimationFrame(run);\\n}\\n</code></pre><script>function progress2(e){e.style.width=\\\"0%\\\",e.innerText=\\\"0%\\\";var n=setInterval(function(){var t=parseInt(e.style.width);e.innerText=t+\\\"%\\\",100!=t?e.style.width=t+1+\\\"%\\\":clearInterval(n)},15)}</script><p id=progress2 style=width:0%;background-color:#00f;color:#fff>0</p><button onclick=progress2(document.querySelector(\\\"#progress2\\\"))>RUN</button><script>progress2(document.querySelector(\\\"#progress2\\\"));</script><pre><code data-query={} data-lang>function progress2(p){\\n    p.style.width='0%';\\n    p.innerText='0%';\\n    function run(){\\n        var w = parseInt(p.style.width);\\n        p.innerText = w +'%';\\n        if(w==100){\\n            clearInterval(t); return;\\n        }\\n        p.style.width = w+1+'%';\\n    }\\n    var t =setInterval(run,15);\\n}\\n</code></pre><p>可以看到，<code>requestAnimationFrame</code>代码量更少。</p><h1 id=惊天秘密><a href=#%E6%83%8A%E5%A4%A9%E7%A7%98%E5%AF%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>惊天秘密</h1><p><strong>深入理解，可以把<code>requestAnimationFrame(func)</code>等效为<code>setTimeout(func,15);</code></strong> 不信，你试下嘛。 当然，<code>requestAnimationFrame</code>在浏览器查看其它网页的一段时间后，便会自动停止动画。 在threejs中，就是用<code>requestAnimationFrame</code>来减少cpu负载的。 <strong>2016/5/15 更新</strong> <code>requestAnimationFrame</code> 中会默认传入一个相对的时间戳，<a href=https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame>详细看这里</a>； <code>setTimeout(func,15);</code>除了这种用法以外，还可以<code>setTimeout(func,15,args);</code>传入参数，当然<code>setInterval</code>也一样。</p>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// requestanimationframe-vs-setinterval.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=介绍><a href=#%E4%BB%8B%E7%BB%8D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>介绍</h1><p>大家对setInterval一定不陌生，但可能不太了解requestAnimationFrame requestAnimationFrame是HTML5新添的api，两者都能产生动画效果。</p><h1 id=区别><a href=#%E5%8C%BA%E5%88%AB aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>区别</h1><p>requestAnimationFrame 参数只有一个参数，是用来循环调用的方法， setInterval 有两个参数，第一个是方法，第二个是循环调用的时间。 <strong>但是，JavaScript是单线程的，也就是同一时间只能有一句JavaScript语句执行所以，setInterval的实现是通过事件驱动完成的，当时间到了之后，setInterval加入事件队列，等待JavaScript的青睐，所以这种计时是不准确的。</strong></p><!--more--><h2 id=demo><a href=#demo aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Demo</h2><script>function progress(t){t.style.width=\\\"0%\\\",t.innerText=\\\"0%\\\",setTimeout(function(){var e=parseInt(t.style.width);t.innerText=e+\\\"%\\\",100!=e&&(t.style.width=e+1+\\\"%\\\",setTimeout(arguments.callee,15))},15)}</script><p id=progress style=width:0%;background-color:#00f;color:#fff>0</p><button onclick=progress(document.querySelector(\\\"#progress\\\"))>RUN</button><script>progress(document.querySelector(\\\"#progress\\\"));</script><pre><code data-query={} data-lang>function progress(p){\\n    p.style.width='0%';\\n    p.innerText='0%';\\n    function run(){\\n        var w = parseInt(p.style.width);\\n        p.innerText = w +'%';\\n        if(w==100) return;\\n        p.style.width = w+1+'%';\\n        requestAnimationFrame(arguments.callee)\\n    }\\n    requestAnimationFrame(run);\\n}\\n</code></pre><script>function progress2(e){e.style.width=\\\"0%\\\",e.innerText=\\\"0%\\\";var n=setInterval(function(){var t=parseInt(e.style.width);e.innerText=t+\\\"%\\\",100!=t?e.style.width=t+1+\\\"%\\\":clearInterval(n)},15)}</script><p id=progress2 style=width:0%;background-color:#00f;color:#fff>0</p><button onclick=progress2(document.querySelector(\\\"#progress2\\\"))>RUN</button><script>progress2(document.querySelector(\\\"#progress2\\\"));</script><pre><code data-query={} data-lang>function progress2(p){\\n    p.style.width='0%';\\n    p.innerText='0%';\\n    function run(){\\n        var w = parseInt(p.style.width);\\n        p.innerText = w +'%';\\n        if(w==100){\\n            clearInterval(t); return;\\n        }\\n        p.style.width = w+1+'%';\\n    }\\n    var t =setInterval(run,15);\\n}\\n</code></pre><p>可以看到，<code>requestAnimationFrame</code>代码量更少。</p><h1 id=惊天秘密><a href=#%E6%83%8A%E5%A4%A9%E7%A7%98%E5%AF%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>惊天秘密</h1><p><strong>深入理解，可以把<code>requestAnimationFrame(func)</code>等效为<code>setTimeout(func,15);</code></strong> 不信，你试下嘛。 当然，<code>requestAnimationFrame</code>在浏览器查看其它网页的一段时间后，便会自动停止动画。 在threejs中，就是用<code>requestAnimationFrame</code>来减少cpu负载的。 <strong>2016/5/15 更新</strong> <code>requestAnimationFrame</code> 中会默认传入一个相对的时间戳，<a href=https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame>详细看这里</a>； <code>setTimeout(func,15);</code>除了这种用法以外，还可以<code>setTimeout(func,15,args);</code>传入参数，当然<code>setInterval</code>也一样。</p>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/requestanimationframe-vs-setinterval.md\n// module id = 1224\n// module chunks = 41"],"sourceRoot":""}