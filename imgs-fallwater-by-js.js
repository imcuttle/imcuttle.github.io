webpackJsonp([75,113],{1189:function(e,i){e.exports={content:"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=效果一窥><a href=#%E6%95%88%E6%9E%9C%E4%B8%80%E7%AA%A5 aria-hidden=true><span class=\"icon icon-link\"></span></a>效果一窥</h1><ul><li>实现了图片动态加载（滚轮操作）与图片渐现效果（css3动画）</li></ul><iframe src=/htm/imgWaterFall.html style=width:100%;height:400px></iframe><!--more-->[完整Demo点击这里](/htm/imgWaterFall.html) # 怎么实现？ ## 首先，布局与结构 - HTML ```html<ul class=img-wf><li><div class=img-item><img src=images/pic-1.jpg></div></li><li><div><div class=img-item><img src=images/pic-2.jpg></div></div></li><li><div class=img-item><img src=images/pic-3.jpg></div></li><li><div class=img-item><img src=images/pic-4.jpg></div></li></ul>``` - CSS ```css body{background-color:#E9E9E9;} .img-wf{ width:75%; padding:0; margin: auto; list-style:none; } .img-wf li{ position:relative; padding: 3px 1% 3px; float:left; width: 23%; } .img-wf li img{ width:100%; } .img-wf .img-item{ background-color:white; padding: 4px; margin-bottom: 15px; } .img-wf .img-item:hover{ transition: 0.4s; transform:scale(1.05,1.05); box-shadow: 6px 6px 3px gray; }<p>@keyframes fadeIn { 0% {opacity: 0; /<em>初始状态 透明度为0</em>/} 100% {opacity: 1; /<em>结尾状态 透明度为1</em>/} } .animate{ animation:fadeIn 1.5s; }</p><pre><code data-query={} data-lang>可以看到，为了不收屏幕大小影响， `width` 均设置为 `xx%`\n我将 `li` 设置为 `float:left` ，也就是说，每一个 `li` 就占据了一排（因为 `width:23%;`，一共4排 ），\n然后通过 js 实现将 `&lt;div class='img-item'>&lt;img src='images/pic-4.jpg' />&lt;/div>` 添加至 `li` 中即可。\ncss中 `@keyframes fadeIn`，`.animate` 是css3实现动画，详细请查看 w3c\n## 嗯，然后是js\n- JavaScript\n```javascript\nvar imgwf = document.querySelector('.img-wf');\nHTMLElement.prototype.waterfall = function(srcs){\n    var lis = this.children;        \n    function getRandomImg(onload){\n        function createImg(src){\n            var div = document.createElement('div');\n            div.className = 'img-item';\n            var img = document.createElement('img');\n            img.src = src;\n            img.style.display='none';\n            img.onload = onload;\n            div.appendChild(img);\n            return div;\n        }\n        return createImg(srcs[parseInt(Math.floor(Math.random()*srcs.length))]);\n    }\n    for(var i =0;i&lt;lis.length;i++){\n        var min = Number.MAX_VALUE;\n        var minLi,t=0;\n        var img = getRandomImg(function(){              \n            this.classList.add('animate');\n            this.style.display='';\n            if(min>this.parentElement.parentElement.clientHeight){\n                min = this.parentElement.parentElement.clientHeight;\n                minLi = this.parentElement.parentElement;\n            }\n            if(++t==lis.length)\n                minLi.appendChild(getRandomImg(function(){this.classList.add('animate');this.style.display='';}));\n        });\n        lis[i].appendChild(img);\n    }\n}\n\ndocument.onmousewheel=function(e){\n    var delta = e.wheelDelta || e.detail;\n    console.log(e);\n    var body = document.body;\n    if(delta&lt;0 &amp&amp body.scrollTop+body.clientHeight == body.scrollHeight){\n        imgwf.waterfall(['images/pic-1.jpg','images/pic-2.jpg','images/pic-3.jpg','images/pic-4.jpg']);\n    }\n}\n</code></pre><h1 id=最后，谈下问题><a href=#%E6%9C%80%E5%90%8E%EF%BC%8C%E8%B0%88%E4%B8%8B%E9%97%AE%E9%A2%98 aria-hidden=true><span class=\"icon icon-link\"></span></a>最后，谈下问题</h1><p>用 <code>float</code> 实现固然简单可行，但是也有不好的地方。 <code>li</code> 都设置为浮动元素，那么也就是脱离了文档流，<code>ul</code> 中并没有文档流，所以<strong><code>ul</code> 的高度为0</strong> 其实还有其他的实现方法， 比如利用设置 父容器 <code>position:relative</code>, 子元素 <code>position:absolute</code> 然后通过js计算，得到 <code>top</code>,<code>left</code> 值。 详细的内容，请点击<a href=http://www.68design.net/Web-Guide/HTMLCSS/58734-1.html>一篇比较好的文章</a>。</p><p>2016/4/30更新！ <code>ul</code>高度为0可以通过以下方法解决！</p><pre><code class=\"hljs language-css\"data-query={} data-lang=css><span class=hljs-selector-tag>ul</span><span class=hljs-selector-pseudo>:after</span>{\n    <span class=hljs-attribute>content</span>: <span class=hljs-string>'.'</span>;\n    <span class=hljs-attribute>display</span>: block;\n    <span class=hljs-attribute>clear</span>: left;\n    <span class=hljs-attribute>height</span>: <span class=hljs-number>0</span>;\n    <span class=hljs-attribute>visibility</span>: hidden;\n}</code></pre>",extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=imgs-fallwater-by-js.js.map