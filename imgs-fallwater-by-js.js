webpackJsonp([54,90],{1009:function(n,i){n.exports={content:"<h1 id=\"效果一窥\"><a href=\"#%E6%95%88%E6%9E%9C%E4%B8%80%E7%AA%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>效果一窥</h1>\n<ul>\n<li>实现了图片动态加载（滚轮操作）与图片渐现效果（css3动画）</li>\n</ul>\n<iframe src='/htm/imgWaterFall.html' style='width:100%;height:400px;'></iframe>\n<!--more-->\n[完整Demo点击这里](/htm/imgWaterFall.html)\n# 怎么实现？\n## 首先，布局与结构\n- HTML\n```html\n<ul class='img-wf'>\n<li><div class='img-item'><img src='images/pic-1.jpg' /></div></li>\n<li><div><div class='img-item'><img src='images/pic-2.jpg' /></div></li>\n<li><div class='img-item'><img src='images/pic-3.jpg' /></div></li>\n<li><div class='img-item'><img src='images/pic-4.jpg' /></div></li>\n</ul>\n```\n- CSS\n```css\nbody{background-color:#E9E9E9;}\n.img-wf{\n\twidth:75%;\n\tpadding:0;\n\tmargin: auto;\n\tlist-style:none;\n}\n.img-wf li{\n\tposition:relative;\n\tpadding: 3px 1% 3px;\n\tfloat:left;\n\twidth: 23%;\n}\n.img-wf li img{\n\twidth:100%;\n}\n.img-wf .img-item{\n\tbackground-color:white;\n\tpadding: 4px;\n\tmargin-bottom: 15px;\n}\n.img-wf .img-item:hover{\n\ttransition: 0.4s;\n\ttransform:scale(1.05,1.05);\n\tbox-shadow: 6px 6px 3px gray;\n}\n<p>@keyframes fadeIn {\n0% {opacity: 0; /<em>初始状态 透明度为0</em>/}\n100% {opacity: 1; /<em>结尾状态 透明度为1</em>/}\n}\n.animate{\nanimation:fadeIn 1.5s;\n}</p>\n<pre><code data-query=\"{}\" data-lang=\"\">可以看到，为了不收屏幕大小影响， `width` 均设置为 `xx%`\n我将 `li` 设置为 `float:left` ，也就是说，每一个 `li` 就占据了一排（因为 `width:23%;`，一共4排 ），\n然后通过 js 实现将 `&#x3C;div class='img-item'>&#x3C;img src='images/pic-4.jpg' />&#x3C;/div>` 添加至 `li` 中即可。\ncss中 `@keyframes fadeIn`，`.animate` 是css3实现动画，详细请查看 w3c\n## 嗯，然后是js\n- JavaScript\n```javascript\nvar imgwf = document.querySelector('.img-wf');\nHTMLElement.prototype.waterfall = function(srcs){\n    var lis = this.children;        \n    function getRandomImg(onload){\n        function createImg(src){\n            var div = document.createElement('div');\n            div.className = 'img-item';\n            var img = document.createElement('img');\n            img.src = src;\n            img.style.display='none';\n            img.onload = onload;\n            div.appendChild(img);\n            return div;\n        }\n        return createImg(srcs[parseInt(Math.floor(Math.random()*srcs.length))]);\n    }\n    for(var i =0;i&#x3C;lis.length;i++){\n        var min = Number.MAX_VALUE;\n        var minLi,t=0;\n        var img = getRandomImg(function(){              \n            this.classList.add('animate');\n            this.style.display='';\n            if(min>this.parentElement.parentElement.clientHeight){\n                min = this.parentElement.parentElement.clientHeight;\n                minLi = this.parentElement.parentElement;\n            }\n            if(++t==lis.length)\n                minLi.appendChild(getRandomImg(function(){this.classList.add('animate');this.style.display='';}));\n        });\n        lis[i].appendChild(img);\n    }\n}\n\ndocument.onmousewheel=function(e){\n    var delta = e.wheelDelta || e.detail;\n    console.log(e);\n    var body = document.body;\n    if(delta&#x3C;0 &#x26;&#x26; body.scrollTop+body.clientHeight == body.scrollHeight){\n        imgwf.waterfall(['images/pic-1.jpg','images/pic-2.jpg','images/pic-3.jpg','images/pic-4.jpg']);\n    }\n}\n</code></pre>\n<h1 id=\"最后，谈下问题\"><a href=\"#%E6%9C%80%E5%90%8E%EF%BC%8C%E8%B0%88%E4%B8%8B%E9%97%AE%E9%A2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>最后，谈下问题</h1>\n<p>用 <code>float</code> 实现固然简单可行，但是也有不好的地方。\n<code>li</code> 都设置为浮动元素，那么也就是脱离了文档流，<code>ul</code> 中并没有文档流，所以<strong> <code>ul</code> 的高度为0 </strong>\n其实还有其他的实现方法，\n比如利用设置 父容器 <code>position:relative</code>, 子元素 <code>position:absolute</code> 然后通过js计算，得到 <code>top</code>,<code>left</code> 值。\n详细的内容，请点击<a href=\"http://www.68design.net/Web-Guide/HTMLCSS/58734-1.html\">一篇比较好的文章</a>。</p>\n<p>2016/4/30更新！\n<code>ul</code>高度为0可以通过以下方法解决！</p>\n<pre><code class=\"hljs language-css\" data-query=\"{}\" data-lang=\"css\"><span class=\"hljs-selector-tag\">ul</span><span class=\"hljs-selector-pseudo\">:after</span>{\n    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">'.'</span>;\n    <span class=\"hljs-attribute\">display</span>: block;\n    <span class=\"hljs-attribute\">clear</span>: left;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">visibility</span>: hidden;\n}</code></pre>\n",extra:{}}}});