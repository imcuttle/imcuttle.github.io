webpackJsonp([13,113],{1253:function(s,a){s.exports={content:'<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p>今天给大家介绍一个轻量但神奇的国际化库<a href=https://github.com/imcuttle/tiny-i18n>tiny-i18n</a></p><p>在我们的项目日益庞大的情况下，国际化的字典愈变愈大，国际化文本的维护是一个问题；<br>有时候修改一个字段，查找就花费了很大的时间功夫。 这个时候 tiny-i18n 中的 <a href=https://github.com/imcuttle/tiny-i18n/tree/master/packages/react-live>@tiny-i18n/react-live</a> 就可以发挥它的力量了，可以帮助我们在线可视化修改、新增国际化字段。</p><h2 id=效果><a href=#%E6%95%88%E6%9E%9C aria-hidden=true><span class="icon icon-link"></span></a>效果</h2><ul><li><p>视频效果：<a href=http://obu9je6ng.bkt.clouddn.com/Jietu20180622-102135-HD.mp4>http://obu9je6ng.bkt.clouddn.com/Jietu20180622-102135-HD.mp4</a></p></li><li><p><a href=https://imcuttle.github.io/tiny-i18n/>DEMO</a> - 更新后，字典存储至 localStorage 中</p></li></ul><h2 id=体验在线编辑><a href=#%E4%BD%93%E9%AA%8C%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91 aria-hidden=true><span class="icon icon-link"></span></a>体验在线编辑</h2><iframe src=https://codesandbox.io/embed/kpow6rnnr style=width:100%;height:500px;border:0;border-radius:4px;overflow:hidden sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id=实现原理><a href=#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86 aria-hidden=true><span class="icon icon-link"></span></a>实现原理</h2><p>对 i18n 转换方法进行包装，转换成包含特殊字符（包裹）的字符串；同时对 <code>React.createElement</code> 方法进行包装，检测出包含特殊字符（包裹）的字符串，这时候就会被认为是国际化的文本，这个时候再去注入一些而外的交互逻辑。</p><p>以 codesandbox DEMO 为例，在下面这段 React 视图代码中：</p><pre><code class="hljs language-jsx"data-query={} data-lang=jsx><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>App</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>React</span>.<span class=hljs-title>Component</span> </span>{\n  changeLang = <span class=hljs-function><span class=hljs-params>lang</span> =></span> {\n    <span class=hljs-keyword>this</span>.context.i18n.setLanguage(lang);\n  };\n  render() {\n    <span class=hljs-keyword>return</span> (\n      <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>className</span>=<span class=hljs-string>"App"</span>></span>\n        </span>&lt;h1>{_i("tpl.sayhello", _i("name"))}&lt;/h1><span class=xml>\n        </span>&lt;h2 title={_i("content.text")}>{_i("content.text")}&lt;/h2><span class=xml>\n        </span>&lt;a href="/?react-live">Open react-live mode&lt;/a><span class=xml>\n        </span>&lt;div>\n          &lt;h3>\n            {_i("label.current.lang")}: {i.getCurrentLanguage()}\n          &lt;/h3>\n          {i.getLanguages().map(lang => (\n            &lt;button key={lang} onClick={this.changeLang.bind(this, lang)}>\n              {lang}\n            &lt;/button>\n          ))}\n        &lt;/div><span class=xml>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span></span>\n    );\n  }\n}</code></pre><p>如下图，为国际化文本正常渲染的 DOM 结构：<br><img src=https://i.loli.net/2018/06/23/5b2ddc31d501a.png></p><p>并无什么异样，只不过是 <code>_i(...)</code> 方法转换为对应语言的译文字符串。</p><p>那么在开启 React-Live 功能之后呢？（点击 <code>Open react-live mode</code>）</p><p>react-live 模式加载了下面的脚本</p><pre><code class="hljs language-javascript"data-query={} data-lang=javascript><span class=hljs-keyword>if</span> (location.search === <span class=hljs-string>"?react-live"</span>) {\n  <span class=hljs-built_in>require</span>(<span class=hljs-string>"@tiny-i18n/react-live/register"</span>);\n  <span class=hljs-built_in>require</span>(<span class=hljs-string>"@tiny-i18n/react-live/lib/style.css"</span>);\n}</code></pre><p>视图就神奇地变成了下面所示！ <img src=https://i.loli.net/2018/06/23/5b2ddcbb2d9ec.png></p><p>观察 DOM 结构可以看出来，在 “你好呀，大家” 这段国际化文本中，对应代码为：</p><pre><code class="hljs language-jsx"data-query={} data-lang=jsx>&lt;h1>{_i(<span class=hljs-string>"tpl.sayhello"</span>, _i(<span class=hljs-string>"name"</span>))}&lt;<span class=hljs-regexp>/h1></span></code></pre><p>字典数据为</p><pre><code class="hljs language-javascript"data-query={} data-lang=javascript>i.setDictionary(\n  {\n    <span class=hljs-string>"label.current.lang"</span>: <span class=hljs-string>"当前语言"</span>,\n    <span class=hljs-string>"name"</span>: <span class=hljs-string>"大家"</span>,\n    <span class=hljs-string>"tpl.sayhello"</span>: <span class=hljs-string>"你好呀，${1}"</span>,\n    <span class=hljs-string>"content.text"</span>: <span class=hljs-string>"点击下面的链接看看有什么神奇的事情发生吧！"</span>\n  },\n  <span class=hljs-string>"zh-CN"</span>\n);</code></pre><ul><li><p>未开启 react-live 对应的 HTML:</p><pre><code class="hljs language-html"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>h1</span>></span>你好呀，大家<span class=hljs-tag>&lt;/<span class=hljs-name>h1</span>></span></code></pre></li><li><p>开启后变成： <img src=https://i.loli.net/2018/06/24/5b2f63fb8399c.png></p></li></ul><p>不难发现，react-live 注入了一些额外的数据，并且各字段之间也被奇怪的字符： <code>&amp#8203;</code> <code>&ampzwnj;</code> 包裹，这两个字符是特殊的不可见字符。通过这两个字符包裹，\b可以<strong>找到对应翻译文本在 DOM 中的位置，进而可以进行替换</strong>。</p><p>但是这两个不可见字符也会带来隐藏的问题，如复制下面“你好”文本</p><p>你​‌好</p><p>看来其中的字符串长度为2，但是实际上却是2<br><img src=https://i.loli.net/2018/06/24/5b2f657f036f8.png></p><p>这是因为上面的文本，实际上为 <code>你&amp#8203;&ampzwnj;好</code>，而中间 2 个字符不可见。</p><h2 id=其他问题><a href=#%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98 aria-hidden=true><span class="icon icon-link"></span></a>其他问题</h2><p>除了上文介绍的不可见字符带来的问题以外，\b还有如果开启 react-live 模式后，i18n 转换方法\b输出的字符串\b将<strong>不会\b再是正确的转换文本</strong>；只有通过 React.createElement 方法才能\b被正确转换为国际化的文本。</p><p>所以 <code>document.title = _i(\'...\')</code> 这样的语句会\b有问题； <img src=https://i.loli.net/2018/06/24/5b2f66ee9959b.png></p><p>即使是使用 <a href=https://github.com/gaearon/react-document-title>react-document-title</a> 也是会\b有相同的问题。因为 react-live 只会对 html tag(React.createElement 第一个参数为字符串) 中的国际化文本进行转换。</p>',extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=在线编辑国际化文本.js.map