webpackJsonp([57,90],{1006:function(s,a){s.exports={content:'<h2 id="情景重现"><a href="#%E6%83%85%E6%99%AF%E9%87%8D%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>情景重现</h2>\n<p>有时候，我们看到网上比较好的文章，我们油然会想去转载，但是呈现在浏览器上文章的格式为 HTML，我们书写文章的格式又为 Markdown，所以我便想实现 HTML 到 Markdown 的转换。</p>\n<p><strong>注：对于一些文章排版较为复杂的 HTML 标签（如 table），暂时直接输出 HTML</strong></p>\n<h2 id="使用"><a href="#%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>使用</h2>\n<p>还是从 npm 开始，支持三种方式（URL/file/命令参数）的调用。</p>\n<pre><code data-query="{}" data-lang="">npm i -g html-markdown\nhtml2md -h\nhtml2md https://www.npmjs.com/package/html-markdown -s "#readme" > html-markdown-readme.md\nhtml2md path/to/html/file -s "#markdown"\nhtml2md path/to/html/file\nhtml2md --eval "&#x3C;h1>Hello!&#x3C;/h1>"\nhtml2md - # get string from stdin\nhtml2md   # get string from stdin, better REPL\n{\n    echo "&#x3C;h1>HEAD1&#x3C;/h1>";\n    echo "&#x3C;h2>HEAD2&#x3C;/h2>";\n} | html2md -\n</code></pre>\n<p>URL 只支持 HTTP/HTTPs 协议，<code>-s --selector</code> 选项表示 HTML 文档中的 DOM 选择器，如 jQuery 选择器。</p>\n<p>以上为命令行的方式，同时还提供第三方包的形式</p>\n<pre><code data-query="{}" data-lang="">npm i --save html-markdown\n</code></pre>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-keyword">var</span> html2md = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'html-markdown\'</span>);\n\n<span class="hljs-comment">// can use in browser and node.</span>\n<span class="hljs-keyword">var</span> md1 = html2md.html2mdFromString(<span class="hljs-string">"&#x3C;h1>Hello!&#x3C;/h1>"</span>);\n\n<span class="hljs-comment">// https or http, not isomorphic</span>\nhtml2md.html2mdFromURL(<span class="hljs-string">"https://www.npmjs.com/package/song-robot"</span>, <span class="hljs-string">"#readme"</span>).then(<span class="hljs-built_in">console</span>.log).catch(<span class="hljs-built_in">console</span>.error);\n\n<span class="hljs-comment">// not isomorphic</span>\nhtml2md.html2mdFromPath(<span class="hljs-string">"path/to/html/file"</span>, <span class="hljs-string">"#markdown"</span>).then(<span class="hljs-built_in">console</span>.log).catch(<span class="hljs-built_in">console</span>.error);</code></pre>\n<h2 id="实现"><a href="#%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>实现</h2>\n<p>一共实现了 2 个版本，分别用 Cheerio、jsDom 实现。</p>\n<p>Cheerio 更侧重于 node 端，jsDom 则将 HTML 标准在 node 上实现了，所以在浏览器端不需要导入 jsDom，因为浏览器已经实现了 HTML 标准。故 <strong>jsDom 版本加上环境的判断，可以在浏览器和服务器端使用同一套代码</strong></p>\n<img src="https://ooo.0o0.ooo/2017/02/07/589954c09cc12.jpg" alt="" width="415" height="95" />\n<p>具体的转化思路大致是，递归遍历 dom 树。对于单个 node ，判断其 tagName 进行映射。</p>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^h([\\d]+)$/i</span>.test(tagName)) {\n    mapStr = <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-string">\'#\'</span>.repeat(+<span class="hljs-built_in">RegExp</span>.$<span class="hljs-number">1</span>)}</span> <span class="hljs-subst">${childrenRender()}</span>`</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'ul\'</span> === tagName || <span class="hljs-string">\'ol\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`<span class="hljs-subst">${childrenRender(level+(parentTagName === <span class="hljs-string">\'li\'</span>? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>))}</span>`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'li\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-string">\'   \'</span>.repeat(level)}</span><span class="hljs-subst">${parentTagName === <span class="hljs-string">\'ul\'</span> ? <span class="hljs-string">\'-\'</span> : <span class="hljs-number">1</span>+index+<span class="hljs-string">\'.\'</span>}</span> <span class="hljs-subst">${childrenRender()}</span>`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'img\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`![<span class="hljs-subst">${dom.getAttribute(<span class="hljs-string">\'alt\'</span>) || <span class="hljs-string">\'\'</span>}</span>](<span class="hljs-subst">${dom.getAttribute(<span class="hljs-string">\'src\'</span>)}</span>)`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'p\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`<span class="hljs-subst">${childrenRender()}</span>  `</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'code\'</span> === tagName) {\n    mapStr = <span class="hljs-string">"`"</span> + childrenRender() + <span class="hljs-string">"`"</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'pre\'</span> === tagName) {\n    mapStr = <span class="hljs-string">"\\n```\\n"</span>+ <span class="hljs-string">`<span class="hljs-subst">${jsdomText(dom).replace(<span class="hljs-regexp">/^\\r?\\n/</span>, <span class="hljs-string">\'\'</span>).replace(<span class="hljs-regexp">/\\r?\\n$/</span>, <span class="hljs-string">\'\'</span>)}</span>\\n`</span> +<span class="hljs-string">"```\\n"</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'a\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`[<span class="hljs-subst">${childrenRender()}</span>](<span class="hljs-subst">${dom.getAttribute(<span class="hljs-string">\'href\'</span>)}</span>)`</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'div\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`<span class="hljs-subst">${childrenRender()}</span>`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'strong\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`**<span class="hljs-subst">${childrenRender()}</span>**`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'em\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`*<span class="hljs-subst">${childrenRender()}</span>*`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'hr\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`------`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'del\'</span> === tagName) {\n    mapStr = <span class="hljs-string">`~~<span class="hljs-subst">${childrenRender()}</span>~~`</span>\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'html\'</span> === tagName || <span class="hljs-string">\'body\'</span> === tagName) {\n    mapStr = childrenRender()\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">\'head\'</span> === tagName) {\n    mapStr = <span class="hljs-string">\'\'</span>;\n} <span class="hljs-keyword">else</span> {\n    mapStr = dom.outerHTML;\n}</code></pre>\n<p>同时还需要注意！对于代码块</p>\n<img src="https://ooo.0o0.ooo/2017/02/07/58995661014f5.jpg" alt="ClipboardImage" width="472" height="513" />\n<p>其换行是被样式控制的，如下图 <code>&#x3C;div></code></p>\n<img src="https://ooo.0o0.ooo/2017/02/07/589956804fb84.jpg" alt="ClipboardImage" width="381" height="319" />\n<p>而且 Dom 中的属性 <code>innerText</code> 不属于 HTML 标准，是浏览器各自实现的。如下图，<code>innerText</code> 是带换行的，而 <code>textContent</code> 则不带（jQuery 中 text() 也是不带的）</p>\n<img src="https://ooo.0o0.ooo/2017/02/07/589956d5916fe.jpg" alt="ClipboardImage" width="427" height="531" />\n<p>所以就需要我们自己判断是否需要换行，即自己实现 innerText</p>\n<pre><code data-query="{}" data-lang="">var jsdomText = function (dom) {\n    var html = dom.innerHTML;\n    if(!html) {\n        return dom.textContent;\n    }\n    var myhtml = html.replace(/&#x3C;p.*?>(.*?)&#x3C;\\/p>/gmi, \'$1\\n\')\n        .replace(/&#x3C;div.*?>(.*?)&#x3C;\\/div>/gmi, \'$1\\n\')\n        .replace(/&#x3C;br.*?>/gmi, \'\\n\')\n        .replace(/&#x3C;(?:.)*?>/gm, \'\') // remove all html tags\n        \n    var he = require(\'he\'); // he for decoding html entities\n    var mytext = he.decode(myhtml);\n    return mytext;\n}\n</code></pre>\n<p>欢迎使用，并给我提 <a href="https://github.com/moyuyc/html-markdown/issues">Issue</a>，我将会不断进行优化改善。</p>\n',extra:{}}}});