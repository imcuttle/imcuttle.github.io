webpackJsonp([26,90],{1037:function(e,n){e.exports={content:'<h1 id="介绍"><a href="#%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>介绍</h1>\n<p>大家对setInterval一定不陌生，但可能不太了解requestAnimationFrame\nrequestAnimationFrame是HTML5新添的api，两者都能产生动画效果。</p>\n<h1 id="区别"><a href="#%E5%8C%BA%E5%88%AB" aria-hidden="true"><span class="icon icon-link"></span></a>区别</h1>\n<p>requestAnimationFrame 参数只有一个参数，是用来循环调用的方法，\nsetInterval 有两个参数，第一个是方法，第二个是循环调用的时间。\n<strong>但是，JavaScript是单线程的，也就是同一时间只能有一句JavaScript语句执行所以，setInterval的实现是通过事件驱动完成的，当时间到了之后，setInterval加入事件队列，等待JavaScript的青睐，所以这种计时是不准确的。</strong></p>\n<!--more-->\n<h2 id="demo"><a href="#demo" aria-hidden="true"><span class="icon icon-link"></span></a>Demo</h2>\n<script>function progress(p){p.style.width=\'0%\';p.innerText=\'0%\';function run(){var w = parseInt(p.style.width);p.innerText = w +\'%\';if(w==100) return;p.style.width = w+1+\'%\';setTimeout(arguments.callee,15)}setTimeout(run,15);}</script>\n<p id=\'progress\' style="width:0%;background-color:blue;color:white">0</p>\n<button onclick="progress(document.querySelector(\'#progress\'));">RUN</button>\n<script>progress(document.querySelector(\'#progress\'));</script>\n<pre><code data-query="{}" data-lang="">function progress(p){\n    p.style.width=\'0%\';\n    p.innerText=\'0%\';\n    function run(){\n        var w = parseInt(p.style.width);\n        p.innerText = w +\'%\';\n        if(w==100) return;\n        p.style.width = w+1+\'%\';\n        requestAnimationFrame(arguments.callee)\n    }\n    requestAnimationFrame(run);\n}\n</code></pre>\n<script>function progress2(p){p.style.width=\'0%\';p.innerText=\'0%\';function run(){var w = parseInt(p.style.width);p.innerText = w +\'%\';if(w==100){clearInterval(t); return;}p.style.width = w+1+\'%\';}var t =setInterval(run,15);}</script>\n<p id=\'progress2\' style="width:0%;background-color:blue;color:white">0</p>\n<button onclick="progress2(document.querySelector(\'#progress2\'));">RUN</button>\n<script>progress2(document.querySelector(\'#progress2\'));</script>\n<pre><code data-query="{}" data-lang="">function progress2(p){\n    p.style.width=\'0%\';\n    p.innerText=\'0%\';\n    function run(){\n        var w = parseInt(p.style.width);\n        p.innerText = w +\'%\';\n        if(w==100){\n            clearInterval(t); return;\n        }\n        p.style.width = w+1+\'%\';\n    }\n    var t =setInterval(run,15);\n}\n</code></pre>\n<p> 可以看到，<code>requestAnimationFrame</code>代码量更少。</p>\n<h1 id="惊天秘密"><a href="#%E6%83%8A%E5%A4%A9%E7%A7%98%E5%AF%86" aria-hidden="true"><span class="icon icon-link"></span></a>惊天秘密</h1>\n<p> <strong>深入理解，可以把<code>requestAnimationFrame(func)</code>等效为<code>setTimeout(func,15);</code></strong>\n不信，你试下嘛。\n当然，<code>requestAnimationFrame</code>在浏览器查看其它网页的一段时间后，便会自动停止动画。\n在threejs中，就是用<code>requestAnimationFrame</code>来减少cpu负载的。\n<strong>2016/5/15 更新</strong>\n<code>requestAnimationFrame</code> 中会默认传入一个相对的时间戳，<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">详细看这里</a>；\n<code>setTimeout(func,15);</code>除了这种用法以外，还可以<code>setTimeout(func,15,args);</code>传入参数，当然<code>setInterval</code>也一样。\n</p>\n',extra:{}}}});