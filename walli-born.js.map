{"version":3,"sources":["webpack:///walli-born.js","webpack:///./source/_articles/walli-born.md"],"names":["webpackJsonp","1246","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,+2IACAC,OACAC,oBACAC","file":"walli-born.js","sourcesContent":["webpackJsonp([19,113],{\n\n/***/ 1246:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p><a href=https://github.com/imcuttle/walli>walli</a>一个可管理不可变的数据校验库</p><h3 id=什么时候需要用到-walli><a href=#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0-walli aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>什么时候需要用到 walli</h3><p>书写工具包的时候，需要校对用户输入参数的（复杂数据结构）配置, 类似于webpack中的配置校对 和 react中的 prop types</p><h3 id=简单栗子><a href=#%E7%AE%80%E5%8D%95%E6%A0%97%E5%AD%90 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>简单栗子</h3><p>如定义一个person的数据结构</p><ul><li>typescript 定义</li></ul><pre><code class=\\\"hljs language-typescript\\\"data-query={} data-lang=typescript><span class=hljs-keyword>type</span> Person = {\\n  name: <span class=hljs-built_in>string</span>\\n  age: <span class=hljs-built_in>string</span>\\n  gender: <span class=hljs-string>'F'</span> | <span class=hljs-string>'M'</span>\\n  father?: Person\\n  mother?: Person\\n  children?: Person[]\\n}</code></pre><ul><li>对应于walli定义</li></ul><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>import</span> {\\n  string,\\n  eq,\\n  oneOf,\\n  array,\\n  integer,\\n  arrayOf,\\n  Verifiable\\n} <span class=hljs-keyword>from</span> <span class=hljs-string>'walli'</span>\\n<span class=hljs-keyword>import</span> { util } <span class=hljs-keyword>from</span> <span class=hljs-string>'walli'</span>\\n<span class=hljs-keyword>const</span> { createVerifiableClass, createFinalVerifiable, funcify } = util\\n\\n<span class=hljs-keyword>const</span> person = createVerifiableClass({\\n  getDisplayName() {\\n    <span class=hljs-keyword>return</span> <span class=hljs-string>'person'</span>\\n  },\\n  _check(req) {\\n    <span class=hljs-keyword>return</span> eq({\\n      <span class=hljs-attr>name</span>: string,\\n      <span class=hljs-attr>age</span>: integer,\\n      <span class=hljs-attr>gender</span>: oneOf([<span class=hljs-string>'F'</span>, <span class=hljs-string>'M'</span>]),\\n      <span class=hljs-attr>father</span>: person().optional,\\n      <span class=hljs-attr>mother</span>: person().optional,\\n      <span class=hljs-attr>children</span>: arrayOf(person()).optional\\n    }).check(req)\\n  }\\n})\\n\\nperson().ok({\\n  <span class=hljs-attr>name</span>: <span class=hljs-string>'cy'</span>,\\n  <span class=hljs-attr>age</span>: <span class=hljs-number>22</span>,\\n  <span class=hljs-attr>gender</span>: <span class=hljs-string>'F'</span>\\n}) === <span class=hljs-literal>true</span>\\n\\nperson().toUnlawfulString({\\n  <span class=hljs-comment>// ...</span>\\n})\\n\\n<span class=hljs-comment>// createFinalVerifiable</span>\\n<span class=hljs-keyword>const</span> finalPerson = createFinalVerifiable(person)\\n<span class=hljs-comment>// finalPerson.check(...)</span>\\n\\n\\n<span class=hljs-comment>// Or using es6 syntax</span>\\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Person</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Verifiable</span> </span>{\\n  <span class=hljs-keyword>static</span> displayName = <span class=hljs-string>'person'</span>\\n  _check(req) {\\n     <span class=hljs-comment>// same code here</span>\\n  }\\n}\\n<span class=hljs-keyword>const</span> es6Person = funcify(Person)\\n<span class=hljs-keyword>const</span> finalES6Person = createFinalVerifiable(es6Person)</code></pre><h3 id=特技><a href=#%E7%89%B9%E6%8A%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>特技</h3><p>walli 提供三个核心校验api: <code>check</code> <code>ok</code> <code>toUnlawfulString</code></p><ul><li>check 返回一个校验结果的数据结构 UnlawfulnessList，其中的 每一个 Unlawfulness 包括: 错误的 <code>paths</code> 路径，错误原因 <code>reasons</code></li><li>ok 则直接返回是否校验正确</li><li>toUnlawfulString 返回非法原因的字符串</li></ul><h3 id=为什么walli是可管理的呢><a href=#%E4%B8%BA%E4%BB%80%E4%B9%88walli%E6%98%AF%E5%8F%AF%E7%AE%A1%E7%90%86%E7%9A%84%E5%91%A2 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>为什么walli是可管理的呢</h3><ol><li>可以自定义自己的类型结构, 如上文中的 person.</li><li>可以自定义非法字符串<a href=https://imcuttle.github.io/walli/classes/_reasons_reason_.reason.html#message>message</a></li><li>预设众多的<a href=https://imcuttle.github.io/walli/globals.html>基础类型</a> （欢迎提pr提供更多）</li></ol><p><a href=https://github.com/imcuttle/walli>github</a></p>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// walli-born.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p><a href=https://github.com/imcuttle/walli>walli</a>一个可管理不可变的数据校验库</p><h3 id=什么时候需要用到-walli><a href=#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0-walli aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>什么时候需要用到 walli</h3><p>书写工具包的时候，需要校对用户输入参数的（复杂数据结构）配置, 类似于webpack中的配置校对 和 react中的 prop types</p><h3 id=简单栗子><a href=#%E7%AE%80%E5%8D%95%E6%A0%97%E5%AD%90 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>简单栗子</h3><p>如定义一个person的数据结构</p><ul><li>typescript 定义</li></ul><pre><code class=\\\"hljs language-typescript\\\"data-query={} data-lang=typescript><span class=hljs-keyword>type</span> Person = {\\n  name: <span class=hljs-built_in>string</span>\\n  age: <span class=hljs-built_in>string</span>\\n  gender: <span class=hljs-string>'F'</span> | <span class=hljs-string>'M'</span>\\n  father?: Person\\n  mother?: Person\\n  children?: Person[]\\n}</code></pre><ul><li>对应于walli定义</li></ul><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>import</span> {\\n  string,\\n  eq,\\n  oneOf,\\n  array,\\n  integer,\\n  arrayOf,\\n  Verifiable\\n} <span class=hljs-keyword>from</span> <span class=hljs-string>'walli'</span>\\n<span class=hljs-keyword>import</span> { util } <span class=hljs-keyword>from</span> <span class=hljs-string>'walli'</span>\\n<span class=hljs-keyword>const</span> { createVerifiableClass, createFinalVerifiable, funcify } = util\\n\\n<span class=hljs-keyword>const</span> person = createVerifiableClass({\\n  getDisplayName() {\\n    <span class=hljs-keyword>return</span> <span class=hljs-string>'person'</span>\\n  },\\n  _check(req) {\\n    <span class=hljs-keyword>return</span> eq({\\n      <span class=hljs-attr>name</span>: string,\\n      <span class=hljs-attr>age</span>: integer,\\n      <span class=hljs-attr>gender</span>: oneOf([<span class=hljs-string>'F'</span>, <span class=hljs-string>'M'</span>]),\\n      <span class=hljs-attr>father</span>: person().optional,\\n      <span class=hljs-attr>mother</span>: person().optional,\\n      <span class=hljs-attr>children</span>: arrayOf(person()).optional\\n    }).check(req)\\n  }\\n})\\n\\nperson().ok({\\n  <span class=hljs-attr>name</span>: <span class=hljs-string>'cy'</span>,\\n  <span class=hljs-attr>age</span>: <span class=hljs-number>22</span>,\\n  <span class=hljs-attr>gender</span>: <span class=hljs-string>'F'</span>\\n}) === <span class=hljs-literal>true</span>\\n\\nperson().toUnlawfulString({\\n  <span class=hljs-comment>// ...</span>\\n})\\n\\n<span class=hljs-comment>// createFinalVerifiable</span>\\n<span class=hljs-keyword>const</span> finalPerson = createFinalVerifiable(person)\\n<span class=hljs-comment>// finalPerson.check(...)</span>\\n\\n\\n<span class=hljs-comment>// Or using es6 syntax</span>\\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Person</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Verifiable</span> </span>{\\n  <span class=hljs-keyword>static</span> displayName = <span class=hljs-string>'person'</span>\\n  _check(req) {\\n     <span class=hljs-comment>// same code here</span>\\n  }\\n}\\n<span class=hljs-keyword>const</span> es6Person = funcify(Person)\\n<span class=hljs-keyword>const</span> finalES6Person = createFinalVerifiable(es6Person)</code></pre><h3 id=特技><a href=#%E7%89%B9%E6%8A%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>特技</h3><p>walli 提供三个核心校验api: <code>check</code> <code>ok</code> <code>toUnlawfulString</code></p><ul><li>check 返回一个校验结果的数据结构 UnlawfulnessList，其中的 每一个 Unlawfulness 包括: 错误的 <code>paths</code> 路径，错误原因 <code>reasons</code></li><li>ok 则直接返回是否校验正确</li><li>toUnlawfulString 返回非法原因的字符串</li></ul><h3 id=为什么walli是可管理的呢><a href=#%E4%B8%BA%E4%BB%80%E4%B9%88walli%E6%98%AF%E5%8F%AF%E7%AE%A1%E7%90%86%E7%9A%84%E5%91%A2 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>为什么walli是可管理的呢</h3><ol><li>可以自定义自己的类型结构, 如上文中的 person.</li><li>可以自定义非法字符串<a href=https://imcuttle.github.io/walli/classes/_reasons_reason_.reason.html#message>message</a></li><li>预设众多的<a href=https://imcuttle.github.io/walli/globals.html>基础类型</a> （欢迎提pr提供更多）</li></ol><p><a href=https://github.com/imcuttle/walli>github</a></p>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/walli-born.md\n// module id = 1246\n// module chunks = 19"],"sourceRoot":""}