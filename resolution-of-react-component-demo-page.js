webpackJsonp([25,90],{1038:function(s,n){s.exports={content:'<h2 id="为什么"><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88" aria-hidden="true"><span class="icon icon-link"></span></a>为什么</h2>\n<p> React组件化的开发思维，大大地缩减了我们的开发时间。\n于此同时也带来了一些问题：</p>\n<ol>\n<li>\n<p>大量组件的维护和兼容问题</p>\n</li>\n<li>\n<p>对于组件的学习使用，需要组件Demo展示</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ol>\n<p>对于第二点问题，Demo 的书写可能不能够对组件覆盖全面\n甚至需要深入查看组件源码才能明白配置项的功能</p>\n<h2 id="解决方案"><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true"><span class="icon icon-link"></span></a>解决方案</h2>\n<h3 id="react-live"><a href="#react-live" aria-hidden="true"><span class="icon icon-link"></span></a>React-Live</h3>\n<p><a href="http://formidable.com/open-source/radium/">demo</a></p>\n<h4 id="写法"><a href="#%E5%86%99%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>写法</h4>\n<pre><code class="hljs language-jsx" data-query="{}" data-lang="jsx"><span class="hljs-keyword">import</span> {\n    LiveProvider,\n    LiveEditor,\n    LiveError,\n    LivePreview\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-live\'</span>\n<span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">\'./Button\'</span>\n<span class="hljs-keyword">import</span> {h, c} <span class="hljs-keyword">from</span> <span class="hljs-string">\'@befe/utils/wrapper/erp\'</span>\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{\n    render() {\n        <span class="hljs-keyword">return</span> (\n            <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">LiveProvider</span>\n                // 需要注入的数据\n                <span class="hljs-attr">scope</span>=<span class="hljs-string">{{</span>\n                    <span class="hljs-attr">h</span>,\n                    <span class="hljs-attr">type:</span> \'<span class="hljs-attr">primary</span>\',\n                    <span class="hljs-attr">Button</span>,\n                }}\n                <span class="hljs-attr">code</span>=<span class="hljs-string">{</span>`\n                    <span class="hljs-attr">h</span>(<span class="hljs-attr">Button</span>, {\n                        <span class="hljs-attr">type</span>,\n                        <span class="hljs-attr">loading:</span> <span class="hljs-attr">true</span>,\n                        <span class="hljs-attr">onClick:</span> (<span class="hljs-attr">e</span>) =></span> {console.log(\'click \')}\n                    }, type)\n                `}>\n                    </span>&#x3C;LiveEditor /><span class="xml">\n                    </span>&#x3C;LiveError /><span class="xml">\n                    </span>&#x3C;LivePreview /><span class="xml">\n                <span class="hljs-tag">&#x3C;/<span class="hljs-name">LiveProvider</span>></span></span>\n            )\n        )\n    }\n}</code></pre>\n<h3 id="react-editable"><a href="#react-editable" aria-hidden="true"><span class="icon icon-link"></span></a>React-Editable</h3>\n<p>具体效果看视频</p>\n<video src="http://obu9je6ng.bkt.clouddn.com/editable-preview.mp4" controls="controls" width="500" height="300"/>\n<p>可以方便 “编辑” React 组件（包括 Props、State、甚至一些其他自定义数据）\n并且视图进行同步更新</p>\n<p>是不是很方便的就可以对一个组件进行深层次的剖析了！！</p>\n<p><a href="https://m-cuttlefish.github.io/react-mhoc/page/">Demo点我</a></p>\n<ul>\n<li>\n<p>参数</p>\n<ul>\n<li>groupName: string<br>\n编辑视图的组名(默认为组件名)</li>\n<li>attrNames: Array<br>\n需要编辑的数据keyNames, props强制支持 (默认[\'state\'])</li>\n</ul>\n</li>\n</ul>\n<pre><code class="hljs language-jsx" data-query="{}" data-lang="jsx"><span class="hljs-keyword">import</span> {editable} <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-mhoc\'</span>\n\n@editable\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    <span class="hljs-comment">// ....</span>\n\n    <span class="hljs-comment">// ref Api</span>\n    open() {}\n}\n\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n\n    componentDidMount() {\n        <span class="hljs-comment">// not existed open</span>\n        <span class="hljs-comment">// this.ref.open()</span>\n\n        <span class="hljs-comment">// ok</span>\n        <span class="hljs-keyword">this</span>.ref.comp.open()\n    }\n\n    render() {\n        &#x3C;MyComponent ref={r => <span class="hljs-keyword">this</span>.ref = r} />\n    }\n}</code></pre>\n<h4 id="展望"><a href="#%E5%B1%95%E6%9C%9B" aria-hidden="true"><span class="icon icon-link"></span></a>展望</h4>\n<ol>\n<li>后续可以定义数据（props/state/...）的描述信息，如</li>\n</ol>\n<pre><code class="hljs language-jsx" data-query="{}" data-lang="jsx"><span class="hljs-keyword">import</span> editable <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-mhoc/lib/editable\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'react-mhoc/lib/attrEditable/style.css\'</span>\n\n@editable({<span class="hljs-attr">groupName</span>: <span class="hljs-string">\'MyComponent\'</span>})\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    \n    <span class="hljs-keyword">static</span> defaultProps = {\n        <span class="hljs-attr">color</span>: <span class="hljs-string">\'red\'</span>\n    }\n    \n    <span class="hljs-keyword">static</span> propsDescription = {\n        <span class="hljs-attr">color</span>: <span class="hljs-string">\'我是文字的颜色配置\'</span>\n    }\n    \n    render() {\n        \n    }\n}</code></pre>\n<h2 id="对比"><a href="#%E5%AF%B9%E6%AF%94" aria-hidden="true"><span class="icon icon-link"></span></a>对比</h2>\n<h3 id="react-live-1"><a href="#react-live-1" aria-hidden="true"><span class="icon icon-link"></span></a>React-Live</h3>\n<h4 id="缺点"><a href="#%E7%BC%BA%E7%82%B9" aria-hidden="true"><span class="icon icon-link"></span></a>缺点</h4>\n<ol>\n<li>需要以字符串的形式，\b\b\b输入组件code，代码书写不友好。</li>\n<li>只能监控Props数据，对于state和其他自定义数据不能修改更新</li>\n</ol>\n<h4 id="优点"><a href="#%E4%BC%98%E7%82%B9" aria-hidden="true"><span class="icon icon-link"></span></a>优点</h4>\n<ol>\n<li>UI漂亮</li>\n<li>对程序员更友好</li>\n</ol>\n<h3 id="react-editable-1"><a href="#react-editable-1" aria-hidden="true"><span class="icon icon-link"></span></a>React-Editable</h3>\n<h4 id="缺点-1"><a href="#%E7%BC%BA%E7%82%B9-1" aria-hidden="true"><span class="icon icon-link"></span></a>缺点</h4>\n<ol>\n<li>UI有待美化</li>\n</ol>\n<h4 id="优点-1"><a href="#%E4%BC%98%E7%82%B9-1" aria-hidden="true"><span class="icon icon-link"></span></a>优点</h4>\n<ol>\n<li>修改更新Props/state和其他自定义数据</li>\n<li>自我维护，更新周期短</li>\n</ol>\n',extra:{}}}});