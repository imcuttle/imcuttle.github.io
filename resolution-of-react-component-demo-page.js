webpackJsonp([40,113],{1225:function(s,a){s.exports={content:'<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h2 id=为什么><a href=#%E4%B8%BA%E4%BB%80%E4%B9%88 aria-hidden=true><span class="icon icon-link"></span></a>为什么</h2><p>React组件化的开发思维，大大地缩减了我们的开发时间。 于此同时也带来了一些问题：</p><ol><li><p>大量组件的维护和兼容问题</p></li><li><p>对于组件的学习使用，需要组件Demo展示</p></li><li><p>...</p></li></ol><p>对于第二点问题，Demo 的书写可能不能够对组件覆盖全面 甚至需要深入查看组件源码才能明白配置项的功能</p><h2 id=解决方案><a href=#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88 aria-hidden=true><span class="icon icon-link"></span></a>解决方案</h2><h3 id=react-live><a href=#react-live aria-hidden=true><span class="icon icon-link"></span></a>React-Live</h3><p><a href=http://formidable.com/open-source/radium/>demo</a></p><h4 id=写法><a href=#%E5%86%99%E6%B3%95 aria-hidden=true><span class="icon icon-link"></span></a>写法</h4><pre><code class="hljs language-jsx"data-query={} data-lang=jsx><span class=hljs-keyword>import</span> {\n    LiveProvider,\n    LiveEditor,\n    LiveError,\n    LivePreview\n} <span class=hljs-keyword>from</span> <span class=hljs-string>\'react-live\'</span>\n<span class=hljs-keyword>import</span> Button <span class=hljs-keyword>from</span> <span class=hljs-string>\'./Button\'</span>\n<span class=hljs-keyword>import</span> {h, c} <span class=hljs-keyword>from</span> <span class=hljs-string>\'@befe/utils/wrapper/erp\'</span>\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>App</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Component</span> </span>{\n    render() {\n        <span class=hljs-keyword>return</span> (\n            <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>LiveProvider</span>\n                // 需要注入的数据\n                <span class=hljs-attr>scope</span>=<span class=hljs-string>{{</span>\n                    <span class=hljs-attr>h</span>,\n                    <span class=hljs-attr>type:</span> \'<span class=hljs-attr>primary</span>\',\n                    <span class=hljs-attr>Button</span>,\n                }}\n                <span class=hljs-attr>code</span>=<span class=hljs-string>{</span>`\n                    <span class=hljs-attr>h</span>(<span class=hljs-attr>Button</span>, {\n                        <span class=hljs-attr>type</span>,\n                        <span class=hljs-attr>loading:</span> <span class=hljs-attr>true</span>,\n                        <span class=hljs-attr>onClick:</span> (<span class=hljs-attr>e</span>) =></span> {console.log(\'click \')}\n                    }, type)\n                `}>\n                    </span>&lt;LiveEditor /><span class=xml>\n                    </span>&lt;LiveError /><span class=xml>\n                    </span>&lt;LivePreview /><span class=xml>\n                <span class=hljs-tag>&lt;/<span class=hljs-name>LiveProvider</span>></span></span>\n            )\n        )\n    }\n}</code></pre><h3 id=react-editable><a href=#react-editable aria-hidden=true><span class="icon icon-link"></span></a>React-Editable</h3><p>具体效果看视频</p><video src=http://obu9je6ng.bkt.clouddn.com/editable-preview.mp4 controls width=500 height=300><p>可以方便 “编辑” React 组件（包括 Props、State、甚至一些其他自定义数据） 并且视图进行同步更新</p><p>是不是很方便的就可以对一个组件进行深层次的剖析了！！</p><p><a href=https://m-cuttlefish.github.io/react-mhoc/page/>Demo点我</a></p><ul><li><p>参数</p><ul><li>groupName: string<br>编辑视图的组名(默认为组件名)</li><li>attrNames: Array<br>需要编辑的数据keyNames, props强制支持 (默认[\'state\'])</li></ul></li></ul><pre><code class="hljs language-jsx"data-query={} data-lang=jsx><span class=hljs-keyword>import</span> {editable} <span class=hljs-keyword>from</span> <span class=hljs-string>\'react-mhoc\'</span>\n\n@editable\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>MyComponent</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>React</span>.<span class=hljs-title>Component</span> </span>{\n    <span class=hljs-comment>// ....</span>\n\n    <span class=hljs-comment>// ref Api</span>\n    open() {}\n}\n\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>App</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>React</span>.<span class=hljs-title>Component</span> </span>{\n\n    componentDidMount() {\n        <span class=hljs-comment>// not existed open</span>\n        <span class=hljs-comment>// this.ref.open()</span>\n\n        <span class=hljs-comment>// ok</span>\n        <span class=hljs-keyword>this</span>.ref.comp.open()\n    }\n\n    render() {\n        &lt;MyComponent ref={r => <span class=hljs-keyword>this</span>.ref = r} />\n    }\n}</code></pre><h4 id=展望><a href=#%E5%B1%95%E6%9C%9B aria-hidden=true><span class="icon icon-link"></span></a>展望</h4><ol><li>后续可以定义数据（props/state/...）的描述信息，如</li></ol><pre><code class="hljs language-jsx"data-query={} data-lang=jsx><span class=hljs-keyword>import</span> editable <span class=hljs-keyword>from</span> <span class=hljs-string>\'react-mhoc/lib/editable\'</span>\n<span class=hljs-keyword>import</span> <span class=hljs-string>\'react-mhoc/lib/attrEditable/style.css\'</span>\n\n@editable({<span class=hljs-attr>groupName</span>: <span class=hljs-string>\'MyComponent\'</span>})\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Component</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>React</span>.<span class=hljs-title>Component</span> </span>{\n    \n    <span class=hljs-keyword>static</span> defaultProps = {\n        <span class=hljs-attr>color</span>: <span class=hljs-string>\'red\'</span>\n    }\n    \n    <span class=hljs-keyword>static</span> propsDescription = {\n        <span class=hljs-attr>color</span>: <span class=hljs-string>\'我是文字的颜色配置\'</span>\n    }\n    \n    render() {\n        \n    }\n}</code></pre><h2 id=对比><a href=#%E5%AF%B9%E6%AF%94 aria-hidden=true><span class="icon icon-link"></span></a>对比</h2><h3 id=react-live-1><a href=#react-live-1 aria-hidden=true><span class="icon icon-link"></span></a>React-Live</h3><h4 id=缺点><a href=#%E7%BC%BA%E7%82%B9 aria-hidden=true><span class="icon icon-link"></span></a>缺点</h4><ol><li>需要以字符串的形式，\b\b\b输入组件code，代码书写不友好。</li><li>只能监控Props数据，对于state和其他自定义数据不能修改更新</li></ol><h4 id=优点><a href=#%E4%BC%98%E7%82%B9 aria-hidden=true><span class="icon icon-link"></span></a>优点</h4><ol><li>UI漂亮</li><li>对程序员更友好</li></ol><h3 id=react-editable-1><a href=#react-editable-1 aria-hidden=true><span class="icon icon-link"></span></a>React-Editable</h3><h4 id=缺点-1><a href=#%E7%BC%BA%E7%82%B9-1 aria-hidden=true><span class="icon icon-link"></span></a>缺点</h4><ol><li>UI有待美化</li></ol><h4 id=优点-1><a href=#%E4%BC%98%E7%82%B9-1 aria-hidden=true><span class="icon icon-link"></span></a>优点</h4><ol><li>修改更新Props/state和其他自定义数据</li><li>自我维护，更新周期短</li></ol></video>',extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=resolution-of-react-component-demo-page.js.map