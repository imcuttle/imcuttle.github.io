webpackJsonp([40,90],{1023:function(s,n){s.exports={content:'<p><a href="https://face.moyuyc.xyz">毕设 👉 南师大刷脸签到系统 👉  face.moyuyc.xyz</a>\n<img src="https://ooo.0o0.ooo/2017/01/18/587eea50913fd.jpg" alt="" width="1200" height="627" /></p>\n<p>源码：<a href="https://github.com/moyuyc/graduation-project">graduation-project</a></p>\n<p>写该文是为了准备写毕业论文的材料，所以文字介绍较多，比较面向大众程序员。</p>\n<h1 id="任务概要（task-summary）"><a href="#%E4%BB%BB%E5%8A%A1%E6%A6%82%E8%A6%81%EF%BC%88task-summary%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>任务概要（Task Summary）</h1>\n<blockquote>\n<p>本刷脸系统主要分为学生签到、人脸录入、管理员模块。管理员模块，可以对学生的人脸样本，学生相信操作；该系统核心模块：学生签到，将动态监控摄像头，一旦识别出人脸便向服务器发出请求进行预处理 => 人脸检测 => 人脸比对。该系统将采用 Web 架构实现，前端使用react+redux+router+webpack技术栈，结构清晰，复用率高；后端将采用 nodejs+express 搭建服务器，C++ 实现核心人脸识别比对算法，通过 js 调用 C++ 核心算法；后续可以使用 electron 将前端界面打包成跨平台app，方便师生使用。</p>\n</blockquote>\n<h1 id="技术栈（technology-stack）"><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88%EF%BC%88technology-stack%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>技术栈（Technology Stack）</h1>\n<img src="https://ooo.0o0.ooo/2017/01/21/58826eb274d3a.jpg" alt="" width="900" height="496" />\n<p>下面进行一些较为粗略的介绍，蜻蜓点水说说涉及的技术</p>\n<h2 id="前端（front-end）"><a href="#%E5%89%8D%E7%AB%AF%EF%BC%88front-end%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>前端（Front-End）</h2>\n<ol>\n<li>\n<p>单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。 浏览器一开始会加载必需的HTML、CSS和JavaScript，所有的操作都在这张页面上完成，都由 JavaScript 来控制。因此，对单页应用来说模块化的开发和设计显得相当重要。\n<img src="https://ooo.0o0.ooo/2017/01/22/5884d672c4710.jpg" alt="" width="550" height="609" /></p>\n</li>\n<li>\n<p>使用主流 <a href="https://webpack.github.io/">Webpack</a> 构建，进行前端模块自动化管理。</p>\n</li>\n</ol>\n<img src="https://ooo.0o0.ooo/2017/01/22/5884d5ba0680b.jpg" alt="" width="2598" height="1299" />\n<ol start="3">\n<li>\n<p>使用Facebook提出的 <a href="https://facebook.github.io/react/">React</a> 进行作为 View， 将 HTML DOM 进行上层抽象，提出 Virtual DOM 概念，一套理念，实现了Server render, Web UI, mobile UI 的统一。  Learn Once, Write Anywhere\n<img src="https://ooo.0o0.ooo/2017/01/23/5884d71e7ed1d.jpg" alt="ClipboardImage" width="623" height="396" /></p>\n</li>\n<li>\n<p><a href="https://github.com/reactjs/redux">Redux</a>，随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state (状态)，state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰, Redux则是为了解决该痛点而产生。</p>\n</li>\n<li>\n<p><a href="https://github.com/ReactTraining/react-router">React Router</a> 是一个基于 React 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，既保证了单页应用的畅快，同时保持页面与 URL 间的同步。\n<img src="https://ooo.0o0.ooo/2017/01/23/5884d88d62dd5.jpg" alt="" width="622" height="341" /></p>\n</li>\n<li>\n<p>*<a href="https://babeljs.io/">Babel</a> => 使用 JavaScript 实现的编译器，正如官网所说的那样 Use next generation JavaScript, today.\n，可以利用 Babel 书写最新的 JavasScript 语法标准，如 ECMAScript 6 ，搭配 Webpack 使用更佳。</p>\n</li>\n<li>\n<p>*<a href="http://es6-features.org/">ECMAScript6</a> => 2015 年提出的JavaScript标准，目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。ES 6 具有一系列简明的语法糖，更佳的书写体验。但为了保证浏览器, Node 环境兼容性，往往配合 Babel 书写。</p>\n</li>\n<li>\n<p>*less => 一种 CSS 预处理语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。</p>\n</li>\n<li>\n<p>使用 HTML5 的 getUserMedia 方法，调用计算机音频视频等硬件设备。为了安全问题，Chrome 只能在本地地址上调用该方法，外网地址则只能在通过证书检测的 HTTPS 服务中调用。</p>\n</li>\n</ol>\n<h2 id="后端（back-end）"><a href="#%E5%90%8E%E7%AB%AF%EF%BC%88back-end%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>后端（Back-End）</h2>\n<ol>\n<li>采用 <a href="https://nodejs.org/">nodeJs</a> 作为后端，采用 JavaScript 脚本语言开发。 nodeJs 具有异步事件驱动、非阻塞（non-blocking）IO 特性，采用 Google 的 V8 引擎来执行代码。</li>\n<li>Node.js以单线程运行，使用非阻塞I/O调用，这样既可以支持数以万计的并发连接，又不会因多线程本身的特点而带来麻烦。众多请求只使用单线程的设计意味着可以用于创建高并发应用程序。Node.js应用程序的设计目标是任何需要操作I/O的函数都使用回调函数。\n这种设计的缺点是，如果不使用cluster、StrongLoop Process Manager或pm2等模块，Node.js就难以处理多核或多线程等情况。</li>\n<li>pm2 => <a href="https://segmentfault.com/a/1190000004621734">https://segmentfault.com/a/1190000004621734</a></li>\n<li>isomorphic render（同构渲染）=> 指的是前后端使用同一份代码。前端通过 Webpack 实现 CommonJs 的模块规范（Node亦是 CommonJs ）+ React 提出的 JSX ，使得 NodeJs 通过解析请求的 URL，适配 react-router 中的前端路由规则，得到 routing Props，还可以 dispatch(action) 同步或异步（一般是 isomorphic-fetch ），又或是直接读取数据，从而更新 store ，最后 nodeJs 通过 store 中的 state 渲染 JSX ，产生静态的 HTML，从而实现了前后端的同构渲染。\n<img src="https://ooo.0o0.ooo/2017/01/23/5884dc559b020.jpg" alt="isomorphic render" width="640" height="400" />\n<img src="https://ooo.0o0.ooo/2017/01/29/588d9b8393522.jpg" alt="isomorphic render" width="610" height="412" /></li>\n<li><a href="https://nodejs.org/api/addons.html">nodeJs C++ Addons</a>，nodeJs 就是使用C++语言实现的，图像处理最强大的库 opencv 便是用 C++ 实现的，这就不得不需要 nodeJs 与 C++ 之前通信，通过 nodeJs 调用 opencv 的方法，<a href="https://github.com/peterbraden/node-opencv">node-opencv</a> 便是利用 <a href="https://github.com/nodejs/nan">nan</a> （解决平台间兼容性问题，将异步事件驱动封装）与 <a href="https://github.com/v8/v8">v8</a> （javascript 对应的数据类型与 C++映射） ，通过 <a href="https://github.com/nodejs/node-gyp">node-gyp</a> 工具，将 C++ 打包成 一个动态链接库 *.node，通过 require 即可调用。</li>\n<li><a href="https://github.com/mysqljs/mysql">node-mysql</a> ，由于 NodeJs 具有 non-blocking IO 与异步事件驱动的特性，所以很适合于 IO 密集型高并发业务，而访问数据库正是常用的 IO 操作。</li>\n<li>NPM（全称Node Package Manager，即node包管理器），是Node预设的，通过国内 taobao 镜像可以加快下载速度。</li>\n<li><a href="http://expressjs.com/zh-cn/">Express</a>（Node.js Web 应用程序框架），很方便的定义 restful api.</li>\n<li>Spider，网络爬虫，通过转发客户端的 HTTP 或 HTTPs 请求，得到远程服务器的响应数据，然后再一次转发至客户端中，也就是代理的意思\n<img src="https://ooo.0o0.ooo/2017/01/21/5882d1cb76d12.jpg" alt="" width="699" height="146" />\n关于<a href="http://njnu.chaiziyi.com.cn/">南师大的一些 API</a> ，已经有前人用 Python 写过了，爬取教务系统数据，然后我只需要爬取对应的网站即可。</li>\n<li>nginx，使用 C++ 实现的 Web 服务器，通过简单的配置就可以反向代理至正确的端口和应用层协议。</li>\n<li>由于浏览器安全性的考虑，对于外网地址使用摄像头需要在安全的HTTPs协议下，因此需要付费或免费地得到认可的证书，通过 nginx 配置，反向代理至 Node 进程即可。</li>\n</ol>\n<h2 id="其他（other）"><a href="#%E5%85%B6%E4%BB%96%EF%BC%88other%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>其他（Other）</h2>\n<ol>\n<li>git 是用于 Linux 内核开发的版本控制工具。与 CVS、Subversion 一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。 git 的速度很快，这对于诸如 Linux 内核这样的大项目来说自然很重要。git 最为出色的是它的合并追踪（merge tracing）能力。</li>\n<li>GitHub 是一个通过 Git 进行版本控制的软件源代码托管服务，是全球最大的代码存放网站和开源社区。</li>\n<li>特征脸（Eigenface）是指用于机器视觉领域中的人脸识别问题的一组特征向量。这些特征向量是从高维矢量空间的人脸图像的协方差矩阵计算而来。一组特征脸 可以通过在一大组描述不同人脸的图像上进行主成分分析（PCA）获得。任意一张人脸图像都可以被认为是这些标准脸的组合。另外，由于人脸是通过一系列向量（每个特征脸一个比例值）而不是数字图像进行保存，可以节省很多存储空间。</li>\n<li>主成分分析（Principal components analysis，PCA）是一种分析、简化数据集的技术。主成分分析经常用于减少数据集的维数，同时保持数据集中的对方差贡献最大的特征。这是通过保留低阶主成分，忽略高阶主成分做到的。这样低阶成分往往能够保留住数据的最重要方面。</li>\n<li>OpenCV的全称是Open Source Computer Vision Library，是一个跨平台的计算机视觉库。OpenCV用C++语言编写，它的主要接口也是C++语言。</li>\n</ol>\n<h1 id="涉及知识（knowledage-involved）"><a href="#%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%EF%BC%88knowledage-involved%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>涉及知识（Knowledage Involved）</h1>\n<ol>\n<li>javascript / react / redux / react-router / webpack / less / node / babel / es6 / tracking.js / isomorphic / promise</li>\n<li>http / https / express / mysql</li>\n<li>opencv / Eigenfaces FaceRecognizer / node addons 降维、特征提取、特征比对</li>\n<li>homebrew / curl / bash script / electron / cross-env / npm script / screen command / pm2 / nginx / git / seo</li>\n<li>搜索引擎优化（search engine optimization，SEO），是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。所谓“针对搜索引擎作最优化的处理”，是指为了要让网站更容易被搜索引擎接受。</li>\n</ol>\n<p>不仅仅局限与以上。以上工具、理论、技术可能只是项目简单地使用，或是学习过程中触碰过而已。</p>\n<h1 id="学习记录（learning-record）"><a href="#%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88learning-record%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>学习记录（Learning Record）</h1>\n<h2 id="2016年12月9日"><a href="#2016%E5%B9%B412%E6%9C%889%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月9日</h2>\n<ol>\n<li>初步确定课题：基于南师大本科生学生照片，进行人脸识别+特征提取+人脸相似度对比，判断输入人物图片是否存在于库中。若时间允许，精力有余，考虑加上声音比对，提高识别正确率。</li>\n<li>成功下载南师大本科生照片，代码见<code>gp-image-download</code>文件夹，使用bash脚本+node实现，可以方便的跨平台。</li>\n</ol>\n<h2 id="2016年12月10日"><a href="#2016%E5%B9%B412%E6%9C%8810%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月10日</h2>\n<p>初步了解人脸识别检测。\n产生怀疑：\n1. 纯粹自己实现系列识别，特征提取，模式匹配等等。仅是识别算法理论，需要的数学功底较复杂...数学已经丢的差不多了..进度缓慢，无法入手，恐怕较难完成。\n2. 调用opencv接口或者调用网上api，恐怕工作量不够(应用交互设计完备点？)\n3. 换个课题？备选moka(1)或者iNjnu App(2)</p>\n<h2 id="2016年12月11日"><a href="#2016%E5%B9%B412%E6%9C%8811%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月11日</h2>\n<ol>\n<li>\n<p>搭建学生签到系统开发环境，采用<code>react + redux + react-router + webpack</code>技术栈，利用web前端技术实现界面，后续可以使用<code>electron</code>打包为跨平台app</p>\n</li>\n<li>\n<p>注册<code>face++</code>账号，打算采用第三方人脸识别比对api</p>\n</li>\n</ol>\n<h2 id="2016年12月12日"><a href="#2016%E5%B9%B412%E6%9C%8812%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月12日</h2>\n<ol>\n<li>\n<p>初步开发前端页面+后端服务(node express), 前后端分离</p>\n</li>\n<li>\n<p>使用<code>Sublime</code>编辑器，默认缩进为<code>Tab</code>，书写脚本<code>updateIndent.js</code>，批量修改<code>Tab</code>为四空格</p>\n</li>\n<li>\n<p>课题确定，《南师大学生刷脸签到系统》\n对于人脸识别+比对方面实现，初步考虑3个解决方案：</p>\n</li>\n<li>\n<p>人脸识别+比对算法完全自己实现。</p>\n</li>\n<li>\n<p>调用opencv人脸识别api + 自己实现人脸比对算法。</p>\n</li>\n<li>\n<p>调用网上较成熟的人脸识别+人脸比对接口，如Face++。\n以上三种解决方案工作量递减（或者工作量可以在系统功能完备性方面体现），但是识别比对准确率递增。</p>\n</li>\n</ol>\n<p>不知道老师对以上三种方案有什么看法。\n如果采用1或2，本人不知道应该看什么相关书籍入门(数学已经丢的差不多了，非考研党)，以及所用时间和最终效果都可能不尽人意。</p>\n<p>还有一个问题：面向学生的教务系统好像没有输入课程号，教师ID，输出全部选课学生ID的接口。或者在面向教师的教务系统才有提供，但我没有教师账号密码，不能自己爬取。不知道我应该联系谁，才可以提供该接口。</p>\n<ol start="4">\n<li><a href="http://urp.njnu.edu.cn/authorizeUsers.portal?start=0&#x26;limit=100&#x26;term=191301">获取学号接口</a></li>\n<li>根据爬取的学生照片，创建数据库stu(id, audio), sign(id, time, stu_id); 班级的判断，通过已经得到ids.txt前6位得到（去掉非纯数字的，位数不同的）</li>\n<li>构思管理员入口 => 登录(判断是否已经登录) => 查看学生信息(根据学号，姓名，班级号) + 签到信息查看 </li>\n</ol>\n<h2 id="2016年12月13日"><a href="#2016%E5%B9%B412%E6%9C%8813%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月13日</h2>\n<ol>\n<li>重拾数学\n<a href="https://zh.wikipedia.org/wiki/%E7%A7%AF%E5%88%86">积分</a> <a href="https://zh.wikipedia.org/wiki/%E6%96%B9%E5%B7%AE">方差</a> <a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E6%96%B9%E5%B7%AE">协方差</a>\n[统计独立] 矩阵 <a href="http://blog.csdn.net/itplus/article/details/11452743">协方差矩阵*(写得好)</a></li>\n<li>方差描述的是它的离散程度，也就是该变量离其期望值的距离。</li>\n<li>协方差表示的是两个变量的总体的误差，这与只表示一个变量误差的方差不同。 如果两个变量的变化趋势一致，也就是说如果其中一个大于自身的期望值，另外一个也大于自身的期望值，那么两个变量之间的协方差就是正值。 如果两个变量的变化趋势相反，即其中一个大于自身的期望值，另外一个却小于自身的期望值，那么两个变量之间的协方差就是负值。</li>\n<li><a href="https://trackingjs.com/bower/tracking.js/examples/face_camera.html">face_camera</a> （Js人脸检测插件，去掉手动拍照，监控摄像头识别人脸，可以根据searching和是否有人脸进行对比操作，只发送多个人脸部分图像）<strong>看下源码，学习识别算法</strong></li>\n</ol>\n<h2 id="2016年12月14日"><a href="#2016%E5%B9%B412%E6%9C%8814%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月14日</h2>\n<ol>\n<li>\n<p>opencv install:  </p>\n<pre><code data-query="{}" data-lang="">brew tap homebrew/science\nbrew install opencv\n</code></pre>\n<p><a href="https://www.learnopencv.com/install-opencv-3-on-yosemite-osx-10-10-x/">install-opencv-3-on-yosemite-osx-10-10-x</a>\n<a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html">linux_install</a>\n<a href="http://www.pyimagesearch.com/2015/06/15/install-opencv-3-0-and-python-2-7-on-osx/">install-opencv-3-0-and-python-2-7-on-osx</a></p>\n</li>\n<li>\n<p><a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake.html">添加opencv依赖</a></p>\n</li>\n<li>\n<p>brew更改源\n替换formula 索引的镜像（即 brew update 时所更新内容）</p>\n<pre><code data-query="{}" data-lang="">cd "$(brew --repo)"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\n\ncd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"\ngit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\n\nbrew update\n</code></pre>\n<p>替换Homebrew 二进制预编译包的镜像</p>\n<pre><code data-query="{}" data-lang="">echo \'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\' >> ~/.bash_profile\nsource ~/.bash_profile\n</code></pre>\n</li>\n<li>\n<p><a href="https://github.com/peterbraden/node-opencv">node-opencv</a><br>\n<a href="https://github.com/peterbraden/node-opencv/issues/380#issuecomment-191492421">Issue</a></p>\n</li>\n</ol>\n<h2 id="2016年12月16日"><a href="#2016%E5%B9%B412%E6%9C%8816%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月16日</h2>\n<ol>\n<li>使用node-opencv检测人脸，挑选出效果相对好的分类模板<code>lbpcascade_frontalface.xml</code>, 对比效果数据见<code>backend/data/summary.json</code></li>\n<li>死嚼PCA理论<a href="http://blog.csdn.net/itplus/article/details/11451327">1</a>, <a href="http://blog.csdn.net/liulina603/article/details/7912950">2</a></li>\n</ol>\n<h2 id="2016年12月18日"><a href="#2016%E5%B9%B412%E6%9C%8818%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2016年12月18日</h2>\n<ol>\n<li><a href="http://www.freeformatter.com/xml-to-json-converter.html">人脸检测模式匹配数据xml2json</a>(需VPN)</li>\n<li>发现人脸识别效果不佳，分析原因， 第一，样本每个人只有一张 ，第二，几年下来，人的变化比较大。</li>\n<li>新增样本输入模块，学生自主输入删除样本。（需要重新训练，存储）</li>\n<li>采用opencv Eigenfaces 人脸识别算法</li>\n</ol>\n<h2 id="2017年1月11日"><a href="#2017%E5%B9%B41%E6%9C%8811%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月11日</h2>\n<p><code>image-download</code>去除对<code>wget</code>依赖，改用<code>curl</code>指令下载</p>\n<h2 id="2017年1月16日"><a href="#2017%E5%B9%B41%E6%9C%8816%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月16日</h2>\n<ol>\n<li>\n<p><code>/usr/local/bin/mysql.server start</code> 启动mysql</p>\n</li>\n<li>\n<p>开始<code>mysql</code>数据库设计: <code>face_import table</code>, 书写DAO代码</p>\n</li>\n<li>\n<p>简化部分业务逻辑，删除非必须输入情况(本地图片，网络图片)</p>\n</li>\n<li>\n<p>考虑到数据的迁移简便和服务器负载，使用<code>sm.ms</code>免费图床，存储用户导入的人脸图片</p>\n</li>\n<li>\n<p>完成100%人脸录入逻辑。TODO: 每次启动服务器需要读取数据库，得到smms图片数据，进行训练。（为了保证Dev环境启动速度，暂时不做）</p>\n</li>\n<li>\n<p>引入<code>cross-env</code>：跨平台设置环境变量NPM包, 区分Dev(父进程监听js文件改动，改动后则重启服务器)与Production环境</p>\n</li>\n</ol>\n<h2 id="2017年1月17日"><a href="#2017%E5%B9%B41%E6%9C%8817%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月17日</h2>\n<ol>\n<li>\n<p>改善训练样本方法，加上了smms外链的图片训练(一大串Promise)</p>\n</li>\n<li>\n<p>完成前后端分离的管理员登录状态控制(本地存储+md5编码)，完成管理员样本查看功能。</p>\n</li>\n</ol>\n<h2 id="2017年1月18日"><a href="#2017%E5%B9%B41%E6%9C%8818%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月18日</h2>\n<ol>\n<li>完成每次启动服务器需要读取数据库，得到smms图片数据，进行训练。</li>\n<li>完成删除/添加人脸样本，重新训练逻辑(异步，不保证实时性)。</li>\n<li>对于学生证照，<code>lbpcascade_frontalface, scale=1.95左右</code>人脸检测效果较好</li>\n<li><a href="http://stackoverflow.com/questions/13652778/what-is-confidence-in-opencvs-facerecognizer">distance convert to precentage</a></li>\n<li>confidence&#x3C;?, 认为是正确</li>\n<li>整体大致已经完成，阈值的确定尚未完成</li>\n<li><a href="https://coderwall.com/p/h6yfda/use-and-to-jump-forwards-backwards-words-in-iterm-2-on-os-x">iterm2, 快捷键设置(useful!)</a></li>\n</ol>\n<h2 id="2017年1月19日"><a href="#2017%E5%B9%B41%E6%9C%8819%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月19日</h2>\n<ol>\n<li>Server读取app代码时，node_module回环加载，出现错误，修改成只使用最外层node_modules</li>\n<li>react Server端渲染，require() 样式文件的解决方法？(ignore, only无效)</li>\n<li>\n<p>HTTPs才能使用摄像头，因此搞了个免费证书，配置下nginx</p>\n<ul>\n<li><a href="%E5%80%BC%E5%BE%97%E7%BB%86%E5%9A%BC">https://aotu.io/notes/2016/08/16/nginx-https/</a></li>\n<li><a href="%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6">https://www.zhihu.com/question/19578422</a></li>\n<li><a href="http://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom">http://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom</a></li>\n</ul>\n</li>\n<li>\n<p>mac迁移到ubuntu一系列的问题</p>\n<ol>\n<li><a href="http://stackoverflow.com/questions/12335848/opencv-program-compile-error-libopencv-core-so-2-4-cannot-open-shared-object-f">http://stackoverflow.com/questions/12335848/opencv-program-compile-error-libopencv-core-so-2-4-cannot-open-shared-object-f</a></li>\n<li>unix平台的快速安装脚本=> <code>start.sh</code></li>\n</ol>\n</li>\n<li><a href="https://github.com/jiahaog/nativefier">nativefier</a> => 站点打包成App解决方案, <code>ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</code></li>\n<li>app:packager scripts</li>\n</ol>\n<pre><code data-query="{}" data-lang="">"app:mac64": "set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -a x64 -p mac --name \\"南师大刷脸签到\\" \\"https://face.moyuyc.xyz/\\" -i logos/logo.icns --disable-dev-tools --disable-context-menu",\n"app:mac32": "set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -a ia32 -p mac --name \\"南师大刷脸签到\\" \\"https://face.moyuyc.xyz/\\" -i logos/logo.icns --disable-dev-tools --disable-context-menu",\n"app:win32": "set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -p win32 -a x64 --name \\"南师大刷脸签到\\" \\"https://face.moyuyc.xyz/\\" -i logos/logo.png --disable-dev-tools --disable-context-menu",\n"app:win64": "set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -p win32 -a ia32 --name \\"南师大刷脸签到\\" \\"https://face.moyuyc.xyz/\\" -i logos/logo.png --disable-dev-tools --disable-context-menu"\n</code></pre>\n<h2 id="2017年1月20日"><a href="#2017%E5%B9%B41%E6%9C%8820%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月20日</h2>\n<ol>\n<li>同构渲染(优化seo+首屏渲染) <a href="http://www.aliued.com/?p=3077">css module打包的解决方案</a>, <a href="https://github.com/halt-hammerzeit/webpack-isomorphic-tools">webpack-isomorphic-tools</a></li>\n<li><a href="https://github.com/chenzhiwei/linux/tree/master/screen">远端发布 screen指令</a></li>\n</ol>\n<h2 id="2017年1月21日"><a href="#2017%E5%B9%B41%E6%9C%8821%E6%97%A5" aria-hidden="true"><span class="icon icon-link"></span></a>2017年1月21日</h2>\n<ol>\n<li>google+baidu 收录，添加 robots.txt 与 sitemap.txt，如今在google下搜索 <code>南京师范大学 刷脸</code> 即可</li>\n</ol>\n<h1 id="系统剖析（system-analysis）"><a href="#%E7%B3%BB%E7%BB%9F%E5%89%96%E6%9E%90%EF%BC%88system-analysis%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>系统剖析（System Analysis）</h1>\n<p>源码地址：<a href="https://github.com/moyuyc/graduation-project">Graduation-Project</a></p>\n<h2 id="文件结构（directory-tree）"><a href="#%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%EF%BC%88directory-tree%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>文件结构（Directory Tree）</h2>\n<p>顶层文件结构如下</p>\n<pre><code data-query="{}" data-lang="">Graduation-Project/\n├── desktop/\n├── gp-image-download/\n├── gp-njnu-photos-app/\n└── gp-njnu-photos-backend/\n</code></pre>\n<p><code>desktop/</code> 中放的是将站点打包成 PC Desktop 的 Logo，<code>logo.icns</code> 用在 osx 系统中，<code>logo.png</code> 则用于 linux 与 windows 系统中，打包成的 PC Desktop 默认也是放在该文件夹下。</p>\n<pre><code data-query="{}" data-lang="">desktop/\n└── logos/\n    ├── logo.icns\n    ├── logo.ico\n    └── logo.png \n</code></pre>\n<p><code>gp-image-download/</code> 文件夹里面放的是将教务系统的学生图片下载至该文件夹中，其中的 <code>data/</code> 文件夹放的是各年入学的学生的学号（部分学号不正确），数据是 <code>get-all-id.js</code> 脚本得到，具体工作细节在后面会说到。保证获取到各年的学生学号集后，通过 <code>download.sh</code> Bash 脚本即可进行下载；下载的图片放在 <code>images/</code> 中。</p>\n<pre><code data-query="{}" data-lang="">gp-image-download/\n├── data/\n│   └── ...\n├── download.sh\n├── get-all-id.js\n├── images/\n│   └── ...\n└── lib/\n    └── get-all-id.js\n</code></pre>\n<p><code>gp-njnu-photos-app/</code> 放的是前端代码，<code>app/</code> 是开发用的源码，<code>build/</code> 是用 Webpack 打包的压缩后的发布资源，包括 <code>css/js/html/image...</code></p>\n<pre><code data-query="{}" data-lang="">gp-njnu-photos-app/\n├── app/\n│   └── ...\n├── build/\n│   └── ...\n├── index.js\n├── package.json\n├── webpack-assets.json\n└── webpack.config.js\n</code></pre>\n<p><code>gp-njnu-photos-backend/</code> 放的是后端的全部代码。  </p>\n<ul>\n<li><code>cpptest/</code> c++ opencv 的一些测试  </li>\n<li><code>test/</code> nodejs 调用 opencv 接口的例子  </li>\n<li><code>data/</code> 放些人脸 xml 模板数据，服务器运行时生成的缓存数据，预处理后的学生照片，上一次保存的训练数据。  </li>\n<li><code>database/</code> 访问 mysql 的 JS 接口</li>\n<li><code>lib/</code> 一些通用的 JS 方法，比如爬虫接口，图片上传接口...  </li>\n<li><code>opencv/</code> 搭建 nodejs 与 C++ 桥梁的源码与产生的链接库</li>\n<li><code>pretreat</code> 一些预处理接口，如人脸检测，图片灰化处理，样本数据的训练...</li>\n<li><code>routes</code> express 的路由控制文件</li>\n<li><code>ssl</code> HTTPs 证书与密钥</li>\n<li><code>server.js</code> HTTP 服务入口</li>\n<li><code>index.js</code> 在调用 <code>server.js</code> 之前，获取前端数据，使得后端能够处理静态资源（image/css/...），为前后端公用一套代码提供解决方案。（一般在线上环境使用）</li>\n<li><code>provider.js</code> 创建子进程 <code>server.js</code>，同时监听后端开发目录代码的改动，一旦改动便杀死上一个子进程，并且再次创建子进程 <code>server.js</code>，可以实现后端代码的<strong><em>热更新</em></strong>。（一般在开发环境使用）</li>\n</ul>\n<pre><code data-query="{}" data-lang="">gp-njnu-photos-backend/\n├── cpptest/\n│   └── ...\n├── test/\n│   └── ...\n├── data/\n│   └── ...\n├── database/\n│   └── ...\n├── lib/\n│   └── ...\n├── opencv/\n│   └── ...\n├── pretreat/\n│   └── ...\n├── routes/\n│   └── ...\n├── ssl/\n│   └── ...\n├── index.js\n├── package.json\n├── provider.js\n└── server.js\n</code></pre>\n<h2 id="过程（learning-process）"><a href="#%E8%BF%87%E7%A8%8B%EF%BC%88learning-process%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>过程（Learning Process）</h2>\n<h3 id="学生照片下载"><a href="#%E5%AD%A6%E7%94%9F%E7%85%A7%E7%89%87%E4%B8%8B%E8%BD%BD" aria-hidden="true"><span class="icon icon-link"></span></a>学生照片下载</h3>\n<p>下载证件照就需要图片的 URL，在<a href="http://blog.chaiziyi.com.cn/2016/06/03/%E5%88%A9%E7%94%A8Python%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E7%BD%91%E7%AB%99%E4%B8%8A%E7%9A%84%E8%AF%81%E4%BB%B6%E7%85%A7%EF%BC%88%E5%9B%9B%EF%BC%89/">利用Python爬取学校网站上的证件照</a>一文中，说到了教务处的学生证 URL 规则是 <code>http://${hostname}/jwgl/photos/rx${year}/${studentno}.jpg</code> ，<code>hostname</code>就是教务系统的主机地址，<code>year</code>就是入年份，<code>studentno</code>是学生学号，比如某学生学号是<code>19140429</code>，其中学号的3-4位表示入学年份，表示学生是 2014 年入学，那么他的学生证 URL 就是 <code>http://223.2.10.123/jwgl/photos/rx2014/19140429</code>；  </p>\n<p>知道了学生照的 URL 规则后，那么怎么得到各个学年入学的学生学号集合呢？\n如果用穷举法，学号一共有 8 位，每位有 0-9 10 种可能，那么得到每一年的学生照片就需要 LOOP 10^8 次，这种级别的时间复杂度是不可接受的。于是通过查阅，搜索找到了\n<a href="http://blog.chaiziyi.com.cn/2016/06/13/%E5%88%A9%E7%94%A8Python%E8%BF%87%E6%BB%A4%E6%9C%89%E7%94%A8%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%B4%A6%E5%8F%B7/">获取南师大学号</a>，里面提到了获取学号的接口<code>http://urp.njnu.edu.cn/authorizeUsers.portal?limit=100&#x26;term=191301</code>，<code>term</code> 表示搜索关键字，可以是 <code>1913/191301/...</code> 将会返回学号中含有其字符串的数据，limit则是数据数最大限制，通过这个接口便可以得到学号集合</p>\n<p>最后便是学生照片下载的代码书写了。\n采用的是 Bash Script 书写，具有较强的易用性，不需要复杂的平台、环境依赖。第一版是使用 <code>wget</code> 指令进行下载，但是该指令在 <code>windows/osx</code> 需要额外安装，所以最后改成了 <code>curl</code>。</p>\n<img src="https://ooo.0o0.ooo/2017/01/22/5884923dd9155.jpg" alt="" width="770" height="436" />\n<img src="https://ooo.0o0.ooo/2017/01/22/5884926960c79.jpg" alt="" width="770" height="436" />\n<h3 id="人脸识别理论学习"><a href="#%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0" aria-hidden="true"><span class="icon icon-link"></span></a>人脸识别理论学习</h3>\n<p>人脸识别实际包括构建人脸识别系统的一系列相关技术，包括人脸图像采集、人脸定位、人脸识别预处理、身份确认以及身份查找等。上一步已经完成了人脸的采集；  人脸定位也就是人脸的检测，在一张图片中，找出人脸的位置。通过一些特征提取的方法，如<a href="http://www.voidcn.com/blog/jscese/article/p-6250381.html">HOG特征，LBP特征，Haar特征</a>，<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/doc/user_guide/ug_traincascade.html">训练</a>得到级联分类器，分类器对图像的任意位置和任意尺寸的部分(通常是正方形或长方形)进行分类，判定是或不是人脸。opencv源码中提供了一些<a href="https://github.com/opencv/opencv/tree/master/data">常用的分类器</a>（XML）。人脸识别预处理也就是对图像进行灰化，人脸检测，得到统一大小的人脸图片；然后便是识别了，对样本训练<a href="https://zh.wikipedia.org/wiki/%E7%89%B9%E5%BE%81%E8%84%B8#.E7.94.9F.E6.88.90.E7.89.B9.E5.BE.81.E8.84.B8">生成特征脸</a>后，对于输入的人脸进行预处理后，得到其<a href="http://blog.csdn.net/smartempire/article/details/21406005">特征脸权重向量</a>，计算向量距离，找到最小距离的样本人脸。</p>\n<p>可以看到特征脸的生成是需要整个样本数据的，所以如果用户修改了样本数据，需要对全部样本重新训练，得到一组全新的特征脸。</p>\n<h3 id="opencv-环境安装"><a href="#opencv-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85" aria-hidden="true"><span class="icon icon-link"></span></a>opencv 环境安装</h3>\n<p>由于开发平台是 OSX ，而 OSX 有 Homebrew 神器</p>\n<pre><code class="hljs language-bash" data-query="{}" data-lang="bash"><span class="hljs-comment"># 安装 Homebrew</span>\n/usr/bin/ruby -e <span class="hljs-string">"<span class="hljs-variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span>\n\n<span class="hljs-comment"># 设置 Homebrew镜像代理，国内下载加速</span>\n<span class="hljs-built_in">cd</span> <span class="hljs-string">"<span class="hljs-variable">$(brew --repo)</span>"</span>\ngit remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git\n<span class="hljs-built_in">cd</span> <span class="hljs-string">"<span class="hljs-variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span>\ngit remote <span class="hljs-built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git\nbrew update\n<span class="hljs-built_in">echo</span> <span class="hljs-string">\'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\'</span> >> ~/.bash_profile\n<span class="hljs-built_in">source</span> ~/.bash_profile\n\n<span class="hljs-comment"># 安装 opencv</span>\nbrew tap homebrew/science\nbrew install opencv</code></pre>\n<h3 id="node-addons"><a href="#node-addons" aria-hidden="true"><span class="icon icon-link"></span></a>node addons</h3>\n<p>node addons 是在 node 环境调用 C 系列接口的方法，已经有人用该方法写过 <a href="https://github.com/peterbraden/node-opencv"><code>node-opencv</code></a>，并在此基础上我还加上了 <code>CircleLBP</code> <code>RectLBP</code> <code>ToThreeChannels</code> <code>PCA</code> 算法，<code>ToThreeChannels</code> 是将 单通道（灰）或者 RGBA 通道变成 RGB 通道。</p>\n<pre><code class="hljs language-cpp" data-query="{}" data-lang="cpp">NAN_METHOD(Matrix::ToThreeChannels) {\n  Nan::HandleScope scope;\n  Matrix *self = Nan::ObjectWrap::Unwrap&#x3C;Matrix>(info.This());\n  cv::Mat image;\n\n  <span class="hljs-keyword">if</span> (self->mat.channels() == <span class="hljs-number">3</span>) {\n    image = self->mat;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (self->mat.channels() == <span class="hljs-number">1</span>) {\n    cv::Mat myimg = self->mat;\n    cv::cvtColor(myimg, image, CV_GRAY2RGB);\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(self->mat.channels() == <span class="hljs-number">4</span>){\n    cv::Mat myimg = self->mat;\n    cv::cvtColor(myimg, image, CV_BGRA2RGB);\n  } <span class="hljs-keyword">else</span> {\n    Nan::ThrowError(<span class="hljs-string">"those channels are not supported"</span>);\n  }\n\n  self->mat = image;\n  info.GetReturnValue().Set(Nan::Null());\n}</code></pre>\n<h3 id="图片预处理（人脸检测）"><a href="#%E5%9B%BE%E7%89%87%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%88%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>图片预处理（人脸检测...）</h3>\n<p>通道统一 => 灰化 => 级联分类器检测人脸 => 人脸尺寸统一 => 保存</p>\n<p>经过多次尝试后，对于学生证件照，最终比较得出，采用 LBP 级联分类器，窗口放大 1.95 倍左右效果较好。（测试数据在 <code>backend/data/summary.json</code>）</p>\n<img src="https://ooo.0o0.ooo/2017/01/22/5884929797559.jpg" alt="" width="770" height="436" />\n<img src="https://ooo.0o0.ooo/2017/01/22/588492ae5471e.jpg" alt="" width="770" height="436" />\n<h3 id="识别算法测试与确定"><a href="#%E8%AF%86%E5%88%AB%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%E4%B8%8E%E7%A1%AE%E5%AE%9A" aria-hidden="true"><span class="icon icon-link"></span></a>识别算法测试与确定</h3>\n<p>比较 opencv 中三种人脸识别算法，Eigen、Fisher、LBPH。数据在<code>backend/cpptest/</code> 中</p>\n<table border="0">\n　<caption><em>opencv 人脸识别算法比较</em></caption>\n　<tr>\n　<th rowspan="2" style="text-align: center;">算法/时间(ms)</th>\n　<th colspan="2">实验1</th>\n　<th colspan="2">实验2</th>\n　<th colspan="2">实验3</th>\n　<th colspan="2">实验4</th>\n　<th colspan="2">实验5</th>\n　<tr>\n　<td>训练<td>预测<td>训练<td>预测<td>训练<td>预测<td>训练<td>预测<td>训练<td>预测</td>\n　<tr><th>Eigen<td>0.030648<td>0.010711<td>0.025524<td>0.011132<td>0.029332<td>0.007791<td>0.036231<td>0.020043<td>0.026972<td>0.005711</td>\n　<tr><th>Fisher<td>0.040043<td>0.0089<td>0.039244<td>0.007145<td>0.033777<td>0.008276<td>0.043099<td>0.013723<td>0.039407<td>0.015095</td>\n　<tr><th>LBPH<td>0.035812<td>0.071586<td>0.034822<td>0.075267<td>0.03204<td>0.067166<td>0.039263<td>0.075726<td>0.053047<td>0.074361</td>\n</table>\n<p>综合比较可以得出，效率 Eigen > Fisher > LBPH<br>\n所以采用Eigen（特征脸）算法</p>\n<h3 id="学生信息接口（爬虫）"><a href="#%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E6%8E%A5%E5%8F%A3%EF%BC%88%E7%88%AC%E8%99%AB%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>学生信息接口（爬虫）</h3>\n<p>该系统还需要获取到学生的个人信息，比如通过学号和密码验证是否正确等等。在同一届的同学中，已经有一位同学研究教务系统比较透彻了，而且做了一个<a href="http://njnu.chaiziyi.com.cn/">查南师</a>网站，所以我只需要爬取该网站的接口即可。</p>\n<h3 id="前端"><a href="#%E5%89%8D%E7%AB%AF" aria-hidden="true"><span class="icon icon-link"></span></a>前端</h3>\n<p>该系统使用的是前后端分离的架构，页面的渲染交给客户端 <code>JavaScript</code> 来实现，后端只需要提供纯数据接口即可，让后端的工作更加纯粹。  </p>\n<p>对于页面路由的控制，使用的是 HTML5 的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">History API</a> ，交给 JavaScript 来控制，所以只要不进行页面的强制刷新（Ctrl/cmd + R），所有路径的跳转都是不会从服务器获取 HTML CSS 进行渲染，这就是单页 Web 应用的核心，这样一来，用户体验就更佳，服务器负载也更小，但对于浏览器要求更高了。</p>\n<p>结合 React Web Component 和 <a href="https://github.com/css-modules/css-modules">CSS Module</a> 思想，将前端页面细分为若干个组件，在上层 Page 中进行数据的传输，组件的组合，在 Page 上层还有一层 App，把一些全局通用的组件放这。\n<img src="https://ooo.0o0.ooo/2017/01/22/58845e6781176.jpg" alt="" width="986" height="558" /></p>\n<p>而且所有的数据控制都在 <code>reducer</code> 中，层次清晰，代码复用性高。</p>\n<img src="https://ooo.0o0.ooo/2017/01/22/58845a7e4a302.jpg" alt="" width="800" height="600" />\n```\napp/\n├── common/\n│   ├── css/\n│   │   └── ...\n│   ├── storage.js\n│   └── utils.js\n├── components/\n│   ├── Button/\n│   │   ├── index.js\n│   │   └── style.less\n│   ├── FaceRec/\n│   │   ├── index.js\n│   │   └── style.less\n│   ├── Header/\n│   │   ├── index.js\n│   │   └── style.less\n│   ├── .../\n│   └── Toast/\n│       ├── index.js\n│       └── style.less\n├── pages/\n│   ├── AboutPage.js\n│   ├── AdminLoginPage.js\n│   ├── AdminPage.js\n│   ├── AudioImportPage.js\n│   ├── FaceImportPage.js\n│   └── StuSignPage.js\n├── reducers/\n│   ├── about.js\n│   ├── actions.js\n│   ├── active.js\n│   ├── admin.js\n│   ├── appReducers.js\n│   ├── audioImport.js\n│   ├── base.js\n│   ├── faceImport.js\n│   └── upFace.js\n├── workers/\n│   └── face.worker.js\n├── App.js\n├── index.tpl.html\n├── main.js\n└── router.js\n```\n<p>其中 <code>workers/face.worker.js</code> 文件是利用 Web Worker 起的另一个进程代码，主要做的是输入图片数据，输出人脸的位置大小，就是 JavaScript 版的人脸检测，之所以起另一个线程，是因为对于视频的人脸检测，对于实时性要求也比较高，检测也比较耗时，为了效率考虑使用了 Web Worker。 </p>\n<img src="https://ooo.0o0.ooo/2017/01/23/5884dfc84c74c.jpg" alt="ClipboardImage" width="1395" height="470" />\n<h3 id="后端"><a href="#%E5%90%8E%E7%AB%AF" aria-hidden="true"><span class="icon icon-link"></span></a>后端</h3>\n<p>由于视图的渲染都交给浏览器了，所以后端主要就是对于数据的逻辑处理了，比如样本录入，学生信息查询（爬虫），人脸识别（调用 opencv ），同时使用 mysql 数据库，存储样本录入的信息，表结构如下：</p>\n<pre><code data-query="{}" data-lang="">Table gp.`face_import`\n+----------+--------------+------+-----+---------+-------+\n| Field    | Type         | Null | Key | Default | Extra |\n+----------+--------------+------+-----+---------+-------+\n| stuid    | varchar(20)  | NO   |     | NULL    |       |\n| time     | datetime     | NO   |     | NULL    |       |\n| hash     | varchar(20)  | NO   | PRI | NULL    |       |\n| face_url | varchar(100) | NO   |     | NULL    |       |\n+----------+--------------+------+-----+---------+-------+\n</code></pre>\n<p><code>hash</code> 是每次上传样本的唯一 key 值，同时为了方便系统的部署迁移，没有将上传的样本数据存储在服务器中，而是存在 <a href="https://sm.ms">sm.ms</a> 免费图床中，得到一个 <code>face_url</code> 字段，每次启动服务器之前都得进行样本的训练或者训练数据的读取；而且每次上传样本或者删除样本后，服务器都需要重新训练保存样本，重新生成一套特征脸。   </p>\n<p>并且在开启服务器的环境和纯粹的数据处理的环境对于数据库的处理是不一样的，在服务器环境，需要开启数据库连接池，每次都从中去取出连接进行数据操作；而纯粹的读取数据库，得到<code>face_url</code>进行人脸的预处理或训练，则只需要每次单独的 开启连接 => 读取数据 => 关闭连接 即可，否则程序会一直运行下去，因为数据库连接池没关闭。</p>\n<p>同时，所有的前端数据接口都是 <code>/api/*</code> 规则，同时对于管理员的用户名和密码会进行 md5 不可逆编码然后再传输，防止被他人捕捉到。</p>\n<h3 id="同构渲染"><a href="#%E5%90%8C%E6%9E%84%E6%B8%B2%E6%9F%93" aria-hidden="true"><span class="icon icon-link"></span></a>同构渲染</h3>\n<p>上文说到所有的页面渲染都是交给 JavaScript 控制，服务器返回的 HTML结构如下所示：</p>\n<pre><code class="hljs language-html" data-query="{}" data-lang="html"><span class="hljs-meta">&#x3C;!DOCTYPE html></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">html</span>></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">head</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge,chrome=1"</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1"</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">title</span>></span>南师大学生签到系统<span class="hljs-tag">&#x3C;/<span class="hljs-name">title</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/pace.min.css"</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/pace.min.js"</span>></span><span class="null"></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">script</span>></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/style.min.css?v=b5afb06f45be775a70081c1e320e6c40"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">head</span>></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">body</span>></span>\n    <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>></span><span class="hljs-comment">&#x3C;!--HTML--></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/libs.min.js?v=8d589c56bcac1e2c17a7"</span>></span><span class="null"></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">script</span>></span>\n<span class="hljs-tag">&#x3C;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/app.main.min.js?v=448dfe9c907942d09623"</span>></span><span class="null"></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">script</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">body</span>></span>\n<span class="hljs-tag">&#x3C;/<span class="hljs-name">html</span>></span></code></pre>\n<p>其中任何数据都是没有的，只有 “第二时间” 通过 <code>app.min.js</code> 执行 JavaScript 进行渲染，所以对于用户短暂的 “第一时间” 感觉是不好的，什么都没有，也就是没有 “首屏渲染”，优化首屏渲染，就需要通过服务器返回带内容的 HTML。  </p>\n<p>由于前端使用的是 <code>react</code>，将 HTML 抽象成为 <code>JSX</code>，将 DOM操作 转化成状态的变化，重新渲染的思想，所以使得<strong>服务器端也能够解析<code>react</code></strong>，<code>redux</code> 又将状态的更新操作抽离出来，使得服务器端可以更方便的控制状态从而进行渲染（当然，只有 nodejs 作为后端渲染层才可以做到），同时由于前端使用 Babel 编译前端代码，所以可以用新型语法糖，为了服务器端也能够识别，所以也需要 babel-register</p>\n<pre><code data-query="{}" data-lang="">import React from \'react\';\nimport {renderToString} from \'react-dom/server\'\nimport reactRouter, {match, RouterContext} from \'react-router\'\nimport {Provider} from \'react-redux\'\nimport MyRouter, {configureStore} from \n\n// This is fired every time the server side receives a request\nfunction handleRender(req, res, next) {\n    match({ routes: MyRouter, location: req.url }, function(error, redirectLocation, renderProps) {\n        if (error) {\n            res.status(500).send(error.stack);\n        } else if (redirectLocation) {\n            if(req.url.startsWith(\'/api\') || fs.existsSync(path.join(fePath, url.parse(req.url).pathname)) ) {\n                next();\n            } else {\n                res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n            }\n        } else if (renderProps) {\n            var store = configureStore();\n            // console.log(renderProps, store);\n            // we can invoke some async operation(eg. fetchAction or getDataFromDatabase)\n            // call store.dispatch(Action(data)) to update state.\n            store.dispatch(pushRoute(req.url))\n            if(req.url === \'/about\') {\n                store.dispatch(fetchRemoteMdText())\n                .then(data => {\n                    res.renderStore(store, renderProps);\n                })\n            } else {\n                res.renderStore(store, renderProps);\n            }\n\n        } else {\n            res.status(404).send(\'Not found\')\n        }\n    })\n}\n\nexpress.response.renderStore = function (store, renderProps) {\n    const html = renderToString(\n        &#x3C;Provider store={store}>\n            &#x3C;RouterContext {...renderProps} />\n        &#x3C;/Provider>\n    );\n    this.header(\'content-type\', \'text/html; charset=utf-8\')\n    this.send(renderFullPage(\'南师大刷脸签到系统\', html, store.getState()))\n}\n\nconst htmlPath = path.join(fePath, \'index.html\');\nvar html = fs.readFileSync(htmlPath).toString();\n\nfunction renderFullPage(title, partHtml, initialState) {\n    // &#x3C;!--HTML-->\n    var allHtml = html;\n    if(initialState) {\n        allHtml = allHtml.replace(/\\/\\*\\s*?INITIAL_STATE\\s*?\\*\\//, `window.__INITIAL_STATE__=${JSON.stringify(initialState)}`)\n    }\n    if(title) {\n        allHtml = allHtml.replace(/&#x3C;title>[\\s\\S]*?&#x3C;\\/title>/, `&#x3C;title>${title}&#x3C;/title>`);\n    }\n    return allHtml.replace(/&#x3C;!--\\s*?HTML\\s*?-->/, partHtml);\n\n}\n</code></pre>\n<p>同时让浏览器得到初始状态，<code>window.__INITIAL_STATE__=${JSON.stringify(initialState)}</code>，把初始状态<code>window.__INITIAL_STATE__</code>\n传给客户端</p>\n<pre><code data-query="{}" data-lang="">const isBrowser = (() => !(typeof process === \'object\' &#x26;&#x26; typeof process.versions === \'object\' &#x26;&#x26; typeof process.versions.node !== \'undefined\'))();\n\nvar _initState = isBrowser &#x26;&#x26; window.__INITIAL_STATE__ || initState\nconst store = configureStore(\n    _initState\n)\n</code></pre>\n<p>以上，便可以实现同构渲染，既保证了 SPA 的用户体验，首屏渲染，而且解决了SEO（搜索引擎优化）的问题。</p>\n<h3 id="部署"><a href="#%E9%83%A8%E7%BD%B2" aria-hidden="true"><span class="icon icon-link"></span></a>部署</h3>\n<p>开发的差不多后，找朋友要了个 ubuntu 的服务器，首先麻烦的就是环境的迁移了，由于源码都部署在 GitHub 上，所以直接 <code>git clone</code> 就可以得到了（原始证照和预处理后的证照、训练的 yaml 数据都没提交至 GitHub，所以代码库还是挺小的）。</p>\n<p>然后 Ubuntu 上安装 opencv，Ubuntu 上可没有 Homebrew 神奇，所以只能下载源码包，自己进行编译连接，生成动态链接库</p>\n<p>安装好 node + npm + nvm，node 版本 ≥7.0，以及 mysql，导入 gp.sql</p>\n<p>再在服务器执行 <code>npm install</code>（安装项目依赖包，各个目录下都有自己独立的依赖包，前端目录则不必安装，因为只需要其产生的代码） => 下载脚本 => 预处理脚本 => 训练样本脚本 => 启动服务器</p>\n<h3 id="nginx--https"><a href="#nginx--https" aria-hidden="true"><span class="icon icon-link"></span></a>nginx + https</h3>\n<p>但是服务器启动后，外网还是不能直接访问，需要通过 nginx 反向代理，同时解析域名至服务器 IP，为了浏览器安全可以打开摄像头，还需要开启 HTTPs 协议，我使用的是腾讯云免费的一年证书，然后 nginx 配置后即可。</p>\n<h3 id="seo"><a href="#seo" aria-hidden="true"><span class="icon icon-link"></span></a>SEO</h3>\n<p>为了增强站点的曝光率，就需要做 SEO 了，添加 <code>robots.txt</code>，站点地图，同时在前端页面加入不可见的 <code>a</code> 标签，利于网页爬虫爬取其他链接</p>\n<img src="https://ooo.0o0.ooo/2017/01/22/5884a45f49cae.jpg" alt="" width="909" height="662" />\n<h3 id="pc-desktop"><a href="#pc-desktop" aria-hidden="true"><span class="icon icon-link"></span></a>PC Desktop</h3>\n<p>为了方便师生使用，还使用 <code>nativefier</code> 将站点打包成 PC Desktop，其实就是将站点 URL 和 Chrome 内核组合成一个 Application</p>\n<h2 id="代码解析（code-analysis）"><a href="#%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88code-analysis%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>代码解析（Code Analysis）</h2>\n<p>下面对某些代码进行剖析</p>\n<h3 id="获取id集合"><a href="#%E8%8E%B7%E5%8F%96id%E9%9B%86%E5%90%88" aria-hidden="true"><span class="icon icon-link"></span></a>获取ID集合</h3>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-comment">// gp-image-download/lib/get-all-id.js</span>\n<span class="hljs-comment">// language: javascript</span>\n<span class="hljs-comment">// env: node</span>\n<span class="hljs-comment">// usage: (cd gp-image-download &#x26;&#x26; node get-all-id.js)</span>\n\n<span class="hljs-keyword">const</span> URL = <span class="hljs-string">"http://urp.njnu.edu.cn/authorizeUsers.portal"</span>\n<span class="hljs-keyword">const</span> STU_FILE = <span class="hljs-string">"data/students.json"</span>\n<span class="hljs-comment">// 需要在浏览器先登录，得到已登录的 Cookie</span>\n<span class="hljs-keyword">const</span> COOKIE = <span class="hljs-string">"njnuurpnew=ac16c83bd341d8ba0c3f2f092378; JSESSIONID=0001gcUXI0GWjdQg_ptI6NGAFaf:-5B0INP"</span>\n\n<span class="hljs-comment">/* 请求 URL，写入 COOKIE，得到数据个数 recordCount */</span>\n<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLimit</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">try</span> {\n        <span class="hljs-keyword">const</span> x = <span class="hljs-keyword">await</span> get({\n            ...url.parse(URL),\n            <span class="hljs-attr">headers</span>: { <span class="hljs-attr">cookie</span>: COOKIE }\n        })\n        <span class="hljs-comment">// console.log(\'xx\', x)</span>\n        <span class="hljs-keyword">const</span> json = <span class="hljs-built_in">JSON</span>.parse(x)\n        <span class="hljs-keyword">return</span> json.recordCount\n    } <span class="hljs-keyword">catch</span> (ex) {\n        <span class="hljs-built_in">console</span>.error(ex);\n    }\n}\n\n<span class="hljs-comment">/* 请求 URL，写入 COOKIE，得到全部学生集合 */</span>\n<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStuIds</span>(<span class="hljs-params">limit</span>) </span>{\n    <span class="hljs-keyword">try</span> {\n        <span class="hljs-keyword">const</span> x = <span class="hljs-keyword">await</span> get({\n            ...url.parse(URL+<span class="hljs-string">"?limit="</span>+limit),\n            <span class="hljs-attr">headers</span>: { <span class="hljs-attr">cookie</span>: COOKIE }\n        })\n\n        <span class="hljs-keyword">const</span> json = <span class="hljs-built_in">JSON</span>.parse(x)\n        <span class="hljs-keyword">return</span> json.principals.filter(<span class="hljs-function"><span class="hljs-params">x</span>=></span>{\n            <span class="hljs-keyword">let</span> metier = x.metier.trim();\n            <span class="hljs-keyword">return</span> metier==<span class="hljs-string">\'本专科生\'</span>\n        })\n    } <span class="hljs-keyword">catch</span> (ex) {\n        <span class="hljs-built_in">console</span>.error(ex);\n    }\n}\n\n<span class="hljs-comment">/* 由于全部学生数据量比较大，所以写入文件，下次读取文件即可 */</span>\n<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeStudents</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">const</span> limit = <span class="hljs-keyword">await</span> getLimit()\n    <span class="hljs-keyword">const</span> stus = <span class="hljs-keyword">await</span> getStuIds(limit)\n\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'writing "%s"\'</span>, STU_FILE)\n    fs.writeFileSync(STU_FILE, <span class="hljs-built_in">JSON</span>.stringify(stus, <span class="hljs-literal">null</span>, <span class="hljs-number">4</span>))\n\n    assignStuIds()\n}\n\n<span class="hljs-comment">/* 读取全部学生数据，按照入学年份区分，得到以\\r\\n分割的学号集合文件 */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assignStuIds</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">const</span> stus = <span class="hljs-built_in">JSON</span>.parse(fs.readFileSync(STU_FILE))\n\n    <span class="hljs-keyword">let</span> all = stus.reduce(<span class="hljs-function">(<span class="hljs-params">p, n</span>) =></span> {\n        <span class="hljs-comment">//19130126</span>\n        <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^[\\d]{8}$/</span>.test(n.id)) {\n            <span class="hljs-keyword">let</span> num = n.id.substr(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);\n            <span class="hljs-keyword">let</span> year = <span class="hljs-string">"20"</span>+num;\n            <span class="hljs-keyword">if</span>(year>YEAR || <span class="hljs-built_in">isNaN</span>(num)) <span class="hljs-keyword">return</span> p\n            p[year] = p[year] || <span class="hljs-string">\'\'</span>\n            p[year] += n.id+<span class="hljs-string">\'\\r\\n\'</span>\n        }\n        <span class="hljs-keyword">return</span> p\n    }, {})\n\n    <span class="hljs-built_in">Object</span>.keys(all).forEach(<span class="hljs-function"><span class="hljs-params">k</span> =></span>{\n        <span class="hljs-keyword">let</span> v = all[k];\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'writing "%s"\'</span>, <span class="hljs-string">"data/student-ids-"</span>+k+<span class="hljs-string">".txt"</span>)\n        fs.writeFile(<span class="hljs-string">"data/student-ids-"</span>+k+<span class="hljs-string">".txt"</span>, v.replace(<span class="hljs-regexp">/\\r\\n$/</span>, <span class="hljs-string">\'\'</span>), ()=>{})\n    })\n}</code></pre>\n<h3 id="下载图片脚本"><a href="#%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E8%84%9A%E6%9C%AC" aria-hidden="true"><span class="icon icon-link"></span></a>下载图片脚本</h3>\n<pre><code class="hljs language-bash" data-query="{}" data-lang="bash"><span class="hljs-meta">#!/bin/bash</span>\n// gp-image-download/download.sh\n// language: bash script\n// env: bash\n// usage: (<span class="hljs-built_in">cd</span> gp-image-download &#x26;&#x26; ./download.sh 2013)\n\nbase=<span class="hljs-string">"http://223.2.10.123/jwgl/photos/rx"</span>\nyear=<span class="hljs-string">"2013"</span>\n\n<span class="hljs-comment"># 没有 images/ 文件夹则新建，健壮性</span>\n<span class="hljs-keyword">if</span> [ ! -d images ]; <span class="hljs-keyword">then</span>\n    <span class="hljs-built_in">echo</span> mkdir images\n    mkdir images\n<span class="hljs-keyword">fi</span>\n<span class="hljs-built_in">cd</span> images\n<span class="hljs-comment"># 将year赋值为第一个参数，默认为 2013</span>\n<span class="hljs-keyword">if</span> [ ! -z <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]; <span class="hljs-keyword">then</span>\n    year=<span class="hljs-variable">$1</span>\n<span class="hljs-keyword">fi</span>\n<span class="hljs-built_in">echo</span> year=<span class="hljs-variable">$year</span>\n\n<span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$year</span> ]; <span class="hljs-keyword">then</span>\n    <span class="hljs-built_in">echo</span> mkdir <span class="hljs-variable">$year</span>\n    mkdir <span class="hljs-variable">$year</span>\n<span class="hljs-keyword">fi</span>\n<span class="hljs-built_in">cd</span> <span class="hljs-variable">$year</span>\n\n<span class="hljs-comment"># 读取上一步获取的学号集合，放入arr</span>\n<span class="hljs-keyword">while</span> IFS=$<span class="hljs-string">\'\\r\\n\'</span> <span class="hljs-built_in">read</span> var; <span class="hljs-keyword">do</span>\n    arr+=(<span class="hljs-variable">$var</span>)\n<span class="hljs-keyword">done</span> &#x3C; ../../data/student-ids-<span class="hljs-variable">$year</span>.txt\n\n<span class="hljs-comment"># 将下载好的图片，按照 学年/班级/图片 放置</span>\n<span class="hljs-function"><span class="hljs-title">assign_file</span></span>() {\n    Name=<span class="hljs-variable">${1##*/}</span>\n    Classno=<span class="hljs-variable">${Name:0:6}</span>\n    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$Classno</span> ]; <span class="hljs-keyword">then</span>\n        mkdir <span class="hljs-variable">$Classno</span>\n    <span class="hljs-keyword">fi</span>\n    mv <span class="hljs-variable">$Name</span> <span class="hljs-string">"<span class="hljs-variable">$Classno</span>"</span>/\n}\n\n<span class="hljs-comment"># 下载图片</span>\n<span class="hljs-comment"># params: $1 url; $2 filename</span>\n<span class="hljs-function"><span class="hljs-title">down</span></span>() {\n    URL=<span class="hljs-variable">$1</span>\n    Name=<span class="hljs-variable">$2</span>\n    data=`curl --fail --silent <span class="hljs-variable">$URL</span>` \n    <span class="hljs-comment"># "$data" 不能少  因为data中可能包含[]</span>\n    <span class="hljs-keyword">if</span> [ ! -z <span class="hljs-string">"<span class="hljs-variable">$data</span>"</span> ]; <span class="hljs-keyword">then</span>\n        curl --fail --silent <span class="hljs-variable">$URL</span> > <span class="hljs-variable">$Name</span>\n        <span class="hljs-built_in">echo</span> <span class="hljs-string">"SUCCESS! <span class="hljs-variable">$URL</span>"</span>\n    <span class="hljs-keyword">fi</span>\n}\n\n<span class="hljs-comment"># 遍历arr，下载</span>\n<span class="hljs-keyword">for</span> id <span class="hljs-keyword">in</span> <span class="hljs-variable">${arr[@]}</span>; <span class="hljs-keyword">do</span>\n    <span class="hljs-keyword">if</span> [ ! -z <span class="hljs-variable">$id</span> ]; <span class="hljs-keyword">then</span>\n        Name=<span class="hljs-variable">${id//$\\s/}</span>.jpg\n        down <span class="hljs-string">"<span class="hljs-variable">$base</span>"</span><span class="hljs-string">"<span class="hljs-variable">$year</span>"</span>/<span class="hljs-variable">$Name</span> <span class="hljs-variable">$Name</span>\n    <span class="hljs-keyword">fi</span>\n<span class="hljs-keyword">done</span>\n\n<span class="hljs-comment"># 下载结束后，重新放置文件</span>\narr=(*)\n<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-variable">${arr[@]}</span>; <span class="hljs-keyword">do</span>\n    assign_file <span class="hljs-variable">$x</span>\n<span class="hljs-keyword">done</span></code></pre>\n<h3 id="npm-脚本"><a href="#npm-%E8%84%9A%E6%9C%AC" aria-hidden="true"><span class="icon icon-link"></span></a>npm 脚本</h3>\n<pre><code class="hljs language-text" data-query="{}" data-lang="text"><span class="hljs-comment">// gp-njnu-photos-backend/package.json</span>\n<span class="hljs-comment">// usage: (cd gp-njnu-photos-backend &#x26;&#x26; npm run $scriptName)</span>\n\n<span class="hljs-meta"># 图片预处理</span>\n<span class="hljs-meta"># detect face, then gray, save</span>\n<span class="hljs-meta"># eg.  $ npm run grayface 2013 191301</span>\n<span class="hljs-meta">#      $ npm run grayface 2013</span>\n<span class="hljs-meta">#      $ npm run grayface</span>\n<span class="hljs-meta"># npm run grayface year classno</span>\n\n\n<span class="hljs-meta"># 样本训练并写入文件。</span>\n<span class="hljs-meta"># after read grayface images, then train and save it</span>\n<span class="hljs-meta"># eg.  $ node pretreat/train_save.js -f --args 2013</span>\n<span class="hljs-meta">#      $ node pretreat/train_save.js -f --args 2013 191301</span>\n<span class="hljs-meta"># -f：重新训练，不论是否已存在训练数据</span>\n<span class="hljs-meta"># --args year classno 训练哪一年哪一班级的图片</span>\n\n<span class="hljs-string">"grayface"</span>: <span class="hljs-string">"node pretreat/gray_face.js"</span>,\n<span class="hljs-string">"train:force"</span>: <span class="hljs-string">"node pretreat/train_save.js -f"</span>,\n<span class="hljs-string">"train:smart"</span>: <span class="hljs-string">"node pretreat/train_save.js"</span>,\n<span class="hljs-string">"dev:w"</span>: <span class="hljs-string">"cross-env NODE_STATUS=run, NODE_ENV=dev node ."</span>,\n<span class="hljs-string">"dev"</span>: <span class="hljs-string">"cross-env NODE_STATUS=run, NODE_ENV=dev node index.js"</span>,\n<span class="hljs-string">"start"</span>: <span class="hljs-string">"cross-env NODE_STATUS=run, NODE_ENV=prod node index.js"</span>,\n<span class="hljs-string">"retrain"</span>: <span class="hljs-string">"npm run grayface &#x26;&#x26; npm run train:force"</span>,\n<span class="hljs-string">"retrain:dev"</span>: <span class="hljs-string">"npm run grayface 2013 191301 &#x26;&#x26; node pretreat/train_save.js -f --args 2013 191301"</span>,</code></pre>\n<h3 id="开发环境（热部署）脚本"><a href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88%E7%83%AD%E9%83%A8%E7%BD%B2%EF%BC%89%E8%84%9A%E6%9C%AC" aria-hidden="true"><span class="icon icon-link"></span></a>开发环境（热部署）脚本</h3>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-comment">// gp-njnu-photos-backend/provider.js</span>\n<span class="hljs-comment">// language: javascript</span>\n<span class="hljs-comment">// env: node</span>\n<span class="hljs-comment">// usage: (cd gp-njnu-photos-backend &#x26;&#x26; npm run dev:w)</span>\n\n<span class="hljs-keyword">var</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'child_process\'</span>)\n<span class="hljs-keyword">var</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'path\'</span>)\n<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'fs\'</span>)\n\n<span class="hljs-keyword">const</span> isDir = <span class="hljs-function">(<span class="hljs-params">filepath</span>) =></span> fs.statSync(filepath).isDirectory()\n\n<span class="hljs-comment">/* 去除掉 非文件夹，node_modules文件夹，`.`开头的文件夹 */</span>\n<span class="hljs-keyword">const</span> children = fs.readdirSync(__dirname).filter(<span class="hljs-function"><span class="hljs-params">n</span>=></span>n!=<span class="hljs-string">\'node_modules\'</span> &#x26;&#x26; !n.startsWith(<span class="hljs-string">\'.\'</span>) &#x26;&#x26; isDir(p.join(__dirname, n)));\n\n[__dirname].concat(children).forEach(<span class="hljs-function"><span class="hljs-params">dir</span> =></span> fs.watch(dir, watchHandle))\n\n<span class="hljs-comment">/* 监听到文件被修改则触发 */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">watchHandle</span> (<span class="hljs-params">type, filename</span>) </span>{\n    <span class="hljs-comment">// 无视不是js文件和点开头命名的文件</span>\n    <span class="hljs-keyword">if</span>(filename.startsWith(<span class="hljs-string">\'.\'</span>) || !filename.endsWith(<span class="hljs-string">".js"</span>)) {\n        <span class="hljs-keyword">return</span>;\n    }\n\n    <span class="hljs-built_in">console</span>.log(type, filename);\n    <span class="hljs-comment">// 杀死内存中的服务器进程</span>\n    serverProcess.kill(<span class="hljs-string">\'SIGINT\'</span>);\n    serverProcess = runServer();\n}\n\n<span class="hljs-keyword">var</span> serverProcess = runServer();\n<span class="hljs-comment">/* fork index.js 进程 */</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runServer</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> cp.fork(<span class="hljs-string">\'./index.js\'</span>, process.argv, {<span class="hljs-attr">stdio</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">\'ipc\'</span>]})\n}</code></pre>\n<h3 id="服务器自动更新代码"><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E4%BB%A3%E7%A0%81" aria-hidden="true"><span class="icon icon-link"></span></a>服务器自动更新代码</h3>\n<ul>\n<li>服务器端</li>\n</ul>\n<pre><code class="hljs language-javascript" data-query="{}" data-lang="javascript"><span class="hljs-comment">// gp-njnu-photos-backend/routes/control.js</span>\n\n<span class="hljs-comment">/* 访问 /api/ctrl/pull 服务器执行 git pull，从 github 更新代码 */</span>\nctrl.all(<span class="hljs-string">\'/pull\'</span>, (req, res) => {\n    res.writeHead(<span class="hljs-number">200</span>, {\n        <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'text/event-stream\'</span>,\n        <span class="hljs-string">\'Cache-Control\'</span>: <span class="hljs-string">\'no-cache\'</span>,\n        <span class="hljs-string">\'Connection\'</span>: <span class="hljs-string">\'keep-alive\'</span>\n    });\n    <span class="hljs-keyword">var</span> ls = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'child_process\'</span>).spawn(<span class="hljs-string">\'git\'</span>, [<span class="hljs-string">\'pull\'</span>, <span class="hljs-string">\'origin\'</span>, <span class="hljs-string">\'master\'</span>])\n    ls.stdout.on(<span class="hljs-string">\'data\'</span>, (data) => {\n        data = data.toString()\n        <span class="hljs-built_in">console</span>.log(data)\n        res.write(<span class="hljs-string">`<span class="hljs-subst">${data}</span>`</span>);\n    });\n\n    ls.stderr.on(<span class="hljs-string">\'data\'</span>, (data) => {\n        data = data.toString()\n        <span class="hljs-built_in">console</span>.log(data)\n        res.write(<span class="hljs-string">`<span class="hljs-subst">${data}</span>`</span>);\n    });\n    ls.on(<span class="hljs-string">\'close\'</span>, (code) => {\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`child process exited with code <span class="hljs-subst">${code}</span>`</span>)\n        res.end(<span class="hljs-string">`child process exited with code <span class="hljs-subst">${code}</span>`</span>);\n    });\n\n})</code></pre>\n<ul>\n<li>本机（开发机）</li>\n</ul>\n<pre><code class="hljs language-bash" data-query="{}" data-lang="bash">// path.sh\n<span class="hljs-meta">#!/bin/bash\n</span>\nmsg=<span class="hljs-string">"from bash"</span>\n<span class="hljs-keyword">if</span> [ -n <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]; <span class="hljs-keyword">then</span>\n    msg=<span class="hljs-variable">$1</span>\n    <span class="hljs-comment"># 重新 build 前端代码</span>\n    (<span class="hljs-built_in">cd</span> gp-njnu-photos-app &#x26;&#x26; npm run build)\n<span class="hljs-keyword">fi</span>\n\ngit add .\ngit commit -m <span class="hljs-string">"<span class="hljs-variable">$msg</span>"</span>\ngit push\n\n<span class="hljs-comment"># 如果push成功（exitcode=0），则访问远端 /api/ctrl/pull，从而服务器也更新了代码</span>\n<span class="hljs-keyword">if</span> [ $? = 0 ]; <span class="hljs-keyword">then</span>\n    curl https://face.moyuyc.xyz/api/ctrl/pull\n<span class="hljs-keyword">fi</span></code></pre>\n<h3 id="desktop打包脚本"><a href="#desktop%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC" aria-hidden="true"><span class="icon icon-link"></span></a>Desktop打包脚本</h3>\n<pre><code class="hljs language-text" data-query="{}" data-lang="text">// package.json\n// usage: npm run script-name\n\n<span class="hljs-comment">"app:mac64"</span>: <span class="hljs-comment">"set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -c -a x64 -p mac --insecure -n 古南师大刷脸签到 https://face.moyuyc.xyz/ -i desktop/logos/logo.icns --disable-dev-tools --disable-context-menu desktop"</span>,\n<span class="hljs-comment">"app:mac32"</span>: <span class="hljs-comment">"set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -c -a ia32 -p mac --insecure -n 古南师大刷脸签到 \\"</span>https://face.moyuyc.xyz/\\<span class="hljs-comment">" -i desktop/logos/logo.icns --disable-dev-tools --disable-context-menu desktop"</span>,\n<span class="hljs-comment">"app:mac"</span>: <span class="hljs-comment">"npm run app:mac32 &#x26; npm run app:mac64"</span>,\n<span class="hljs-comment">"app:win"</span>: <span class="hljs-comment">"npm run app:win32 &#x26; npm run app:win64"</span>,\n<span class="hljs-comment">"app:win32"</span>: <span class="hljs-comment">"set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -c -p win32 -a x64 --insecure -n 古南师大刷脸签到 \\"</span>https://face.moyuyc.xyz/\\<span class="hljs-comment">" -i desktop/logos/logo.png --disable-dev-tools --disable-context-menu desktop"</span>,\n<span class="hljs-comment">"app:win64"</span>: <span class="hljs-comment">"set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ &#x26;&#x26; nativefier -c -p win32 -a ia32 --insecure -n 古南师大刷脸签到 \\"</span>https://face.moyuyc.xyz/\\<span class="hljs-comment">" -i desktop/logos/logo.png --disable-dev-tools --disable-context-menu desktop"</span>,</code></pre>\n<h3 id="一键搭建环境脚本"><a href="#%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%E8%84%9A%E6%9C%AC" aria-hidden="true"><span class="icon icon-link"></span></a>一键搭建环境脚本</h3>\n<pre><code class="hljs language-bash" data-query="{}" data-lang="bash">// start.sh\n// language: bash script\n// env: bash\n// usage: ./start.sh\n\n<span class="hljs-meta">#!/bin/bash</span>\n<span class="hljs-function"><span class="hljs-title">echoerr</span></span>() { <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$@</span>"</span> 1>&#x26;2; }\n<span class="hljs-function"><span class="hljs-title">command_exists</span></span> () { <span class="hljs-built_in">type</span> <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> &#x26;> /dev/null; }\n<span class="hljs-function"><span class="hljs-title">command_exists_exit</span></span>() {\n    <span class="hljs-keyword">if</span> ! command_exists <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ; <span class="hljs-keyword">then</span>\n        echoerr <span class="hljs-string">"<span class="hljs-variable">${1}</span> command not exists"</span>\n        <span class="hljs-built_in">exit</span>\n    <span class="hljs-keyword">fi</span>\n}\n\n<span class="hljs-comment"># 必须的指令检查 git npm node mysql</span>\ncommand_exists_exit git\ncommand_exists_exit npm\ncommand_exists_exit node\ncommand_exists_exit mysql\n\n<span class="hljs-comment"># 是否已经 clone 过，已经 clone 过，则更新代码，否则 clone</span>\n<span class="hljs-keyword">if</span> [ -d face-njnu ]; <span class="hljs-keyword">then</span>\n    (<span class="hljs-built_in">cd</span> face-njnu &#x26;&#x26; git pull)\n<span class="hljs-keyword">else</span>\n    git <span class="hljs-built_in">clone</span> https://github.com/moyuyc/graduation-project.git face-njnu\n<span class="hljs-keyword">fi</span>\n\n<span class="hljs-comment"># 要求输入下载同学的入学年份</span>\n<span class="hljs-built_in">read</span> -p <span class="hljs-string">"which year do you want to download? (2013) [2013/n] "</span> REPLY\n<span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[\\s]*$ ]]; <span class="hljs-keyword">then</span>\n    YEAR=2013\n    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Downloading... Year=<span class="hljs-variable">$YEAR</span>"</span>\n    (<span class="hljs-built_in">cd</span> face-njnu/gp-image-download &#x26;&#x26; ./download.sh <span class="hljs-variable">$YEAR</span>)\n<span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[nN]$ ]]; <span class="hljs-keyword">then</span>\n    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Skipped Download Images"</span>\n<span class="hljs-keyword">else</span>\n    YEAR=<span class="hljs-variable">$REPLY</span>\n    <span class="hljs-built_in">echo</span> <span class="hljs-string">"Downloading... Year=<span class="hljs-variable">$YEAR</span>"</span>\n    (<span class="hljs-built_in">cd</span> face-njnu/gp-image-download &#x26;&#x26; ./download.sh <span class="hljs-variable">$YEAR</span>)\n<span class="hljs-keyword">fi</span>\n\n<span class="hljs-built_in">echo</span> <span class="hljs-string">"mysql data importing"</span>\n<span class="hljs-comment"># 是否需要导入 sql 数据到 mysql</span>\n<span class="hljs-built_in">read</span> -p <span class="hljs-string">"Are you sure import sql data? [y/n]"</span> REPLY\n<span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[yY]$ ]]; <span class="hljs-keyword">then</span>\n    <span class="hljs-comment"># 输入 mysql 用户名，默认 root</span>\n    <span class="hljs-built_in">read</span> -p <span class="hljs-string">"Username(root): "</span> REPLY\n    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[\\s]*$ ]]; <span class="hljs-keyword">then</span>\n        USER=root\n    <span class="hljs-keyword">else</span>\n        USER=<span class="hljs-variable">$REPLY</span>\n    <span class="hljs-keyword">fi</span>\n\n    mysql -u <span class="hljs-variable">$USER</span> -p gp &#x3C; face-njnu/gp.sql\n<span class="hljs-keyword">fi</span>\n\n<span class="hljs-comment"># 是否需要安装 opencv</span>\n<span class="hljs-built_in">read</span> -p <span class="hljs-string">"Are you sure install opencv? [y/n]"</span> REPLY\n<span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$REPLY</span> =~ ^[yY]$ ]]; <span class="hljs-keyword">then</span>\n    <span class="hljs-keyword">if</span> command_exists apt-get; <span class="hljs-keyword">then</span>\n        sudo apt-get install build-essential\n        sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev\n    <span class="hljs-keyword">fi</span>\n\n    <span class="hljs-keyword">if</span> command_exists wget ; <span class="hljs-keyword">then</span>\n        wget -O ~/opencv.zip https://github.com/opencv/opencv/archive/2.4.13.1.zip\n        unzip opencv.zip\n        mv ~/opencv-2.4.13.1 ~/opencv\n    <span class="hljs-keyword">else</span>\n        <span class="hljs-comment"># git clone https://github.com/Itseez/opencv_contrib.git ~/opencv_contrib</span>\n        git <span class="hljs-built_in">clone</span> https://github.com/opencv/opencv.git ~/opencv\n        (<span class="hljs-built_in">cd</span> ~/opencv &#x26;&#x26; git checkout 2.4)\n    <span class="hljs-keyword">fi</span>\n    (<span class="hljs-built_in">cd</span> ~/opencv &#x26;&#x26; rm -rf release &#x26;&#x26; mkdir release \\\n        &#x26;&#x26; <span class="hljs-built_in">cd</span> release &#x26;&#x26; \\ <span class="hljs-comment"># ~/opencv_contrib/modules:</span>\n        cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/<span class="hljs-built_in">local</span> .. \\\n        &#x26;&#x26; make \\\n        &#x26;&#x26; sudo make install)\n<span class="hljs-keyword">fi</span>\n\n<span class="hljs-keyword">if</span> command_exists node-gyp ;\n    npm install node-gyp -g --registry=https://registry.npm.taobao.org\n<span class="hljs-keyword">fi</span>\n\n<span class="hljs-comment"># 安装项目依赖，并且启动</span>\n<span class="hljs-built_in">cd</span> face-njnu\nnpm install --registry=https://registry.npm.taobao.org\n<span class="hljs-built_in">cd</span> gp-njnu-photos-backend\nnpm install --registry=https://registry.npm.taobao.org\n(<span class="hljs-built_in">cd</span> opencv &#x26;&#x26; npm run install )\nnpm run retrain &#x26;&#x26; npm run start</code></pre>\n<h2 id="系统模块（system-module）"><a href="#%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97%EF%BC%88system-module%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>系统模块（System Module）</h2>\n<img src="https://ooo.0o0.ooo/2017/01/22/58848833b7414.jpg" alt="系统模块" width="770" height="401" />\n<h1 id="系统截图（system-screenshot）"><a href="#%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE%EF%BC%88system-screenshot%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>系统截图（System Screenshot）</h1>\n<ul>\n<li>\n<p>学生签到\n<img src="https://ooo.0o0.ooo/2017/01/22/588485d5c5134.jpg" alt="学生签到-1" width="1440" height="810" />\n<img src="https://ooo.0o0.ooo/2017/01/22/58848618b06ff.jpg" alt="学生签到-2" width="1440" height="810" /></p>\n</li>\n<li>\n<p>人脸录入\n<img src="https://ooo.0o0.ooo/2017/01/22/5884867e8c4f1.jpg" alt="" width="1440" height="810" /></p>\n</li>\n<li>\n<p>关于\n<img src="https://ooo.0o0.ooo/2017/01/22/588486cf622d8.jpg" alt="" width="1440" height="810" /></p>\n</li>\n<li>\n<p>管理员登录\n<img src="https://ooo.0o0.ooo/2017/01/22/588486ef8446d.jpg" alt="" width="1440" height="810" /></p>\n</li>\n<li>\n<p>管理员界面\n<img src="https://ooo.0o0.ooo/2017/01/22/5884873f1e625.jpg" alt="" width="1440" height="810" /></p>\n</li>\n</ul>\n<h1 id="总结（sum-up）"><a href="#%E6%80%BB%E7%BB%93%EF%BC%88sum-up%EF%BC%89" aria-hidden="true"><span class="icon icon-link"></span></a>总结（Sum Up）</h1>\n<p>学习并且使用了一套的 <code>webpack+react+redux+router</code>，以及同构渲染；同时巩固了一些 C 系列语言知识，尝试了 node 与 C/C++ “通信”的方式，入门学习了 opencv 以及人脸图像处理相关知识；尝试了站点的发布，与 HTTPs 的升级。对 前端/Nodejs/Web 体系认识更加深刻，对 unix 指令环境更加熟悉。</p>\n',
extra:{}}}});