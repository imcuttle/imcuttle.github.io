webpackJsonp([47,113],{1218:function(s,a){s.exports={content:"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p>单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</p><p>有单向绑定，就有双向绑定。如果用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。</p><p>什么情况下用户可以更新View呢？填写表单就是一个最直接的例子。当用户填写表单时，View的状态就被更新了，如果此时MVVM框架可以自动更新Model的状态，那就相当于我们把Model和View做了双向绑定：</p><img src=false width=392 height=236 data-src=https://i.loli.net/2018/03/13/5aa73406bca50.jpg><p>在浏览器中，当用户修改了表单的内容时，我们绑定的Model会自动更新：</p><img src=false width=376 height=254 data-src=https://i.loli.net/2018/03/13/5aa7341151021.jpg><p>下面介绍实现以上逻辑交互，不同的实现方式</p><h2 id=原生react方式><a href=#%E5%8E%9F%E7%94%9Freact%E6%96%B9%E5%BC%8F aria-hidden=true><span class=\"icon icon-link\"></span></a>原生React方式</h2><pre><code class=\"hljs language-jsx\"data-query={} data-lang=jsx><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> <span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Form</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Component</span> </span>{\n    <span class=hljs-comment>// 实际业务中，数据可能是来自props</span>\n    state = {\n        <span class=hljs-attr>name</span>: <span class=hljs-string>''</span>,\n        <span class=hljs-attr>email</span>: <span class=hljs-string>''</span>\n    }\n    changeFromEvt = <span class=hljs-function>(<span class=hljs-params>key, evt</span>) =></span> {\n        <span class=hljs-keyword>this</span>.setState({\n            [key]: evt.target.value\n        })\n    }\n\n    render() {\n        <span class=hljs-keyword>return</span> (\n            <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>form</span>></span>\n                </span>&lt;input\n                    value={this.state.name}\n                    onChange={this.changeFromEvt.bind(this, 'name')}\n                />\n                &lt;input\n                    type=\"email\"\n                    value={this.state.email}\n                    onChange={this.changeFromEvt.bind(this, 'email')}\n                />\n            &lt;/form>\n        )\n    }\n}</code></pre><h2 id=hoc方式><a href=#hoc%E6%96%B9%E5%BC%8F aria-hidden=true><span class=\"icon icon-link\"></span></a>Hoc方式</h2><pre><code class=\"hljs language-jsx\"data-query={} data-lang=jsx><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>PPHOC</span>(<span class=hljs-params>WrappedComponent</span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>PP</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>React</span>.<span class=hljs-title>Component</span> </span>{\n    state = { <span class=hljs-attr>fields</span>: {} }\n    \n    getField(fieldName) {\n      <span class=hljs-keyword>if</span> (!<span class=hljs-keyword>this</span>.state.fields[fieldName]) {\n        <span class=hljs-keyword>this</span>.state.fields[fieldName] = {\n          <span class=hljs-attr>value</span>: <span class=hljs-string>''</span>,\n          <span class=hljs-attr>onChange</span>: <span class=hljs-function><span class=hljs-params>event</span> =></span> {\n            <span class=hljs-keyword>this</span>.state.fields[fieldName].value = event.target.value\n            <span class=hljs-keyword>this</span>.forceUpdate()\n          }\n        }\n      }\n\n      <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>value</span>: <span class=hljs-keyword>this</span>.state.fields[fieldName].value,\n        <span class=hljs-attr>onChange</span>: <span class=hljs-keyword>this</span>.state.fields[fieldName].onChange\n      }\n    }\n\n    render() {\n      <span class=hljs-keyword>const</span> props = <span class=hljs-built_in>Object</span>.assign({}, <span class=hljs-keyword>this</span>.props, {\n        <span class=hljs-attr>fields</span>: <span class=hljs-keyword>this</span>.getField.bind(<span class=hljs-keyword>this</span>),\n      })\n      <span class=hljs-keyword>return</span> (\n        <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>WrappedComponent</span> {<span class=hljs-attr>...props</span>}/></span>\n      )\n    }\n  }\n}\nexport default class Form extends React.Component {\n    render() {\n        return (\n            </span>&lt;form>\n                &lt;input\n                    {...this.props.fields('name')}\n                />\n                &lt;input\n                    type=\"email\"\n                    {...this.props.fields('email')}\n                />\n            &lt;/form>\n        )\n    }\n}</code></pre><h2 id=mobx（观察者）方式><a href=#mobx%EF%BC%88%E8%A7%82%E5%AF%9F%E8%80%85%EF%BC%89%E6%96%B9%E5%BC%8F aria-hidden=true><span class=\"icon icon-link\"></span></a>Mobx（观察者）方式</h2><pre><code class=\"hljs language-jsx\"data-query={} data-lang=jsx><span class=hljs-keyword>import</span> { observable, action } <span class=hljs-keyword>from</span> <span class=hljs-string>'mobx'</span>\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> <span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Form</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Component</span> </span>{\n    @observable form = {\n        <span class=hljs-attr>name</span>: <span class=hljs-string>''</span>,\n        <span class=hljs-attr>email</span>: <span class=hljs-string>''</span>\n    }\n    \n    changeFromEvt = <span class=hljs-function>(<span class=hljs-params>key, evt</span>) =></span> {\n        <span class=hljs-keyword>this</span>[key] = evt.target.value\n    }\n\n    render() {\n        <span class=hljs-keyword>return</span> (\n            <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>form</span>></span>\n                </span>&lt;input\n                    value={this.state.name}\n                    onChange={this.changeFromEvt.bind(this, 'name')}\n                />\n                &lt;input\n                    type=\"email\"\n                    value={this.state.email}\n                    onChange={this.changeFromEvt.bind(this, 'email')}\n                />\n            &lt;/form>\n        )\n    }\n}</code></pre><h2 id=双向绑定方式-主角><a href=#%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F-%E4%B8%BB%E8%A7%92 aria-hidden=true><span class=\"icon icon-link\"></span></a>双向绑定方式 (主角)</h2><pre><code class=\"hljs language-jsx\"data-query={} data-lang=jsx><span class=hljs-keyword>import</span> { observable, binding } <span class=hljs-keyword>from</span> <span class=hljs-string>'react-mobx-vm'</span>\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Form</span> </span>{\n    @observable name = <span class=hljs-string>''</span>\n    @observable email = <span class=hljs-string>''</span>\n}\n\n@binding(<span class=hljs-keyword>new</span> Form())\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> <span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Form</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Component</span> </span>{\n\n    render() {\n        <span class=hljs-keyword>return</span> (\n            <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>form</span>></span>\n                </span>&lt;input\n                    data-bind=\"name\"\n                />\n                &lt;input\n                    type=\"email\"\n                    data-bind=\"email\"\n                />\n            &lt;/form>\n        )\n    }\n}</code></pre>",extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=react-data-binding-based-on-mobx.js.map