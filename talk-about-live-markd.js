webpackJsonp([27,113],{1238:function(s,a){s.exports={content:"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h2 id=前言><a href=#%E5%89%8D%E8%A8%80 aria-hidden=true><span class=\"icon icon-link\"></span></a>前言</h2><p>16 年在 SF 中发布了文章 <a href=https://segmentfault.com/a/1190000006260582>\"探究SegumentFault Markdown编辑器\"</a>，目的是仿 SF 线上书写 Markdown 文档的体验：<strong>高亮定位修改节点</strong></p><p>在上述文章中的工具已经不再维护（😢代码写太乱），而且是在浏览器中书写 markdown 文本。</p><p>于是现在使用全新的思路实现了一个：<strong>在本地任意编辑器书写 markdown，同时同步定位修改节点</strong> 工具 <a href=https://github.com/imcuttle/live-markd>live-markd</a></p><p>预览效果如图:<br><img src=https://i.loli.net/2018/11/05/5bdfb82f1239d.gif></p><h2 id=如何使用><a href=#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8 aria-hidden=true><span class=\"icon icon-link\"></span></a>如何使用</h2><ol><li><p>安装 nodejs 环境，如已经有则跳过此步</p></li><li><p>全局安装 <code>live-markd</code></p><pre><code class=\"hljs language-bash\"data-query={} data-lang=bash>npm install live-markd -g</code></pre></li><li><p>进入到 markdown 文件目录</p><pre><code class=\"hljs language-bash\"data-query={} data-lang=bash>live-markd path/to/markdown</code></pre></li></ol><h2 id=如何实现><a href=#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0 aria-hidden=true><span class=\"icon icon-link\"></span></a>如何实现</h2><h3 id=如何实现修改节点的检测><a href=#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BF%AE%E6%94%B9%E8%8A%82%E7%82%B9%E7%9A%84%E6%A3%80%E6%B5%8B aria-hidden=true><span class=\"icon icon-link\"></span></a>如何实现修改节点的检测</h3><p>使用 <a href=https://github.com/remarkjs/remark>remark</a> 解析 markdown，得到 <a href=https://github.com/syntax-tree/mdast>markdown 抽象语法树</a></p><p>如下例子，现在有两个 markdown 文件 <code>old.md</code> 和 <code>new.md</code></p><ul><li><p><code>old.md</code></p><pre><code class=\"hljs language-markdown\"data-query={} data-lang=markdown><span class=hljs-section># hi</span>\nworld</code></pre></li><li><p><code>new.md</code></p><pre><code class=\"hljs language-markdown\"data-query={} data-lang=markdown><span class=hljs-section># hi</span>\nworld!</code></pre></li></ul><p>可以看到 <code>new.md</code> 相比于 <code>old.md</code> 最后多了 <code>!</code></p><p>进一步的，对比两个 markdown 文本的语法树</p><pre><code class=\"hljs language-javascript\"data-query={} data-lang=javascript><span class=hljs-comment>// old.md</span>\n{\n  <span class=hljs-attr>type</span>: <span class=hljs-string>'root'</span>,\n  <span class=hljs-attr>children</span>: [\n    {\n      <span class=hljs-attr>type</span>: <span class=hljs-string>'heading'</span>,\n      <span class=hljs-attr>depth</span>: <span class=hljs-number>1</span>,\n      <span class=hljs-attr>children</span>: [{\n        <span class=hljs-attr>type</span>: <span class=hljs-string>'paragraph'</span>,\n        <span class=hljs-attr>children</span>: [{ <span class=hljs-attr>type</span>: <span class=hljs-string>'text'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>'world'</span> }]\n      }]\n    }\n  ]\n}\n\n<span class=hljs-comment>// new.md</span>\n{\n  <span class=hljs-attr>type</span>: <span class=hljs-string>'root'</span>,\n  <span class=hljs-attr>children</span>: [\n    {\n      <span class=hljs-attr>type</span>: <span class=hljs-string>'heading'</span>,\n      <span class=hljs-attr>depth</span>: <span class=hljs-number>1</span>,\n      <span class=hljs-attr>children</span>: [{\n        <span class=hljs-attr>type</span>: <span class=hljs-string>'paragraph'</span>,\n        <span class=hljs-attr>children</span>: [{ <span class=hljs-attr>type</span>: <span class=hljs-string>'text'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>'world!'</span> }]\n      }]\n    }\n  ]\n}</code></pre><p>然后分别对两个树结构进行 DFS，依次对比节点，判断出第一个不同的节点即可，最后对修改的节点注入 class，最后转换成带 class 的 html</p><pre><code class=\"hljs language-javascript\"data-query={} data-lang=javascript>{\n  <span class=hljs-attr>hProperties</span>: {\n    <span class=hljs-attr>className</span>: [<span class=hljs-string>'detected-updated'</span>]\n  },\n  <span class=hljs-attr>type</span>: <span class=hljs-string>'paragraph'</span>,\n  <span class=hljs-attr>children</span>: [{ <span class=hljs-attr>type</span>: <span class=hljs-string>'text'</span>, <span class=hljs-attr>value</span>: <span class=hljs-string>'world!'</span> }]\n}</code></pre><pre><code class=\"hljs language-html\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>h1</span>></span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>h1</span>></span>\n<span class=hljs-tag>&lt;<span class=hljs-name>p</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"detected-updated\"</span>></span>world!<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>></span></code></pre><p>当然，以上 markdown 比对工作由 <a href=https://github.com/imcuttle/detect-one-changed>detect-one-changed</a> 完成</p><h3 id=如何实现数据推送><a href=#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E6%8E%A8%E9%80%81 aria-hidden=true><span class=\"icon icon-link\"></span></a>如何实现数据推送</h3><p>live-markd 使用 服务器推送（EventStream）来实现客户端和服务端的长连接，就如 <a href=https://github.com/webpack-contrib/webpack-hot-middleware>webpack-hot-middleware</a> 实现，只有单向的服务端向客户端的数据推送。同时为了让服务器知晓客户端是否还存在，还具有每隔 30s 的心跳检测，用于及时回收服务端资源。</p><p><img src=https://i.loli.net/2018/11/05/5bdfd3b887888.png></p><h4 id=客户端><a href=#%E5%AE%A2%E6%88%B7%E7%AB%AF aria-hidden=true><span class=\"icon icon-link\"></span></a>客户端</h4><p>在客户端只需要接受服务器推送数据即可</p><pre><code class=\"hljs language-javascript\"data-query={} data-lang=javascript><span class=hljs-comment>// 建立连接</span>\n<span class=hljs-keyword>const</span> source = <span class=hljs-keyword>new</span> EventSource(location.pathname + <span class=hljs-string>'?sse=on'</span>)\nsource.addEventListener(<span class=hljs-string>'message'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>ev</span>) </span>{\n  <span class=hljs-keyword>let</span> data = {}\n  <span class=hljs-keyword>try</span> {\n    data = <span class=hljs-built_in>JSON</span>.parse(ev.data)\n  } <span class=hljs-keyword>catch</span> (e) {}\n\n  <span class=hljs-keyword>if</span> (data.type === <span class=hljs-string>'change'</span>) {\n    <span class=hljs-built_in>document</span>.querySelector(<span class=hljs-string>'.markdown-body'</span>).innerHTML = data.value\n    <span class=hljs-keyword>const</span> node = <span class=hljs-built_in>document</span>.querySelector(<span class=hljs-string>'.markdown-body .detected-updated'</span>)\n    <span class=hljs-keyword>if</span> (node) {\n      <span class=hljs-comment>// 定位</span>\n      node.scrollIntoView({ <span class=hljs-attr>behavior</span>: <span class=hljs-string>'smooth'</span> })\n    }\n  }\n})</code></pre><p>同时注入高亮样式：</p><pre><code class=\"hljs language-css\"data-query={} data-lang=css>@<span class=hljs-keyword>keyframes</span> bling {\n  <span class=hljs-selector-tag>from</span> {\n    <span class=hljs-attribute>background-color</span>: <span class=hljs-number>#d9edf7</span>;\n  }\n  <span class=hljs-selector-tag>to</span> {\n    <span class=hljs-attribute>background-color</span>: <span class=hljs-number>#d9edf7</span>;\n  }\n}\n<span class=hljs-selector-class>.markdown-body</span> <span class=hljs-selector-class>.detected-updated</span> {\n  <span class=hljs-attribute>animation</span>: bling <span class=hljs-number>2.5s</span> <span class=hljs-number>1</span>;\n}</code></pre><h2 id=最后><a href=#%E6%9C%80%E5%90%8E aria-hidden=true><span class=\"icon icon-link\"></span></a>最后</h2><p>在 <a href=https://github.com/mdx-js/mdx>mdx</a> 生态中，该功能也能够被使用，详见 <a href=https://github.com/imcuttle/detect-one-changed>detect-one-changed</a></p><p>在 <a href=https://github.com/jxnblk/mdx-go/pull/22>mdx-go</a> 和 <a href=https://github.com/pedronauck/docz/pull/433>docz</a> 中都已经提供 PR 以引入该书写体验！等待作者的回复。</p><p>欢迎大家 Star 👍！</p><ul><li><a href=https://github.com/imcuttle/live-markd>live-markd</a> - GitHub markdown 风格本地实时书写 markdown + 同步定位修改节点</li><li><a href=https://github.com/imcuttle/detect-one-changed>detect-one-changed</a> - Markdown / Html 修改检测</li></ul>",extra:{"_image-loader_":[],_progressive_:[]}}}});
//# sourceMappingURL=talk-about-live-markd.js.map