{"version":3,"sources":["webpack:///img-recover.js","webpack:///./source/_articles/img-recover.md"],"names":["webpackJsonp","1188","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,giJACAC,OACAC,oBACAC","file":"img-recover.js","sourcesContent":["webpackJsonp([76,113],{\n\n/***/ 1188:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=介绍><a href=#%E4%BB%8B%E7%BB%8D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>介绍</h1><p>图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的问题，导致图像质量下降，这种现象叫图像退化。 而图像复原就是对退化的图像进行处理，尽可能的复原图像的<strong>本来面目</strong>。</p><!--more--><p>如图，先对图片进行模糊处理 <img src=false alt=ClipboardImage width=530 height=330 data-src=http://obu9je6ng.bkt.clouddn.com/FkLD1OdGi0WKdv26sK4ubCj3ov6B?imageslim> 然后对图片进行还原 <img src=false alt=ClipboardImage width=530 height=330 data-src=http://obu9je6ng.bkt.clouddn.com/FqQpRZv_Tzx54uHAREg7O9UPY8r3?imageslim></p><h1 id=代码解释><a href=#%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>代码解释</h1><pre><code class=\\\"hljs language-java\\\"data-query={} data-lang=java>    <span class=hljs-comment>//图像恢复</span>\\n\\t<span class=hljs-keyword>public</span> <span class=hljs-keyword>int</span>[] imRestore(<span class=hljs-keyword>int</span>[] pixels, <span class=hljs-keyword>int</span> iw, <span class=hljs-keyword>int</span> ih)\\n\\t{\\n\\t\\t<span class=hljs-keyword>double</span>[] newPixels = <span class=hljs-keyword>new</span> <span class=hljs-keyword>double</span> [iw*ih];\\n\\t\\t<span class=hljs-keyword>double</span>[] newKernel = <span class=hljs-keyword>new</span> <span class=hljs-keyword>double</span> [iw*ih];\\n\\n\\t\\t<span class=hljs-comment>//初始化</span>\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> j = <span class=hljs-number>0</span>; j &lt; ih; j++)\\n\\t\\t{\\n\\t\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>; i &lt; iw; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnewPixels[i+j*iw] = pixels[i+j*iw]&amp<span class=hljs-number>0xff</span>;\\n\\t\\t\\t\\t<span class=hljs-keyword>if</span>((i&lt;<span class=hljs-number>5</span>) &amp&amp (j&lt;<span class=hljs-number>5</span>))\\n\\t\\t\\t\\t\\tnewKernel[i+j*iw] = <span class=hljs-number>1.0</span>/<span class=hljs-number>25</span>;\\n\\t\\t\\t\\t<span class=hljs-keyword>else</span>\\n\\t\\t\\t\\t\\tnewKernel[i+j*iw] = <span class=hljs-number>0</span>;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//初始化</span>\\n\\t\\tComplex[] complex   = <span class=hljs-keyword>new</span> Complex[iw*ih];\\n\\t\\tComplex[] comKernel = <span class=hljs-keyword>new</span> Complex[iw*ih];\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>;i &lt; iw*ih; i++)\\n\\t\\t{\\n\\t\\t\\tcomplex[i]   = <span class=hljs-keyword>new</span> Complex(<span class=hljs-number>0</span>,<span class=hljs-number>0</span>);\\n\\t\\t\\tcomKernel[i] = <span class=hljs-keyword>new</span> Complex(<span class=hljs-number>0</span>,<span class=hljs-number>0</span>);\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//对原图像进行FFT (快速傅氏变换)</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2(iw, ih, newPixels);\\n\\t\\tcomplex = fft2.getFFT2();\\n\\n\\t\\t<span class=hljs-comment>//对卷积核进行FFT</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2(iw, ih, newKernel);\\n\\t\\tcomKernel = fft2.getFFT2();\\n\\n\\t\\t<span class=hljs-comment>//逆滤波复原</span>\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> j = <span class=hljs-number>0</span>;j &lt; ih; j++)\\n\\t\\t{\\n\\t\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>; i &lt; iw; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> re = complex[i+j*iw].re;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> im = complex[i+j*iw].im;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> reKernel = comKernel[i+j*iw].re;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> imKernel = comKernel[i+j*iw].im;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> x = reKernel*reKernel+imKernel*imKernel;\\n\\n\\t\\t\\t\\t<span class=hljs-keyword>if</span>(x > <span class=hljs-number>1e-3</span>)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t<span class=hljs-keyword>double</span> r = (re*reKernel+im*imKernel)/x;\\n\\t\\t\\t\\t\\t<span class=hljs-keyword>double</span> m = (im*reKernel-re*imKernel)/x;\\n\\t\\t\\t\\t\\tcomplex[i+j*iw].re = r;\\n\\t\\t\\t\\t\\tcomplex[i+j*iw].im = m;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//进行FFT反变换</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2i(iw, ih, complex);\\n\\t\\tpixels = fft2.getPixels2i();\\n\\t\\t<span class=hljs-keyword>return</span> pixels;\\n\\t}</code></pre>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// img-recover.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><h1 id=介绍><a href=#%E4%BB%8B%E7%BB%8D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>介绍</h1><p>图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的问题，导致图像质量下降，这种现象叫图像退化。 而图像复原就是对退化的图像进行处理，尽可能的复原图像的<strong>本来面目</strong>。</p><!--more--><p>如图，先对图片进行模糊处理 <img src=false alt=ClipboardImage width=530 height=330 data-src=http://obu9je6ng.bkt.clouddn.com/FkLD1OdGi0WKdv26sK4ubCj3ov6B?imageslim> 然后对图片进行还原 <img src=false alt=ClipboardImage width=530 height=330 data-src=http://obu9je6ng.bkt.clouddn.com/FqQpRZv_Tzx54uHAREg7O9UPY8r3?imageslim></p><h1 id=代码解释><a href=#%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>代码解释</h1><pre><code class=\\\"hljs language-java\\\"data-query={} data-lang=java>    <span class=hljs-comment>//图像恢复</span>\\n\\t<span class=hljs-keyword>public</span> <span class=hljs-keyword>int</span>[] imRestore(<span class=hljs-keyword>int</span>[] pixels, <span class=hljs-keyword>int</span> iw, <span class=hljs-keyword>int</span> ih)\\n\\t{\\n\\t\\t<span class=hljs-keyword>double</span>[] newPixels = <span class=hljs-keyword>new</span> <span class=hljs-keyword>double</span> [iw*ih];\\n\\t\\t<span class=hljs-keyword>double</span>[] newKernel = <span class=hljs-keyword>new</span> <span class=hljs-keyword>double</span> [iw*ih];\\n\\n\\t\\t<span class=hljs-comment>//初始化</span>\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> j = <span class=hljs-number>0</span>; j &lt; ih; j++)\\n\\t\\t{\\n\\t\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>; i &lt; iw; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnewPixels[i+j*iw] = pixels[i+j*iw]&amp<span class=hljs-number>0xff</span>;\\n\\t\\t\\t\\t<span class=hljs-keyword>if</span>((i&lt;<span class=hljs-number>5</span>) &amp&amp (j&lt;<span class=hljs-number>5</span>))\\n\\t\\t\\t\\t\\tnewKernel[i+j*iw] = <span class=hljs-number>1.0</span>/<span class=hljs-number>25</span>;\\n\\t\\t\\t\\t<span class=hljs-keyword>else</span>\\n\\t\\t\\t\\t\\tnewKernel[i+j*iw] = <span class=hljs-number>0</span>;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//初始化</span>\\n\\t\\tComplex[] complex   = <span class=hljs-keyword>new</span> Complex[iw*ih];\\n\\t\\tComplex[] comKernel = <span class=hljs-keyword>new</span> Complex[iw*ih];\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>;i &lt; iw*ih; i++)\\n\\t\\t{\\n\\t\\t\\tcomplex[i]   = <span class=hljs-keyword>new</span> Complex(<span class=hljs-number>0</span>,<span class=hljs-number>0</span>);\\n\\t\\t\\tcomKernel[i] = <span class=hljs-keyword>new</span> Complex(<span class=hljs-number>0</span>,<span class=hljs-number>0</span>);\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//对原图像进行FFT (快速傅氏变换)</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2(iw, ih, newPixels);\\n\\t\\tcomplex = fft2.getFFT2();\\n\\n\\t\\t<span class=hljs-comment>//对卷积核进行FFT</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2(iw, ih, newKernel);\\n\\t\\tcomKernel = fft2.getFFT2();\\n\\n\\t\\t<span class=hljs-comment>//逆滤波复原</span>\\n\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> j = <span class=hljs-number>0</span>;j &lt; ih; j++)\\n\\t\\t{\\n\\t\\t\\t<span class=hljs-keyword>for</span>(<span class=hljs-keyword>int</span> i = <span class=hljs-number>0</span>; i &lt; iw; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> re = complex[i+j*iw].re;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> im = complex[i+j*iw].im;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> reKernel = comKernel[i+j*iw].re;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> imKernel = comKernel[i+j*iw].im;\\n\\t\\t\\t\\t<span class=hljs-keyword>double</span> x = reKernel*reKernel+imKernel*imKernel;\\n\\n\\t\\t\\t\\t<span class=hljs-keyword>if</span>(x > <span class=hljs-number>1e-3</span>)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t<span class=hljs-keyword>double</span> r = (re*reKernel+im*imKernel)/x;\\n\\t\\t\\t\\t\\t<span class=hljs-keyword>double</span> m = (im*reKernel-re*imKernel)/x;\\n\\t\\t\\t\\t\\tcomplex[i+j*iw].re = r;\\n\\t\\t\\t\\t\\tcomplex[i+j*iw].im = m;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t<span class=hljs-comment>//进行FFT反变换</span>\\n\\t\\tfft2 = <span class=hljs-keyword>new</span> FFT2();\\n\\t\\tfft2.setData2i(iw, ih, complex);\\n\\t\\tpixels = fft2.getPixels2i();\\n\\t\\t<span class=hljs-keyword>return</span> pixels;\\n\\t}</code></pre>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/img-recover.md\n// module id = 1188\n// module chunks = 76"],"sourceRoot":""}