{"version":3,"sources":["webpack:///react-native-starter.js","webpack:///./source/_articles/react-native-starter.md"],"names":["webpackJsonp","1220","module","exports","content","extra","_image-loader_","_progressive_"],"mappings":"AAAAA,cAAc,GAAG,MAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,47NACAC,OACAC,oBACAC","file":"react-native-starter.js","sourcesContent":["webpackJsonp([45,113],{\n\n/***/ 1220:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p><strong>注：本文暂无逻辑</strong></p><h2 id=移动端app分类><a href=#%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E5%88%86%E7%B1%BB aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>移动端App分类</h2><img src=false alt width=700 height=368 data-src=http://img.blog.csdn.net/20160326162834667><ul><li><p>Web(正在用的):</p><ul><li>优：开发效率高，成本低，纯前端就能搞定，跨平台</li><li>劣：基于Web Dom渲染，运行效率底，用户体验不佳, 本地接口局限</li></ul></li><li><p>Native:</p><ul><li><p>优：用户体验佳，充分使用本地接口</p></li><li><p>劣：开发效率低(需编译)，成本高，纯前端就能搞定</p></li></ul></li><li><p>Hybrid</p><ul><li><p>优：js作为native, webview的桥梁，各尽其职</p></li><li><p>劣：前端与端上开发人员耦合严重，成本高，开发效率低</p></li></ul></li></ul><h2 id=基础><a href=#%E5%9F%BA%E7%A1%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>基础</h2><ol><li>React <a href=http://reactjs.cn/react/docs/getting-started-zh-CN.html>中文</a> <a href=https://facebook.github.io/react/docs/hello-world.html>英文</a></li><li><a href=http://www.ruanyifeng.com/blog/2015/03/react.html>React入门</a></li><li>Redux*(React数据管理)</li></ol><h2 id=文档><a href=#%E6%96%87%E6%A1%A3 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>文档</h2><ol><li><a href=https://reactnative.cn/docs/0.39/getting-started.html>中文</a></li><li><a href=https://facebook.github.io/react-native/docs/getting-started.html>英文</a></li></ol><h2 id=工具><a href=#%E5%B7%A5%E5%85%B7 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>工具</h2><p>以mac开发Android为例</p><ol><li><a href=https://developer.android.com/studio/install.html>Android Studio</a></li><li><a href=https://www.npmjs.com/package/react-native-cli>react-native-cli</a></li><li><a href=https://www.zhihu.com/question/31360766>Homebrew设置代理</a></li><li><a href=https://gist.github.com/tomysmile/a9a7aee85ff73454bd57e198ad90e614>jdk</a></li><li>...</li></ol><h2 id=使用中><a href=#%E4%BD%BF%E7%94%A8%E4%B8%AD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>使用中</h2><ol><li><p><code>React Native</code>将babel内置，无需关心语法兼容问题，随意使用<code>es6/7</code></p></li><li><p>采用flexbox布局</p><ul><li><a href=http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html>教程一</a></li><li><a href=http://www.ruanyifeng.com/blog/2015/07/flex-examples.html>教程二</a></li></ul></li><li><p>App相当于SPA, <a href=https://reactnative.cn/docs/0.39/navigator.html#content>Navigator</a>控制路由</p></li><li><p><a href=https://github.com/moyuyc/injnu-app>iNjnu App</a><br><a href=https://github.com/moyuyc/injnu-server>服务端：node + json web tokens</a></p><ul><li>真机运行截图</li></ul><img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FuH-0ZSzgnT3jWrifGkZ3fqyyJal?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/Fkw5Ho1U9pEtmSM1pZQYnAdRS-Gw?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/Fl0Q8TZ2lio3KCUQmMBpXD_WqCIa?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FjEQHKAZVBkn9NfPqCjWg_D7JMak?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FoGBVVpfz7K5C4S5kOpvoP72u8Ud?imageslim></li><li><p>利用git，部署技巧<br>每次在本机修改完后端代码，push到github后，如何快速部署?(无需登录服务器)<br>后端入口(<code>nodejs</code>)</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> cp = <span class=hljs-built_in>require</span>(<span class=hljs-string>'child_process'</span>)\\n<span class=hljs-keyword>var</span> p = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>)\\n<span class=hljs-keyword>var</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs'</span>)\\n\\nfs.watch(__dirname, (type, filename) => {\\n    <span class=hljs-comment>// 监控js文件修改，修改后重启node服务</span>\\n    <span class=hljs-keyword>if</span>(!filename.endsWith(<span class=hljs-string>\\\".js\\\"</span>)) {\\n        <span class=hljs-keyword>return</span>;\\n    }\\n    serverProcess.kill(<span class=hljs-string>'SIGINT'</span>)\\n    serverProcess = runServer()\\n})\\n\\n<span class=hljs-keyword>var</span> serverProcess = runServer()\\n\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>runServer</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>// index.js 是真正的服务端代码入口</span>\\n    <span class=hljs-keyword>return</span> cp.fork(<span class=hljs-string>'./index.js'</span>, process.argv, {<span class=hljs-attr>stdio</span>: [<span class=hljs-number>0</span>, <span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-string>'ipc'</span>]})\\n}</code></pre><p><code>index.js</code>中有下面片段代码</p><pre><code data-query={} data-lang>app.all('/pull', (req, res) => {\\n    res.writeHead(200, {\\n        'Content-Type': 'text/event-stream',\\n        'Cache-Control': 'no-cache',\\n        'Connection': 'keep-alive'\\n    });\\n    var ls = require('child_process').spawn('git', ['pull', 'origin', 'master'])\\n    ls.stdout.on('data', (data) => {\\n        data = data.toString()\\n        console.log(data)\\n        res.write(`${data}`);\\n    });\\n\\n    ls.stderr.on('data', (data) => {\\n        data = data.toString()\\n        console.log(data)\\n        res.write(`${data}`);\\n    });\\n    ls.on('close', (code) => {\\n        console.log(`child process exited with code ${code}`)\\n        res.end(`child process exited with code ${code}`);\\n    });\\n})\\n</code></pre><p><code>push.sh</code>脚本</p><pre><code class=\\\"hljs language-bash\\\"data-query={} data-lang=bash><span class=hljs-meta>#!/usr/bin/env bash\\n</span>\\nmsg=<span class=hljs-string>\\\"from bash\\\"</span>\\n<span class=hljs-keyword>if</span> [ -n <span class=hljs-string>\\\"<span class=hljs-variable>$1</span>\\\"</span> ]; <span class=hljs-keyword>then</span>\\n    msg=<span class=hljs-variable>$1</span>\\n<span class=hljs-keyword>fi</span>\\n\\ngit add .\\ngit commit -m <span class=hljs-string>\\\"<span class=hljs-variable>$msg</span>\\\"</span>\\ngit push origin master\\n\\n<span class=hljs-comment># 服务器执行 `git pull origin master`</span>\\n<span class=hljs-comment># 从而更新js代码，继而重启服务器</span>\\ncurl http://202.119.104.195/pull</code></pre></li></ol><h2 id=总结><a href=#%E6%80%BB%E7%BB%93 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>总结</h2><p>传统的<code>react native</code>使得前端开发高性能移动端App成为可能。 但距离自由地开发App(需要掌握原生App开发)还有很远，目前本人只停留在<a href=https://js.coach/>jscoach</a>中寻找组件进行开发。 而且！<code>react native</code>的代码检错与报错不太友好。</p><h2 id=更多><a href=#%E6%9B%B4%E5%A4%9A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>更多</h2><ul><li><a href=http://blog.csdn.net/zlts000/article/details/50987265>移动端App介绍</a></li><li><a href=https://github.com/attentiveness/reading>iReading App: react-native+redux, android+ios</a></li><li><a href=http://www.jianshu.com/p/7f32660359ef>react native的几种常见报错</a></li></ul>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": [],\n\t    \"_progressive_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// react-native-starter.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<style>.transformer-react-render{border:1px dashed #959da5;border-radius:5px;display:block}.transformer-react-render-container>pre{max-height:400px;transition:all .2s ease}.transformer-react-render-container>pre.focused{max-height:none;box-shadow:0 0 6px rgba(0,0,0,.2)}</style><p><strong>注：本文暂无逻辑</strong></p><h2 id=移动端app分类><a href=#%E7%A7%BB%E5%8A%A8%E7%AB%AFapp%E5%88%86%E7%B1%BB aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>移动端App分类</h2><img src=false alt width=700 height=368 data-src=http://img.blog.csdn.net/20160326162834667><ul><li><p>Web(正在用的):</p><ul><li>优：开发效率高，成本低，纯前端就能搞定，跨平台</li><li>劣：基于Web Dom渲染，运行效率底，用户体验不佳, 本地接口局限</li></ul></li><li><p>Native:</p><ul><li><p>优：用户体验佳，充分使用本地接口</p></li><li><p>劣：开发效率低(需编译)，成本高，纯前端就能搞定</p></li></ul></li><li><p>Hybrid</p><ul><li><p>优：js作为native, webview的桥梁，各尽其职</p></li><li><p>劣：前端与端上开发人员耦合严重，成本高，开发效率低</p></li></ul></li></ul><h2 id=基础><a href=#%E5%9F%BA%E7%A1%80 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>基础</h2><ol><li>React <a href=http://reactjs.cn/react/docs/getting-started-zh-CN.html>中文</a> <a href=https://facebook.github.io/react/docs/hello-world.html>英文</a></li><li><a href=http://www.ruanyifeng.com/blog/2015/03/react.html>React入门</a></li><li>Redux*(React数据管理)</li></ol><h2 id=文档><a href=#%E6%96%87%E6%A1%A3 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>文档</h2><ol><li><a href=https://reactnative.cn/docs/0.39/getting-started.html>中文</a></li><li><a href=https://facebook.github.io/react-native/docs/getting-started.html>英文</a></li></ol><h2 id=工具><a href=#%E5%B7%A5%E5%85%B7 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>工具</h2><p>以mac开发Android为例</p><ol><li><a href=https://developer.android.com/studio/install.html>Android Studio</a></li><li><a href=https://www.npmjs.com/package/react-native-cli>react-native-cli</a></li><li><a href=https://www.zhihu.com/question/31360766>Homebrew设置代理</a></li><li><a href=https://gist.github.com/tomysmile/a9a7aee85ff73454bd57e198ad90e614>jdk</a></li><li>...</li></ol><h2 id=使用中><a href=#%E4%BD%BF%E7%94%A8%E4%B8%AD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>使用中</h2><ol><li><p><code>React Native</code>将babel内置，无需关心语法兼容问题，随意使用<code>es6/7</code></p></li><li><p>采用flexbox布局</p><ul><li><a href=http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html>教程一</a></li><li><a href=http://www.ruanyifeng.com/blog/2015/07/flex-examples.html>教程二</a></li></ul></li><li><p>App相当于SPA, <a href=https://reactnative.cn/docs/0.39/navigator.html#content>Navigator</a>控制路由</p></li><li><p><a href=https://github.com/moyuyc/injnu-app>iNjnu App</a><br><a href=https://github.com/moyuyc/injnu-server>服务端：node + json web tokens</a></p><ul><li>真机运行截图</li></ul><img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FuH-0ZSzgnT3jWrifGkZ3fqyyJal?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/Fkw5Ho1U9pEtmSM1pZQYnAdRS-Gw?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/Fl0Q8TZ2lio3KCUQmMBpXD_WqCIa?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FjEQHKAZVBkn9NfPqCjWg_D7JMak?imageslim> <img src=false alt=ClipboardImage width=1080 height=1920 data-src=http://obu9je6ng.bkt.clouddn.com/FoGBVVpfz7K5C4S5kOpvoP72u8Ud?imageslim></li><li><p>利用git，部署技巧<br>每次在本机修改完后端代码，push到github后，如何快速部署?(无需登录服务器)<br>后端入口(<code>nodejs</code>)</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>var</span> cp = <span class=hljs-built_in>require</span>(<span class=hljs-string>'child_process'</span>)\\n<span class=hljs-keyword>var</span> p = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>)\\n<span class=hljs-keyword>var</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs'</span>)\\n\\nfs.watch(__dirname, (type, filename) => {\\n    <span class=hljs-comment>// 监控js文件修改，修改后重启node服务</span>\\n    <span class=hljs-keyword>if</span>(!filename.endsWith(<span class=hljs-string>\\\".js\\\"</span>)) {\\n        <span class=hljs-keyword>return</span>;\\n    }\\n    serverProcess.kill(<span class=hljs-string>'SIGINT'</span>)\\n    serverProcess = runServer()\\n})\\n\\n<span class=hljs-keyword>var</span> serverProcess = runServer()\\n\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>runServer</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>// index.js 是真正的服务端代码入口</span>\\n    <span class=hljs-keyword>return</span> cp.fork(<span class=hljs-string>'./index.js'</span>, process.argv, {<span class=hljs-attr>stdio</span>: [<span class=hljs-number>0</span>, <span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-string>'ipc'</span>]})\\n}</code></pre><p><code>index.js</code>中有下面片段代码</p><pre><code data-query={} data-lang>app.all('/pull', (req, res) => {\\n    res.writeHead(200, {\\n        'Content-Type': 'text/event-stream',\\n        'Cache-Control': 'no-cache',\\n        'Connection': 'keep-alive'\\n    });\\n    var ls = require('child_process').spawn('git', ['pull', 'origin', 'master'])\\n    ls.stdout.on('data', (data) => {\\n        data = data.toString()\\n        console.log(data)\\n        res.write(`${data}`);\\n    });\\n\\n    ls.stderr.on('data', (data) => {\\n        data = data.toString()\\n        console.log(data)\\n        res.write(`${data}`);\\n    });\\n    ls.on('close', (code) => {\\n        console.log(`child process exited with code ${code}`)\\n        res.end(`child process exited with code ${code}`);\\n    });\\n})\\n</code></pre><p><code>push.sh</code>脚本</p><pre><code class=\\\"hljs language-bash\\\"data-query={} data-lang=bash><span class=hljs-meta>#!/usr/bin/env bash\\n</span>\\nmsg=<span class=hljs-string>\\\"from bash\\\"</span>\\n<span class=hljs-keyword>if</span> [ -n <span class=hljs-string>\\\"<span class=hljs-variable>$1</span>\\\"</span> ]; <span class=hljs-keyword>then</span>\\n    msg=<span class=hljs-variable>$1</span>\\n<span class=hljs-keyword>fi</span>\\n\\ngit add .\\ngit commit -m <span class=hljs-string>\\\"<span class=hljs-variable>$msg</span>\\\"</span>\\ngit push origin master\\n\\n<span class=hljs-comment># 服务器执行 `git pull origin master`</span>\\n<span class=hljs-comment># 从而更新js代码，继而重启服务器</span>\\ncurl http://202.119.104.195/pull</code></pre></li></ol><h2 id=总结><a href=#%E6%80%BB%E7%BB%93 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>总结</h2><p>传统的<code>react native</code>使得前端开发高性能移动端App成为可能。 但距离自由地开发App(需要掌握原生App开发)还有很远，目前本人只停留在<a href=https://js.coach/>jscoach</a>中寻找组件进行开发。 而且！<code>react native</code>的代码检错与报错不太友好。</p><h2 id=更多><a href=#%E6%9B%B4%E5%A4%9A aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>更多</h2><ul><li><a href=http://blog.csdn.net/zlts000/article/details/50987265>移动端App介绍</a></li><li><a href=https://github.com/attentiveness/reading>iReading App: react-native+redux, android+ios</a></li><li><a href=http://www.jianshu.com/p/7f32660359ef>react native的几种常见报错</a></li></ul>\",\n  \"extra\": {\n    \"_image-loader_\": [],\n    \"_progressive_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./source/_articles/react-native-starter.md\n// module id = 1220\n// module chunks = 45"],"sourceRoot":""}