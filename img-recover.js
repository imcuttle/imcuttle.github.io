webpackJsonp([55,90],{1008:function(s,n){s.exports={content:'<h1 id="介绍"><a href="#%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>介绍</h1>\n<p>图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的问题，导致图像质量下降，这种现象叫图像退化。\n而图像复原就是对退化的图像进行处理，尽可能的复原图像的<strong>本来面目</strong>。</p>\n<!--more-->\n<p>如图，先对图片进行模糊处理\n<img src="http://obu9je6ng.bkt.clouddn.com/FkLD1OdGi0WKdv26sK4ubCj3ov6B?imageslim" alt="ClipboardImage" width="530" height="330" />\n然后对图片进行还原\n<img src="http://obu9je6ng.bkt.clouddn.com/FqQpRZv_Tzx54uHAREg7O9UPY8r3?imageslim" alt="ClipboardImage" width="530" height="330" /></p>\n<h1 id="代码解释"><a href="#%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A" aria-hidden="true"><span class="icon icon-link"></span></a>代码解释</h1>\n<pre><code class="hljs language-java" data-query="{}" data-lang="java">    <span class="hljs-comment">//图像恢复</span>\n\t<span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] imRestore(<span class="hljs-keyword">int</span>[] pixels, <span class="hljs-keyword">int</span> iw, <span class="hljs-keyword">int</span> ih)\n\t{\n\t\t<span class="hljs-keyword">double</span>[] newPixels = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [iw*ih];\n\t\t<span class="hljs-keyword">double</span>[] newKernel = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span> [iw*ih];\n\n\t\t<span class="hljs-comment">//初始化</span>\n\t\t<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &#x3C; ih; j++)\n\t\t{\n\t\t\t<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &#x3C; iw; i++)\n\t\t\t{\n\t\t\t\tnewPixels[i+j*iw] = pixels[i+j*iw]&#x26;<span class="hljs-number">0xff</span>;\n\t\t\t\t<span class="hljs-keyword">if</span>((i&#x3C;<span class="hljs-number">5</span>) &#x26;&#x26; (j&#x3C;<span class="hljs-number">5</span>))\n\t\t\t\t\tnewKernel[i+j*iw] = <span class="hljs-number">1.0</span>/<span class="hljs-number">25</span>;\n\t\t\t\t<span class="hljs-keyword">else</span>\n\t\t\t\t\tnewKernel[i+j*iw] = <span class="hljs-number">0</span>;\n\t\t\t}\n\t\t}\n\n\t\t<span class="hljs-comment">//初始化</span>\n\t\tComplex[] complex   = <span class="hljs-keyword">new</span> Complex[iw*ih];\n\t\tComplex[] comKernel = <span class="hljs-keyword">new</span> Complex[iw*ih];\n\t\t<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &#x3C; iw*ih; i++)\n\t\t{\n\t\t\tcomplex[i]   = <span class="hljs-keyword">new</span> Complex(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);\n\t\t\tcomKernel[i] = <span class="hljs-keyword">new</span> Complex(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);\n\t\t}\n\n\t\t<span class="hljs-comment">//对原图像进行FFT (快速傅氏变换)</span>\n\t\tfft2 = <span class="hljs-keyword">new</span> FFT2();\n\t\tfft2.setData2(iw, ih, newPixels);\n\t\tcomplex = fft2.getFFT2();\n\n\t\t<span class="hljs-comment">//对卷积核进行FFT</span>\n\t\tfft2 = <span class="hljs-keyword">new</span> FFT2();\n\t\tfft2.setData2(iw, ih, newKernel);\n\t\tcomKernel = fft2.getFFT2();\n\n\t\t<span class="hljs-comment">//逆滤波复原</span>\n\t\t<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &#x3C; ih; j++)\n\t\t{\n\t\t\t<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &#x3C; iw; i++)\n\t\t\t{\n\t\t\t\t<span class="hljs-keyword">double</span> re = complex[i+j*iw].re;\n\t\t\t\t<span class="hljs-keyword">double</span> im = complex[i+j*iw].im;\n\t\t\t\t<span class="hljs-keyword">double</span> reKernel = comKernel[i+j*iw].re;\n\t\t\t\t<span class="hljs-keyword">double</span> imKernel = comKernel[i+j*iw].im;\n\t\t\t\t<span class="hljs-keyword">double</span> x = reKernel*reKernel+imKernel*imKernel;\n\n\t\t\t\t<span class="hljs-keyword">if</span>(x > <span class="hljs-number">1e-3</span>)\n\t\t\t\t{\n\t\t\t\t\t<span class="hljs-keyword">double</span> r = (re*reKernel+im*imKernel)/x;\n\t\t\t\t\t<span class="hljs-keyword">double</span> m = (im*reKernel-re*imKernel)/x;\n\t\t\t\t\tcomplex[i+j*iw].re = r;\n\t\t\t\t\tcomplex[i+j*iw].im = m;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t<span class="hljs-comment">//进行FFT反变换</span>\n\t\tfft2 = <span class="hljs-keyword">new</span> FFT2();\n\t\tfft2.setData2i(iw, ih, complex);\n\t\tpixels = fft2.getPixels2i();\n\t\t<span class="hljs-keyword">return</span> pixels;\n\t}</code></pre>\n',extra:{}}}});