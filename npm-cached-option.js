webpackJsonp([36,90],{1027:function(n,e){n.exports={content:'<h1 id="yarn"><a href="#yarn" aria-hidden="true"><span class="icon icon-link"></span></a>yarn</h1>\n<p>最近停到facebook又出了个yarn, 新的node package manager.\n噱头是安装能够直接找缓存，不需要每次从网上下。</p>\n<p>于是<code>npm i -g yarn</code>安装后，使用了一番，觉得也就那样，还需要把<code>yarn.lock</code>放到项目中，</p>\n<p><strong>其实<code>npm</code>对于cache也有一些指令处理的。</strong></p>\n<!--more-->\n<h1 id="npm"><a href="#npm" aria-hidden="true"><span class="icon icon-link"></span></a>npm</h1>\n<pre><code data-query="{}" data-lang="">npm cache ls\n</code></pre>\n<p>可以查看你本地的cache，之前你的每一次<code>install</code>都会在本地有cache的，默认是放在<code>$HOME/.npm</code>中\nnpm cache clean\n清除本地cache</p>\n<pre><code data-query="{}" data-lang="">npm install react --cache-min 6000\n</code></pre>\n<p>上面<code>--cache-min</code>指的是是否需要从缓存里面取package，时间不超过6000分钟，超过6000分钟也将从网上download，\n还可以<code>--cache-min=Infinity</code>，分钟数设为无穷，这样可以保证了包下载的速度。</p>\n<pre><code data-query="{}" data-lang="">npm install --only=dev\n</code></pre>\n<p>将会只安装<code>package.json</code>中的<code>devDependencies</code>, 对立的是<code>--only=production</code></p>\n<h1 id="more"><a href="#more" aria-hidden="true"><span class="icon icon-link"></span></a>more</h1>\n<p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html"> 阮一峰 npm 模块安装机制简介</a></p>\n',extra:{}}}});